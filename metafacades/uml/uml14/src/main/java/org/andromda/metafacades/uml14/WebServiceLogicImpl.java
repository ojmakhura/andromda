// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.metafacades.uml14;

import java.util.Collection;
import org.andromda.metafacades.uml.TypeMappings;
import org.andromda.metafacades.uml.WebServiceOperation;

/**
 * Represents a web service.
 * MetafacadeLogic implementation for org.andromda.metafacades.uml.WebService.
 *
 * @see org.andromda.metafacades.uml.WebService
 */
public class WebServiceLogicImpl
    extends WebServiceLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for WebServiceLogicImpl
     * @see org.andromda.metafacades.uml.WebService
     */
    public WebServiceLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * The name of the RPC implementation class.
     * @see org.andromda.metafacades.uml.WebService#getRpcClassName()
     */
    protected String handleGetRpcClassName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Whether or not this web service is secured (its based on whether or not it has any roles
     * associated to it).
     * @see org.andromda.metafacades.uml.WebService#isSecured()
     */
    protected boolean handleIsSecured()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Creates a space delimited string containing a name of ALL allowed methods.
     * @see org.andromda.metafacades.uml.WebService#getAllowedMethods()
     */
    protected String handleGetAllowedMethods()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The location of the WSDL file for this web service.
     * @see org.andromda.metafacades.uml.WebService#getWsdlFile()
     */
    protected String handleGetWsdlFile()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The use of items in the binding, either LITERAL or ENCODED.
     * @see org.andromda.metafacades.uml.WebService#getUse()
     */
    protected String handleGetUse()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The style of binding in the generated WSDL, either DOCUMENT, RPC, or WRAPPED.
     * @see org.andromda.metafacades.uml.WebService#getStyle()
     */
    protected String handleGetStyle()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name of the namespace to which this web service belongs.
     * @see org.andromda.metafacades.uml.WebService#getNamespace()
     */
    protected String handleGetNamespace()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The provider for this web service. Provider is something like: 'java:RPC', or 'java:EJB' etc.
     * @see org.andromda.metafacades.uml.WebService#getProvider()
     */
    protected String handleGetProvider()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The namespace prefix used for types defined within the generated WSDLs.
     * @see org.andromda.metafacades.uml.WebService#getNamespacePrefix()
     */
    protected String handleGetNamespacePrefix()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The home interface name for an EJB provider.
     * @see org.andromda.metafacades.uml.WebService#getEjbHomeInterface()
     */
    protected String handleGetEjbHomeInterface()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The interface name for an EJB provider.
     * @see org.andromda.metafacades.uml.WebService#getEjbInterface()
     */
    protected String handleGetEjbInterface()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The JNDI name for the EJB provider (the EJB that provides the functionality behind this web
     * service).
     * @see org.andromda.metafacades.uml.WebService#getEjbJndiName()
     */
    protected String handleGetEjbJndiName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The QName for this service.  Usually it will be the same name as the model element, however
     * it is possible to specify a prefix to give to this name.
     * @see org.andromda.metafacades.uml.WebService#getQName()
     */
    protected String handleGetQName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name of the package to which tests are generated.
     * @see org.andromda.metafacades.uml.WebService#getTestPackageName()
     */
    protected String handleGetTestPackageName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The fully qualified name of a test generated for this web service.
     * @see org.andromda.metafacades.uml.WebService#getFullyQualifiedTestName()
     */
    protected String handleGetFullyQualifiedTestName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name of a the test for this web service.
     * @see org.andromda.metafacades.uml.WebService#getTestName()
     */
    protected String handleGetTestName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Indicates whether or not this service style is "wrapped".
     * @see org.andromda.metafacades.uml.WebService#isWrappedStyle()
     */
    protected boolean handleIsWrappedStyle()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not this service is "document" style.
     * @see org.andromda.metafacades.uml.WebService#isDocumentStyle()
     */
    protected boolean handleIsDocumentStyle()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not this service is "rpc" style.
     * @see org.andromda.metafacades.uml.WebService#isRpcStyle()
     */
    protected boolean handleIsRpcStyle()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not this web service has a "literal" use defined.
     * @see org.andromda.metafacades.uml.WebService#isLiteralUse()
     */
    protected boolean handleIsLiteralUse()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not this web service has a "encoded" use defined.
     * @see org.andromda.metafacades.uml.WebService#isEncodedUse()
     */
    protected boolean handleIsEncodedUse()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * The name for the test implementation class.
     * @see org.andromda.metafacades.uml.WebService#getTestImplementationName()
     */
    protected String handleGetTestImplementationName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The fully qualified name of the test implementation class for this web service.
     * @see org.andromda.metafacades.uml.WebService#getFullyQualifiedTestImplementationName()
     */
    protected String handleGetFullyQualifiedTestImplementationName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Returns a collection of all type mappings used by this WebServiceFacade.  This consists of
     * all complex types that the service may take in as a parameter in an operation or returns and
     * exceptions that this web service throws.
     * @see org.andromda.metafacades.uml.WebService#getTypeMappingElements()
     */
    protected Collection handleGetTypeMappingElements()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Use Jaxb2 XJC simple binding mode
     * @see org.andromda.metafacades.uml.WebService#isSimpleBindingMode()
     */
    protected boolean handleIsSimpleBindingMode()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Override global default XJC arguments for Jaxb wsdl2java (i.e. add Collection setters,
     * equals, toString methods).
     * @see org.andromda.metafacades.uml.WebService#getXjcArguments()
     */
    protected String handleGetXjcArguments()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Validate incoming webservice XML against wsdl/xsd schema
     * @see org.andromda.metafacades.uml.WebService#isSchemaValidation()
     */
    protected boolean handleIsSchemaValidation()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * The URL path for the REST webservice. If unspecified, the lowercase /classname/ is used.
     * @see org.andromda.metafacades.uml.WebService#getRestPath()
     */
    protected String handleGetRestPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Context used for REST JAX-WS implementation for this service.
     * @see org.andromda.metafacades.uml.WebService#getRestContexts()
     */
    protected Collection<String> handleGetRestContexts()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Number of REST JAX-RS service methods in this class. If WebService stereotype rest value is
     * true, all methods are REST methods, otherwise this is the count of exposed
     * WebServiceOperations with rest value set to true. This is the only required configuration for
     * implementing REST services, the rest use intelligent defaults which can be overridden.
     * @see org.andromda.metafacades.uml.WebService#getRestCount()
     */
    protected int handleGetRestCount()
    {
        // TODO put your implementation here.
        return 0;
    }

    /**
     * Specified CacheType (none, always, etc) in @CacheType annotation.
     * @see org.andromda.metafacades.uml.WebService#getRestCacheType()
     */
    protected String handleGetRestCacheType()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * @Produces(media type) annotation. i.e. json, atom, plain/text, xml.
     * @see org.andromda.metafacades.uml.WebService#getRestProduces()
     */
    protected String handleGetRestProduces()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * @Consumes(media type) annotation. i.e. json, atom, plain/text, xml.
     * @see org.andromda.metafacades.uml.WebService#getRestConsumes()
     */
    protected String handleGetRestConsumes()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Customized REST @Provider annotation, must be implemented in the  generated class.
     * @see org.andromda.metafacades.uml.WebService#getRestProvider()
     */
    protected String handleGetRestProvider()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Customized target ElementType, default=METHOD.
     * @see org.andromda.metafacades.uml.WebService#getRestTarget()
     */
    protected String handleGetRestTarget()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Customized RetentionPolicy (default=RUNTIME).
     * @see org.andromda.metafacades.uml.WebService#getRestRetention()
     */
    protected String handleGetRestRetention()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Customized Http Method implementation.
     * @see org.andromda.metafacades.uml.WebService#getRestMethod()
     */
    protected String handleGetRestMethod()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * If this REST service provides application/atom, or any service operations provide
     * application/atom
     * @see org.andromda.metafacades.uml.WebService#isRestAtom()
     */
    protected boolean handleIsRestAtom()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Number of REST JAX-RS service methods in this class. If WebService stereotype rest value is
     * true, all methods are REST methods, otherwise this is the count of exposed
     * WebServiceOperations with rest value set to true. This is the only required configuration for
     * implementing REST services, the rest use intelligent defaults which can be overridden.
     * @see org.andromda.metafacades.uml.WebService#getJaxwsCount()
     */
    protected int handleGetJaxwsCount()
    {
        // TODO put your implementation here.
        return 0;
    }

    /**
     * TODO: Model Documentation for org.andromda.metafacades.uml.WebService.getSchemaMappings
     * @see org.andromda.metafacades.uml.WebService#getSchemaMappings()
     */
    protected TypeMappings handleGetSchemaMappings()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * TODO: Model Documentation for org.andromda.metafacades.uml.WebService.getPackageReferences
     * @see org.andromda.metafacades.uml.WebService#getPackageReferences(String, boolean)
     */
    protected Collection handleGetPackageReferences(String packageName, boolean follow)
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Represents a web service.
     * @see org.andromda.metafacades.uml.WebService#getAllowedOperations()
     */
    protected Collection<WebServiceOperation> handleGetAllowedOperations()
    {
        // TODO add your implementation here!
        return null;
    }
}