<?xml version="1.0" encoding="UTF-8" ?>
<namespace name="${namespace.name}" shared="true">
    <components>
        <component name="metafacades">
            <path>META-INF/andromda/metafacades.xml</path>
        </component>
        <component name="profile">
            <path>META-INF/andromda/profile.xml</path>
        </component>
    </components>
    <properties>
        <propertyGroup name="Masking">
            <documentation>
                Certain namespace properties (the ones listed below) are used to provide masking of names.
                For example a name such as "Hospital Visit" given to an enumeration literal could be transformed
                into <em>'HOSPITAL_VISIT'</em> during model processing by applying the <em>'upperunderscore'</em>
                mask to it.
                When applicable, the following masks are available:
                <ul>
                    <li>uppercase - upper cases the name (i.e. "Hospital Visit" would become <em>HOSPITAL VISIT</em>)</li>
                    <li>lowercase - lower cases the name (i.e. "Hospital Visit" would become <em>hospital visit</em>)</li>
                    <li>upperunderscore - upper cases the name and replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>HOSPITAL_VISIT</em>)</li>
                    <li>lowerunderscore - lower cases the name and replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>hospital_visit</em>)</li>
                    <li>underscore - replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>Hospital_Visit</em>)</li>
                    <li>nospace - removes all spaces (i.e. "Hospital Visit" would become <em>HospitalVisit</em>)</li>
                    <li>uppercamelcase - camel cases the word beginning with an upper cased letter (i.e. "Hospital Visit" would become <em>HospitalVisit</em>)</li>
                    <li>lowercamelcase - camel cases the word beginning with a lower cased letter (i.e. "Hospital Visit" would become <em>hospitalVisit</em></li>
                    <li>none - no mask is applied</li>
                </ul>
            </documentation>
            <property name="modelElementNameMask">
                <default>none</default>
                <documentation>
                   Provides the ability to apply a mask to all model element names.
                </documentation>
            </property>
            <property name="classifierNameMask">
                <default>none</default>
                <documentation>
                   Provides the ability to apply a mask to all classifier names.
                </documentation>
            </property>
            <property name="operationNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to all operation names.
                </documentation>
            </property>
            <property name="classifierPropertyNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to all classifier property names.
                </documentation>
            </property>
            <property name="roleNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to role names (roles
                    are actors).
                </documentation>
            </property>
            <property name="enumerationNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to enumeration names.
                </documentation>
            </property>
            <property name="entityNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to entity names
                </documentation>
            </property>
            <property name="entityPropertyNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to entity property names.
                </documentation>
            </property>
            <property name="parameterNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to all parameter names.
                </documentation>
            </property>
            <property name="enumerationLiteralNameMask">
                <default>none</default>
                <documentation>
                    Provides the ability to apply a mask to all enumeration literal names.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Other">
            <property name="languageMappingsUri">
                <documentation>
                    URI specifying the specific mappings from model types to language types.
                    (i.e. file:${basedir}/JavaMappings.xml)
                </documentation>
            </property>
            <property name="wrapperMappingsUri">
                <documentation>
                    URI specifying primitive type to wrapper types (i.e.
                    int -> java.lang.Integer)
                    (i.e. file:${basedir}/JavaWrapperMappings.xml)
                </documentation>
            </property>
            <property name="pluralizeAssociationEndNames">
                <default>true</default>
                <documentation>
                    Turns on/off the pluralization of association ends with multiplicities
                    greater than one.  You'll want to turn off this feature if your model
                    is in a language other than english.
                </documentation>
            </property>
            <property name="ngrx">
                <default>false</default>
                <documentation>
                    Whether or not to use NgRX
                </documentation>
            </property>
            <property name="secure">
                <default>false</default>
                <documentation>
                    This turns on/off the use of security features in the application
                </documentation>
            </property>
            <property name="pluralizeAttributeNames">
                <default>true</default>
                <documentation>
                    Turns on/off the pluralization of attribute names with multiplicities
                    greater than one.  Jaxb 2.1 by default pluralizes all attribute names,
                    Jaxb 2.0 by default does not. false for backwards compatibility with Andro 3.3.
                </documentation>
            </property>
            <property name="pluralizeParameterNames">
                <default>true</default>
                <documentation>
                    Turns on/off the pluralization of method parameter names with multiplicities
                    greater than one.  Jaxb 2.1 by default pluralizes all parameter names,
                    Jaxb 2.0 by default does not. false for backwards compatibility with Andro 3.3.
                </documentation>
            </property>
            <property name="namespaceSeparator">
                <default>.</default>
                <documentation>
                    Used to separate namespaces within the generated code.  For example
                    setting this to '.' causes fully qualified names to be defined as
                    'some.package.name.SomeClass'.
                </documentation>
            </property>
            <property name="undefinedName">
                <default>undefined</default>
                <documentation>
                    When a model element name is unspecified this is
                    the name used (instead of null).
                </documentation>
            </property>
            <property name="enableTemplating">
                <default>true</default>
                <documentation>
                    Determines whether or not to enable templating, enabling this feature will produce
                    fully qualified names with their template parameters. Also, class names that are
                    implicitly templates will also have them present (eg.
                    <code>Person:addresses : datatype::List&lt;Address&gt;</code> for class associations).
                    Set this property to <code>true</code> if you want to enable this feature.
                </documentation>
            </property>
            <property name="enableAnnotations">
                <default>true</default>
                <documentation>
                    Determines whether or not to enable @Annotations, enabling this feature will produce
                    JDK5+ annotations such as @Override, @Deprecated, etc.
                </documentation>
            </property>
            <property name="useLombok">
                <default>true</default>
                <documentation>
                    Whether or not to use Lombok
                </documentation>
            </property>
    <!--
            <property name="templatingPattern">
                <default><![CDATA[<{0} extends {1}>]]></default>
                <documentation>
                    When templating is enabled (see the <code>enableTemplating</code> property), this property will
                    determine the syntax for the templating construct. Use <code>{0}</code> to represent the templating
                    variable name and <code>{1}</code> for the templating variable fully qualified name.
                    Using the default value for this property an example method could look like this:
                    <code><![CDATA[public <T extends A> Collection<T> someMethod()]]></code>
                </documentation>
            </property>
    -->
            <property name="arrayNameSuffix">
                <default>[]</default>
                <documentation>
                    The suffix given to array names.
                </documentation>
            </property>
            <property name="useArraysForMultiplicitiesOfTypeMany">
                <default>false</default>
                <documentation>
                    Whether or not array types should denote multiplicities
                    greater than one for associations between objects where appropriate
                    (i.e. value objects when exposed as webservices).
                </documentation>
            </property>
            <property name="maxSqlNameLength">
                <default>30</default>
                <documentation>
                    The maximum length that a SQL name (such as a column name or
                    table name) may be.  This is useful for databases that have a limit
                    on the length that a name used in DDL may be (like Oracle).  If you set
                    this to 30 for example, then all names will be shortened 
                    using the method set in shortenSqlNamesMethod
                    after 30 characters when retrieving the column name or table name.
                </documentation>
            </property>
            <property name="shortenSqlNamesMethod">
                <default>truncate</default>
                <documentation>
                    The method to be used to ensure name length. 
                    Supported values: 
                        truncate 
                        removeVowels
                    The removeVowels remove the needed vowels from the end until it 
                    reaches the needed length.
                </documentation>
            </property>
            <property name="schemaName" required="false">
                <documentation>
                    The name of the default schema in which all persistent entity tables
                    are stored.
                </documentation>
            </property>
            <property name="tableNamePrefix" required="false">
                <documentation>
                    The prefix to give all persistent entity table names.  For example
                    if you had an entity named 'Car' and you defined the tableNamePrefix
                    as 'My_', then the table name for the 'Car' entity would be
                    'My_Car'.
                </documentation>
            </property>
            <property name="columnNamePrefix" required="false">
                <documentation>
                    The prefix to give all persistent entity table column names.  For example
                    if you had an column named 'Name' and you defined the columnNamePrefix
                    as 'My_', then the column name would be 'My_Name'.
                </documentation>
            </property>
            <property name="columnNameSuffix" required="false">
                <documentation>
                    The suffix to give all persistent entity table column names.  For example
                    if you had an column named 'Name' and you defined the columnNameSuffix
                    as '_Table', then the column name would be 'Name_Table'.
                </documentation>
            </property>
            <property name="foreignKeySuffix">
                <default>_FK</default>
                <documentation>
                    The suffix to use when creating foreign keys for entity associations.
                </documentation>
            </property>
            <property name="constraintSuffix">
                <default>C</default>
                <documentation>
                    The suffix to use when creating constraints such as for entity associations.
                    This is appended to the <code>foreignKeySuffix</code> suffix for foreign
                    key constraint names.
                </documentation>
            </property>
            <property name="enableManageableEntities">
                <default>true</default>
                <documentation>
                    Whether or not to enable <![CDATA[<<Manageable>>]]> entities. Sometimes it is interesting
                    to disable the related code generating for a specific cartridge; let's say for
                    example that you only want to have the back-end code generated, not the front-end code: in
                    this case you'ld simple set this property to <code>false</code> in the corresponding
                    cartridge's (i.e. bpm4struts) namespace.
                </documentation>
            </property>
            <property name="manageablePackageSuffix">
                <default>crud</default>
                <documentation>
                    The name of the subpackage that will be used for the generation of
                    <![CDATA[<<Manageable>>]]> entities.
                </documentation>
            </property>
            <property name="sqlNameSeparator">
                <default>_</default>
                <documentation>
                    Defines what is used for separating words when SQL names are
                    constructed, for example a model element named CompanyAddress would
                    be translated to COMPANY_ADDRESS if the value of <code>sqlNameSeparator</code>
                    was '<em>_</em>'.
                </documentation>
            </property>
            <property name="enableMetafacadePropertyCaching">
                <default>true</default>
                <documentation>
                    Used for performance reasons, caching a metafacade's properties
                    significantly speeds up the code generation process. Can be disabled when debugging.
                    This feature can be set on a per cartridge basis.
                </documentation>
            </property>
            <property name="defaultMultiplicity">
                <default>1</default>
                <documentation>
                    The default multiplicity to use when nothing is defined, the possible values
                    are 0 or 1.
                </documentation>
            </property>
            <property name="preconditionNamePattern">
                <default>{0}Precondition</default>
                <documentation>
                    The pattern used for constructing an operation's precondition name.
                </documentation>
            </property>
            <property name="postconditionNamePattern">
                <default>{0}Postcondition</default>
                <documentation>
                    The pattern used to constructing an operation's postcondition name.
                </documentation>
            </property>
            <property name="sqlMappingsUri" required="false">
                <documentation>
                    The URI to the the SQL mappings file.
                </documentation>
            </property>
            <property name="jdbcMappingsUri" required="false">
                <documentation>
                    The URI to the the JDBC mappings file.
                </documentation>
            </property>
            <property name="manageableServiceAccessorPattern" required="false">
                <default>${application.package}.ManageableServiceLocator.instance().get{1}()</default>
                <documentation>
                    The pattern used for constructing the accessor's for manageable services.
                    Used with CRUD.
                </documentation>
            </property>
            <property name="servicePackageNamePattern">
                <default>{0}</default>
                <documentation>
                    The name of the package in which to create the service files, <code>{0}</code>
                    can be used to denote the package in which the service has been modeled.
                </documentation>
            </property>
            <property name="allowDefaultIdentifiers">
                <default>true</default>
                <documentation>
                    Specifies whether or not default identifiers should
                    be created for entities that do not have them
                    modeled.
                </documentation>
            </property>
            <property name="defaultIdentifierPattern">
                <default>id</default>
                <documentation>
                    The pattern used to construct the default identifier name of an entity, where <em>{0}</em>
                    represents the name of the entity as lower camel case (i.e. if <code>defaultIdentifierPattern</code>
                    had a value of <em>{0}Id</em>, then the resulting identifier of a an Entity named Person would
                    be <em>personId</em>).
                </documentation>
            </property>
            <property name="defaultIdentifierType">
                <default>datatype::Long</default>
                <documentation>
                    The UML type to give default identifiers.
                </documentation>
            </property>
            <property name="defaultIdentifierVisibility">
                <default>public</default>
                <documentation>
                    The visibility to give default identifiers.
                </documentation>
            </property>
            <property name="defaultEnumerationLiteralType">
                <default>datatype::String</default>
                <documentation>
                    The type to give default enumeration literals. Deprecated: Use UML enumeration name+value instead, for typesafe enum output.
                </documentation>
            </property>
            <property name="compositeIdentifierTypeNameSuffix">
                <default>PK</default>
                <documentation>
                    The suffix to add to the composite identifier type name.
                </documentation>
            </property>
            <property name="compositeIdentifierNameSuffix">
                <default>Pk</default>
                <documentation>
                    The suffix to add to the composite identifier name.
                </documentation>
            </property>
            <property name="relationNameSeparator">
                <default>2</default>
                <documentation>
                    The separator used for constructing a relation name between two associations.
                </documentation>
            </property>
            <property name="manageableIdDisplayStrategy">
                <default>auto</default>
                <documentation>
                </documentation>
            </property>
            <property name="defaultResolveable">
                <default>true</default>
                <documentation>
                </documentation>
            </property>
            <property name="defaultPageSize">
                <default>20</default>
                <documentation>
                </documentation>
            </property>
            <property name="defaultMaximumListSize">
                <default>250</default>
                <documentation>
                </documentation>
            </property>
            <property name="toDoTag">
                <default>TODO</default>
                <documentation>
                   The tag to use that prefixes all comments in generated source code that requires
                   manual modifications.  Eclipse users may want to set this to "TODO", which is
                   the default Eclipse task tag. NetBeans users may want to use @todo
                </documentation>
            </property>
            <property name="typeSafeEnumsEnabled">
            <default>true</default>
            <documentation>
                Indicates whether enumerations must be generated using a Java 5 type-safe enum or a
                traditional enumeration-pattern class. Note that there are 2 prerequisites for this
                property to work correctly: you must use a Java 5 compiler and you must use Hibernate 3
                or later for Object-relational mapping.
            </documentation>
            </property>
            <property name="toDoForMissingDocumentation">
                <default>true</default>
                <documentation>
                   If a model element documentation is missing, insert the text:
                   TODO: Missing Model Documentation for Name
                </documentation>
            </property>
            <property name="dummyData">
                <default>true</default>
                <documentation>
                    Indicates whether or not dummy data should be rendered (in places like controllers).
                </documentation>
            </property>
            <property name="backingListPattern">
                <default>{0}BackingList</default>
                <documentation>
                    The pattern used for constructing a parameter's backing list name.  A backing list
                    is used when you want to select the value of the parameter from a list (typically
                    used for drop-down select input types).
                </documentation>
            </property>
            <property name="backingValuePattern">
                <default>{0}BackingValue</default>
                <documentation>
                    The pattern used for constructing a parameter's backing value name.  A backing value
                    is used with an input table type (when you want to submit values from a table of
                    complex objects).
                </documentation>
            </property>
            <property name="labelListPattern">
                <default>{0}LabelList</default>
                <documentation>
                    The pattern used for constructing the label list name (stores the list
                    of possible parameter value labels).
                </documentation>
            </property>
            <property name="valueListPattern">
                <default>{0}ValueList</default>
                <documentation>
                    The pattern used for constructing the values list name (stores the list of
                    possible parameter values when selecting from a list).
                </documentation>
            </property>
            <property name="formPattern">
                <default>{0}Form</default>
                <documentation>
                    The pattern to use for constructing the form name, where
                    <em>{0}</em> is the name of the controller operation capitalized.
                </documentation>
            </property>
            <property name="formImplementationPattern">
                <default>{0}FormImpl</default>
                <documentation>
                    The pattern to use for constructing the form implementation name, where
                    <em>{0}</em> is the name of the controller operation capitalized.
                </documentation>
            </property>
            <property name="formMessagesProperty">
                <default>jsfMessages</default>
                <documentation>
                    Defines the name of the property on a form that stores messages.
                </documentation>
            </property>
            <property name="formBeanPattern">
                <default>{0}{1}Form</default>
                <documentation>
                    The pattern for constructing the name of the bean under which the form is stored,
                    where <em>{0}</em> is the name of the use case and <em>{1}</em> is the name of the trigger.
                </documentation>
            </property>
            <property name="controllerImplementationPattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern for constructing the name of the controller implementation class name (where <em>{0}</em>
                    represents the modeled name of the controller).
                </documentation>
            </property>
            <property name="actionFormKey">
                <default>form</default>
                <documentation>
                    The name of the key under which each action for is stored.  This
                    form is passed along from action to action in order to transfer
                    all parameters.
                </documentation>
            </property>
            <property name="messageResources">
                <default>message-resources</default>
                <documentation>
                    The path of the localized message resources (the <em>.properties</em>
                    suffix is appended to this value when creating the actual file.).
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Views">
            <property name="defaultDateFormat">
                <default>MM/dd/yyyy</default>
                <documentation>
                    The default date format to use in case it has not been explicitly
                    specified, for event parameters.
                    Take a look
                    <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html">here</a>
                    to see how to properly construct date formats.
                </documentation>
            </property>
            <property name="strictDateTimeFormat">
                <default>false</default>
                <documentation>
                    Specifies whether or not date and time formats are to be strictly matched.
                    This property takes either true or false as values. If set to true all dates and times
                    entered by the end-user will fail validation if they do not strictly adhere to their given format.
                    Note that this strictness can always be overriden locally
                    using the andromda_struts_view_field_format tagged value.
                </documentation>
            </property>
            <property name="defaultTimeFormat">
                <default>HH:mm</default>
                <documentation>
                    The default time format to use when it has not been explicitly
                    specified for event parameters. Take a look
                    <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html">here</a>
                    to see how to properly construct time formats.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Configuration">
            <documentation>
               The properties that provide configuration 
            </documentation>
            <property name="formScope">
                <default>request</default>
                <documentation>
                    The scope to given the forms.  This value can be overriddem by a tagged value.
                </documentation>
            </property>
            <property name="controllerScope">
                <default>request</default>
                <documentation>
                    The scope to given the controllers.
                </documentation>
            </property>
            <property name="navigationBeanScope">
                <default>request</default>
                <documentation>
                    The scope to given the navigation items.
                </documentation>
            </property>
            <property name="fileUploadMaxMemoryPerRequest">
                <default>512000</default>
                <documentation>
                    Maximum memory per request (in bytes) for file uploads.
                </documentation>
            </property>
            <property name="fileUploadMaxDiskSpacePerRequest">
                <default>10240000</default>
                <documentation>
                    Maximum memory per request (in bytes) for file uploads.
                </documentation>
            </property>
        </propertyGroup>
    </properties>
</namespace>