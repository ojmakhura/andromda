#set ($generatedFile = "${manageable.controllerFullPath}.java")
// license-header java merge-point
// Generated by andromda-jakarta cartridge (controllers\crud\Controller.java.vsl) DO NOT EDIT!
package $manageable.manageablePackageName;

#if ($manageable.compositeIdentifier)
#set($identifierIsPrimitive = false)
#set($identifierIsIntegerType = false)
#set($identifierIsLongType = false)
#set($identifierIsStringType = false)
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#else
#set($theIdentifierType = $manageable.identifiers.iterator().next().type)
#set($identifierIsPrimitive = $theIdentifierType.primitive)
#set($identifierIsIntegerType = $theIdentifierType.integerType)
#set($identifierIsLongType = $theIdentifierType.longType)
#set($identifierIsStringType = $theIdentifierType.stringType)
#if($identifierIsPrimitive)
#set($identifierType = $theIdentifierType.wrapperName)
#else
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#end
#end
import org.primefaces.component.datatable.DataTable;

/**
 * Java Server Faces Controller of the ${manageable.name} CRUD management.
 */
public abstract class ${manageable.controllerName}
    extends ${managedBeansPackage}.CrudControllerBase
{

    /**
     * Returns an instance from the Jakarta context
     *
     */
    public static ${manageable.controllerName} instance()
    {
        return (${manageable.controllerName})${managedBeansPackage}.JakartaUtils.resolveVariable("${manageable.controllerBeanName}");
    }
    
    @Override
    protected void internalLoad(final Object idParam) throws Throwable
    {
        final ${identifierType} theIdParam;
        if(idParam instanceof ${identifierType})
        {
            theIdParam=(${identifierType})idParam;
        }
        else
        {
            theIdParam=${identifierType}.valueOf(idParam.toString());
        }
        
        load(theIdParam);
    }

    @Override
    protected void fillFormFromParameters(final java.util.Map<String,Object> useCaseParameters)
    {
        this.getForm().getSearchForm().copyFrom(useCaseParameters);
    }

    @Override
    protected boolean isIdSet() 
    {
        return this.getForm().${manageable.identifierGetterName}() != null#if(!$manageable.compositeIdentifier && ($identifierIsIntegerType || $identifierIsLongType)) && this.getForm().${manageable.identifierGetterName}()!=0#end;
    }
    
    /**
     * Initializes the controller, calling the doInit method
     *
     * @return the controller view path.
     * @throws Throwable
     */
    @Override
    public String init()
        throws Throwable
    {
        final ${manageable.formBeanType} form = this.getForm();

        this.doInit(form);
        return "${manageable.viewFullPath}.${facesServletExtension}";
    }

    /**
     * Initializes the controller. This method can be overridden.
     *
     * @param form the associated form
     * @throws Throwable
     */
    public void doInit(${manageable.formBeanType} form)
        throws Throwable
    {
#if ($manageable.preload)
        final java.util.Collection<${manageable.valueObjectClassName}> list = ${manageable.manageableServiceAccessorCall}.searchByExample(null);

        form.${manageable.listSetterName}(list);

#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
            saveMaxResultsWarning();

#end
#else
        form.${manageable.listSetterName}(null);

#end
        form.setEditState(false);
    }

    /**
     * The instance load action.
     *
     * @param ${manageable.identifierName} the identifier
     * @throws Throwable
     */
    public String load(${identifierType} ${manageable.identifierName})
        throws Throwable
    {
        final ${manageable.formBeanType} form = this.getForm();
        
        this.doLoad(${manageable.identifierName},form);
        return null;
    }

    /**
     * Loads the instance.
     *
     * @param ${manageable.identifierName} the identifier
     * @param form
     * @throws Throwable
     */
    public void doLoad(${identifierType} ${manageable.identifierName}, ${manageable.formBeanType} form)
        throws Throwable
    {
        final ${manageable.valueObjectClassName} vo=
            ${manageable.manageableServiceAccessorCall}.readById(${manageable.identifierName});

#foreach ($member in $manageable.manageableAttributes)
#if(!${member.inputFile})
        form.${member.setterName}(vo.${member.getterName}());
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}(vo.${member.getterName}());
#end

#foreach ($member in $manageable.manageableDetailsAssociationsEnds)
#set($loadDetailMethodName = "load${stringUtils.upperCamelCaseName(${member.name})}${crudDetailsSuffix}")
        ${loadDetailMethodName}(${manageable.identifierName});
#end

        form.setEditState(true);
    }

#foreach ($member in $manageable.manageableDetailsAssociationsEnds)
#set($loadDetailMethodName = "load${stringUtils.upperCamelCaseName($member.name)}${crudDetailsSuffix}")
    public void ${loadDetailMethodName}(${identifierType} ${manageable.identifierName}) throws Exception 
    {
        this.getForm().${member.setterName}${crudDetailsSuffix}(${member.type.manageablePackageName}.${member.type.controllerName}.instance().readByFilter("${member.otherEnd.name}", ${manageable.identifierName}));
    }
    
#end
    /**
     * The cancel edit action
     *
     * @return null
     * @throws Throwable
     */
    @Override
    public String cancel()
        throws Throwable
    {
        final ${manageable.formBeanType} form = this.getForm();
        this.doCancel(form);
        if(this.isUseCaseInDialog() && !this.isFiltered())
        {
            return super.closeDialog();
        }
        else
        {
            return null;
        }
    }

    /**
     * Executes the edit cancel.
     *
     * @param form the associated form
     * @throws Throwable
     */
    public void doCancel(${manageable.formBeanType} form)
        throws Throwable
    {
        form.setEditState(false);
    }

#if ($manageable.create)
    /**
     * The new instance action.
     *
     * @return null
     * @throws Throwable
     */
    @Override
    public String startNew()
        throws Throwable
    {
        final ${manageable.formBeanType} form = this.getForm();
        this.doStartNew(form);
        return null;
    }

    /**
     * Executes the new instance action.
     *
     * @param form the associated form
     * @throws Throwable
     */
    public void doStartNew(${manageable.formBeanType} form)
        throws Throwable
    {
## set all default attribute values
#foreach ($member in $manageable.manageableAttributes)
#set($memberType = $member.type)
#if ($member.defaultValuePresent)
#if ($memberType.dateType)
        form.${member.setterName}AsString("$member.defaultValue");
#els
        form.${member.setterName}($member.defaultValue);
#end
#else
#if ($memberType.primitive)
#if ($memberType.fullyQualifiedName == 'char')
        form.${member.setterName}(' ');
#elseif ($memberType.fullyQualifiedName == 'boolean')
        form.${member.setterName}(false);
#else
        form.${member.setterName}(0);
#end
#else
        form.${member.setterName}(null);
#end
#end
#end

#if (!$manageable.manageableAssociationEnds.empty)
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}(null);
#end
#end
#if (!$manageable.manageableDetailsAssociationsEnds.empty)
#foreach ($member in $manageable.manageableDetailsAssociationsEnds)
        form.${member.setterName}${crudDetailsSuffix}(null);
#end
#end
        //is it filtered? if so, set the property with the filter value
        final String filterAttribute=this.getFilterAttribute();
        if(filterAttribute != null)
        {
            org.apache.commons.beanutils.BeanUtils.setProperty(form, filterAttribute, this.getFilterValue());
        }

        form.setEditState(true);
    }
#end
#if ($manageable.create || $manageable.update)


    /**
     * The save and select instance action.
     *
     * @return null
     * @throws Throwable
     */
    @Override
    public String saveAndSelect()
        throws Throwable
    {
        this.save();

        return super.select(this.getForm().${manageable.identifierGetterName}(), this.getForm().${manageable.displayAttribute.getterName}());
    }

    /**
     * The save instance action.
     *
     * @return null
     * @throws Throwable
     */
    @Override
    public String save()
        throws Throwable
    {
        this.setLastPostedFormClientId(FORM_BEAN_NAME);
        final ${manageable.formBeanType} form = this.getForm();
        this.doSave(form);

        return null;
    }

    /**
     * Save and keep editing.
     *
     * @return null
     * @throws Throwable
     */
    public String saveAndKeepEditing()
        throws Throwable
    {
        this.setLastPostedFormClientId(FORM_BEAN_NAME);
        this.internalSave(this.getForm());

        return null;
    }
    
    protected void internalSave(${manageable.formBeanType} form)
                    throws Throwable
    {
        final ${manageable.valueObjectClassName} vo = new ${manageable.valueObjectClassName}();
#foreach ($member in $manageable.manageableMembers)
#if ($member.inputFile || $member.needsFileUpload)
        vo.${member.setterName}(form.${member.getterName}()==null?null:org.apache.commons.io.IOUtils.toByteArray(form.${member.getterName}().getInputstream()));
#else
        vo.${member.setterName}(form.${member.getterName}());
#end
#end            
#if ($manageable.create)
        if(form.${manageable.identifierGetterName}() == null#if(!$manageable.compositeIdentifier && ($identifierIsIntegerType || $identifierIsLongType)) || form.${manageable.identifierGetterName}()==0#end)
        {
#if(!$manageable.compositeIdentifier && ($identifierIsIntegerType || $identifierIsLongType))
            vo.${manageable.identifierSetterName}(null);
#end
            form.${manageable.identifierSetterName}(${manageable.manageableServiceAccessorCall}.create(vo).${manageable.identifierGetterName}());
#if($crudConfirmationMessages)
            ${managedBeansPackage}.JakartaUtils.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.created", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end
        }
        else
        {
#end
            ${manageable.manageableServiceAccessorCall}.update(vo);
#if($crudConfirmationMessages)
            ${managedBeansPackage}.JakartaUtils.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.changed", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end
#if ($manageable.create)
        }
#end
    }
    
    /**
     * Saves instance action.
     *
     * @param form the associated form
     * @throws Throwable
     */
    public void doSave(${manageable.formBeanType} form)
        throws Throwable
    {
        this.internalSave(form);
    
        if(form.${manageable.listGetterName}() != null) //only searches again if there was an old search
            this.doSearch(form); //search again to show the updated item (if it fits the search criteria)

        form.setEditState(false);
    }

#end
#if ($manageable.create)
    /**
     * The save and new instance action.
     *
     * @return null
     * @throws Throwable
     */
    @Override 
    public String saveAndNew()
        throws Throwable
    {
        this.setLastPostedFormClientId(FORM_BEAN_NAME);
        final ${manageable.formBeanType} form = this.getForm();
        this.doSave(form);
        this.doStartNew(form);
        return null;
    }
#end

    /**
     * The search action.
     *
     * @return null
     * @throws Throwable
     */
    @Override
    public String search()
        throws Throwable
    {
        this.setLastPostedFormClientId(FORM_BEAN_NAME);
        final ${manageable.formBeanType} form = this.getForm();
        this.doSearch(form);
		setResultToFirstPage();
        return null;
    }

    private static final String DATA_TABLE_SEARCH_NAME="searchResult";
    
    /**
    * Sets the resulta datatable to the first page
    */
    protected void setResultToFirstPage(){
        //Set page to 0 after call search
        DataTable dataTable = (DataTable) JakartaUtils.findComponentInRoot(":"+FORM_BEAN_NAME+":"+DATA_TABLE_SEARCH_NAME);
        dataTable.setFirst(0);
    }

    /**
     * Executes the search action.
     *
     * @param form the associated form
     * @throws Throwable
     */
    public void doSearch(${manageable.formBeanType} form)
        throws Throwable
    {
        //is it filtered? if so, set the property with the filter value
        final String filterAttribute=this.getFilterAttribute();
        if(filterAttribute != null)
        {
            org.apache.commons.beanutils.BeanUtils.setProperty(form.getSearchForm(), filterAttribute, this.getFilterValue());
        }

## Jakarta does not know the searchExample yet...
#set($searchExampleClassName = $stringUtils.replace($manageable.valueObjectClassName,'ValueObject','SearchExample'))
        final $searchExampleClassName searchExample = new ${searchExampleClassName}();
#foreach ($member in $manageable.manageableSearchAttributes)
        searchExample.${member.setterName}(form.getSearchForm().${member.getterName}());
#end
#foreach ($member in $manageable.manageableSearchAssociationEnds)
        searchExample.${member.setterName}(form.getSearchForm().${member.getterName}());
#end
        
        final java.util.Collection<${manageable.valueObjectClassName}> list=${manageable.manageableServiceAccessorCall}.searchByExample(searchExample);

        form.${manageable.listSetterName}(list);
#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
            saveMaxResultsWarning();
#end

        form.setEditState(false);
    }

#if ($manageable.delete)
    /**
     * The delete action.
     *
     * @param ${manageable.identifierName} the identifier
     * @throws Throwable
     */
    public String delete(${identifierType} ${manageable.identifierName})
        throws Throwable
    {
        final ${manageable.formBeanType} form = this.getForm();
        this.doDelete(${manageable.identifierName},form);
        return null;
    }

    /**
     * Deletes the selected instance.
     *
     * @param ${manageable.identifierName} the identifier
     * @param form the associated form
     * @throws Throwable
     */
    public void doDelete(${identifierType} ${manageable.identifierName}, ${manageable.formBeanType} form)
        throws Throwable
    {
        ${manageable.manageableServiceAccessorCall}.delete(new ${identifierType}[]{${manageable.identifierName}});
#if($crudConfirmationMessages)
        ${managedBeansPackage}.JakartaUtils.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.deleted", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end

        this.doSearch(form);
    }

#end
    /**
     * Export as ODS spreadsheet
     *
     * @return ${manageable.odsExportFullPath}
     * @throws Throwable
     */
    public String odsExport()
        throws Throwable
    {
        return "${manageable.odsExportFullPath}.xhtml?faces-redirect=true";
    }

    /**
     * Helper method to fill the select component list.
     *
     * @return a collection with the filtered list.
     * @throws Throwable
     */
    @Override
    public java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> getAsSelectItems()
        throws Throwable
    {
        final java.util.Collection<${manageable.valueObjectClassName}> vos;
        vos = ${manageable.manageableServiceAccessorCall}.searchByExample(null);
        final java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> result=new java.util.ArrayList<${jakartaNamespace}.faces.model.SelectItem>(vos.size());
        for(${manageable.valueObjectClassName} vo: vos){
            result.add(new ${jakartaNamespace}.faces.model.SelectItem(vo.${manageable.identifierGetterName}(),org.apache.commons.lang3.ObjectUtils.toString(vo.get$stringUtils.upperCamelCaseName($manageable.displayAttribute.name)())));
        }
        return result;
    }

    /** manageTaskForm */
    public static final String FORM_BEAN_NAME="${manageable.formBeanName}";

    /**
     * Resolves "${manageable.formBeanName}".
     *
     * @return the manageable form.
     */
    public ${manageable.formBeanType} getForm()
    {
        return (${manageable.formBeanType})${managedBeansPackage}.JakartaUtils.resolveVariable(FORM_BEAN_NAME);
    }

    public ${manageable.valueObjectClassName} readById(${identifierType} id) throws Exception
    {
        return ${manageable.manageableServiceAccessorCall}.readById(id);
    }

    public java.util.Collection<${manageable.valueObjectClassName}> readByIds(${identifierType}[] ids) throws Exception
    {
        final ${manageable.fullyQualifiedManageableServiceName} service=${manageable.manageableServiceAccessorCall};
        if(ids == null){
            return null;
        }
        else
        {
            final java.util.Collection<${manageable.valueObjectClassName}> result=new java.util.ArrayList<${manageable.valueObjectClassName}>(ids.length);
            for(final Long id: ids){
                result.add(service.readById(id));
            }
            return result;
        }
    }
    
    public java.util.Collection<${manageable.valueObjectClassName}> readByFilter(String attribute, Object value) throws Exception
    {
        if(attribute == null || value == null)//needed by the master/detail engine
        {
            return null;
        }
        else
        {
            final java.util.Map<String, Object> filter=new java.util.HashMap<String, Object>();
            filter.put(attribute, value);
            return readByFilter(filter);
        }
    }
    
    public java.util.Collection<${manageable.valueObjectClassName}> readByFilter(java.util.Map<String,Object> filter) throws Exception
    {
        return readByFilter(new ${manageable.searchFilterName}().loadFromObjectsMap(filter));
    }
    
    public java.util.Collection<${manageable.valueObjectClassName}> fillAutocomplete(java.util.Map<String,String> filter) throws Exception
    {
        return readByFilter(new ${manageable.searchFilterName}().loadFromStringsMap(filter));
    }
    
    public java.util.Collection<${manageable.valueObjectClassName}> fillAutocomplete(String searchValue) throws Exception
    {
        final $searchExampleClassName searchExample = new ${searchExampleClassName}();
#foreach ($member in $manageable.manageableMembers)
#if($member.name == $manageable.displayAttribute.name)
#if($member.type.stringType)
        searchExample.${member.setterName}(searchValue);
#elseif($member.type.dateType)
        searchExample.${member.setterName}(org.apache.commons.lang3.StringUtils.isEmpty(searchValue)? null: new ${member.type.fullyQualifiedName}(java.text.DateFormat.getInstance().parse(searchValue).getTime()));
#else    
        searchExample.${member.setterName}(org.apache.commons.lang3.StringUtils.isEmpty(searchValue)? null: #if($member.type.primitive)${member.type.wrapperName}#else ${member.type.fullyQualifiedName}#end.valueOf(searchValue));
#end
#end                    
#end

        final java.util.Collection<${manageable.valueObjectClassName}> result = ${manageable.manageableServiceAccessorCall}.searchByExample(searchExample);
        return result;
    }
    
    public java.util.Collection<${manageable.valueObjectClassName}> readByFilter(${manageable.searchFilterName} filter) throws Exception
    {
        final $searchExampleClassName searchExample = new ${searchExampleClassName}();
#foreach ($field in $manageable.manageableSearchAttributes)
            searchExample.${field.setterName}(filter.${field.getterName}());
#end
#foreach ($member in $manageable.manageableAssociationEnds)
            searchExample.${member.setterName}(filter.${member.getterName}());
#end

        final java.util.Collection<${manageable.valueObjectClassName}> result = ${manageable.manageableServiceAccessorCall}.searchByExample(searchExample);
        return result;
    }

    // crud-controller merge-point
}
