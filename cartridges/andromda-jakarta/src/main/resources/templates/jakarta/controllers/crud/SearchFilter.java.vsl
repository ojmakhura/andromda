#macro(setAssociatonEndType $associationEnd $fieldType $fieldTypeName)
#if($associationEnd.type.manageable)
#set ($fieldType = $associationEnd.manageableIdentifier.type)
#set ($fieldTypeName = $fieldType.fullyQualifiedName)
#else
#if($associationEnd.type.compositeIdentifier)
#set ($fieldTypeName = "Object")
#else
#set ($fieldType = $associationEnd.type.identifiers.iterator().next().type)
#set ($fieldTypeName = $fieldType.fullyQualifiedName)
#end
#end
#if ($associationEnd.many)
#set ($fieldTypeName = "${fieldTypeName}[]")
#end
#end
#set ($generatedFile = "${manageable.searchFilterFullPath}.java")
// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\crud\SearchFilter.java.vsl) DO NOT EDIT!
package $manageable.manageablePackageName;

public class ${manageable.searchFilterName} 
    implements java.io.Serializable 
{

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${manageable.searchFilterSerialVersionUID}L;

#foreach ($field in $manageable.manageableSearchAttributes)
#setFieldWrapperTypeName($field $fieldWrapperTypeName)
    private $fieldWrapperTypeName $field.name=null;

    public $fieldWrapperTypeName ${field.getterName}()
    {
        return this.${field.name};
    }

    public void ${field.setterName}($fieldWrapperTypeName ${field.name}In)
    {
        this.$field.name = ${field.name}In;
    }
    
#if(!$field.type.stringType)
    public void ${field.setterName}(java.lang.String ${field.name}In)
    {
#if($field.type.enumeration)
            //TODO corrigir
            this.${field.name}=${field.type.fullyQualifiedName}.fromString(${field.name}In);
#elseif($field.type.dateType)
            try {
#if($fieldWrapperTypeName == "java.util.Date")            
                this.${field.name}=java.text.SimpleDateFormat.getInstance().parse(${field.name}In);
#else
                this.${field.name}=new ${fieldWrapperTypeName}(java.text.SimpleDateFormat.getInstance().parse(${field.name}In).getTime());
#end                
            } catch (java.text.ParseException e) {
                throw new RuntimeException(e);
            }
#elseif($fieldWrapperTypeName == "java.math.BigDecimal")
            this.${field.name}=new java.math.BigDecimal(${field.name}In);
#else
            this.${field.name}=${fieldWrapperTypeName}.valueOf(${field.name}In);
#end
    }

#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#setAssociatonEndType($member $fieldType $fieldTypeName)
    private $fieldTypeName $member.name;

    public $fieldTypeName ${member.getterName}()
    {
        return this.$member.name;
    }

    public void ${member.setterName}($fieldTypeName ${member.name}In)
    {
        this.$member.name = ${member.name}In;
    }
    
#if ($member.many)
    public void ${member.setterName}(java.lang.String ${member.name}In)
    {
        final String[] strValues=${member.name}In.split(",");
        final ${fieldType.fullyQualifiedName}[] values=new ${fieldType.fullyQualifiedName}[strValues.length];
        for(int i=0; i<strValues.length; i++)
        {
            values[i]=${fieldType.fullyQualifiedName}.valueOf(strValues[i]);
        }
        this.$member.name = values;
    }

#elseif(!$fieldType.stringType)
    public void ${member.setterName}(java.lang.String ${member.name}In)
    {
        this.$member.name = ${fieldType.fullyQualifiedName}.valueOf(${member.name}In);
    }

#end    
#end
    public ${manageable.searchFilterName} loadFromStringsMap(final java.util.Map<String,String> source)
    {
#foreach ($field in $manageable.manageableSearchAttributes)
        if(source.containsKey("${field.name}"))
        {
            this.${field.setterName}(source.get("${field.name}"));
        }
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        if(source.containsKey("${member.name}"))
        {
            this.${member.setterName}(source.get("${member.name}"));
        }
#end        
        return this;    
    }
    
    public ${manageable.searchFilterName} loadFromObjectsMap(final java.util.Map<String,Object> source)
    {
#foreach ($field in $manageable.manageableSearchAttributes)
#setFieldWrapperTypeName($field $fieldWrapperTypeName)
        if(source.containsKey("${field.name}"))
        {
            this.${field.setterName}((${fieldWrapperTypeName})source.get("${field.name}"));
        }
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#setAssociatonEndType($member $fieldType $fieldTypeName)
        if(source.containsKey("${member.name}"))
        {
            this.${member.setterName}((${fieldTypeName})source.get("${member.name}"));
        }
#end        
        return this;    
    }
}
