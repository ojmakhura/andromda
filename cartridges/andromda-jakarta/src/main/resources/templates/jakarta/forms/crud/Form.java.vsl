#set ($generatedFile = "${manageable.formBeanFullPath}.java")
##
##
##
#macro (resetField $field)
#if ($field.type.primitive)
#if ($field.type.fullyQualifiedName == 'boolean')
this.$field.name = false;
#elseif($field.type.longType)
this.$field.name = 0L;
#else
this.$field.name = 0;
#end
#else
this.$field.name = null;
#end
#end
##
##  START TEMPLATE
##
// license-header java merge-point
// Generated by andromda-jakarta cartridge (forms\crud\Form.java.vsl) DO NOT EDIT!
package $manageable.manageablePackageName;

/**
$manageable.getDocumentation(" * ")
 * This form encapsulates the fields that are used in the execution of the CRUD operations in ${manageable.name}
 */
public class $manageable.formBeanClassName
    implements java.io.Serializable
{
    /**
     * Default constructor.
     */
    public ${manageable.formBeanClassName}(){
        this.editState=false;
        this.searchForm = new ${manageable.searchFormBeanClassName}();
    }

    /**
     * Holds the edit/search state of the form
     */
    private boolean editState;

    /**
     * Getter for the attribute editState
     *
     * @return the value of editState
     */
    public boolean getEditState(){
        return this.editState;
    }

    /**
     * Setter for the attribute editState
     *
     * @param editStateIn the new value of the attribute editState
     */
    public void setEditState(boolean editStateIn){
        this.editState = editStateIn;
    }

    private ${manageable.searchFormBeanClassName} searchForm;

    /**
     * Getter for the attribute searchForm
     *
     * @return the value of searchForm
     */
    public ${manageable.searchFormBeanClassName} getSearchForm(){
        return this.searchForm;
    }

    /**
     * Setter for the attribute searchForm
     *
     * @param searchFormIn the new value for the attribute searchForm
     */
    public void setSearchForm(${manageable.searchFormBeanClassName} searchFormIn){
        this.searchForm = searchFormIn;
    }

    private java.util.Collection<${manageable.valueObjectClassName}> $manageable.listName = null;

    /**
     * Getter for the attribute $manageable.listName
     *
     * @return $manageable.listName
     */
    public java.util.Collection<${manageable.valueObjectClassName}> ${manageable.listGetterName}()
    {
        return this.$manageable.listName;
    }

    /**
     * Setter for the attribute $manageable.listName
     *
     * @param ${manageable.listName}In the new value for attribute $manageable.listName
     */
    public void ${manageable.listSetterName}(java.util.Collection<${manageable.valueObjectClassName}> ${manageable.listName}In)
    {
        this.$manageable.listName = ${manageable.listName}In;
    }

    private ${manageable.fullyQualifiedIdentifierTypeName}[] selectedRows = null;

    /**
     * Getter for the attribute selectedRows
     *
     * @return the value of selectedRows
     */
    public ${manageable.fullyQualifiedIdentifierTypeName}[] getSelectedRows()
    {
        return this.selectedRows;
    }

    /**
     * Setter for the attribute selectedRows
     *
     * @param selectedRowsIn the new value of the attribute selectedRows
     */
    public void setSelectedRows(${manageable.fullyQualifiedIdentifierTypeName}[] selectedRowsIn)
    {
        this.selectedRows = selectedRowsIn;
    }

#foreach ($field in $manageable.manageableAttributes)
#setFieldTypeName($field $fieldTypeName)
#foreach($annotation in $field.annotations)
    $annotation
#end
#if ($field.defaultValuePresent)
    private $fieldTypeName $field.name = $field.defaultValue;
#else
    private $fieldTypeName $field.name;
#end

    /**
$field.getDocumentation("     * ")
     *
     * @return $field.name
     */
    public $fieldTypeName ${field.getterName}()
    {
#if ($field.complex)
        if (this.$field.name == null)
        {
            this.$field.name = new ${field.type.fullyQualifiedName}();
        }
#end
        return this.${field.name};
    }
#renderAlternateGetterForPrimitiveBoolean($field.name $fieldTypeName ${field.getterName})

    /**
$field.getDocumentation("     * ")
     *
     * @param ${field.name}In
     */
    public void ${field.setterName}($fieldTypeName ${field.name}In)
    {
#if($trimInputStrings && $field.type.stringType && !$field.many)
        this.$field.name = org.apache.commons.lang3.StringUtils.trimToNull(${field.name}In);
#else
        this.$field.name = ${field.name}In;
#end
    }

    private java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> $field.backingListName;

#set ($backingListMethod = $stringUtils.capitalize($field.backingListName))
    /**
     * Getter of the attribute $field.backingListName
     *
     * @return $field.backingListName
     */
    public java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> get${backingListMethod}(){
        return this.${field.backingListName};
    }

    /**
     * Setter of the attribute $field.backingListName
     *
     * @param ${field.backingListName}In the new value of $field.backingListName
     */
    public void set${backingListMethod}(java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> ${field.backingListName}In){
        this.${field.backingListName} = ${field.backingListName}In;
    }

#end
#if (!$manageable.manageableAssociationEnds.empty)
    // Manageable associationEnds in $manageable.name
    
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if($member.type.manageable)
#set ($fieldType = $member.manageableIdentifier.type)
#set ($fieldTypeName = $fieldType.fullyQualifiedName)
#else
#if($member.type.compositeIdentifier)
#set ($fieldTypeName = "Object")
#else
#set ($fieldType = $member.type.identifiers.iterator().next().type)
#set ($fieldTypeName = $fieldType.fullyQualifiedName)
#end
#end
    private $fieldTypeName#if($member.many)[]#end $member.name;

    /**
$member.getDocumentation("     * ")
     *
     * @return $member.name
     */
    $member.visibility $fieldTypeName#if($member.many)[]#end ${member.getterName}()
    {
        return this.$member.name;
    }

    /**
$member.getDocumentation("     * ")
     *
     * @param ${member.name}In
     */
    $member.visibility void ${member.setterName}($fieldTypeName#if($member.many)[]#end ${member.name}In)
    {
## the code below avoids the "0 when null" issue of EL
#if($member.type.compositeIdentifier || $fieldType.primitive || (!$fieldType.integerType && !$fieldType.longType))
        this.$member.name = ${member.name}In;
#else
        //the code below avoids the "0 when null" issue of EL
#if ($member.many)
        this.$member.name = ${managedBeansPackage}.JakartaUtils.removeZeros(${member.name}In);
#else
        this.$member.name = (${member.name}In == null || ${member.name}In == 0#if($fieldType.longType)L#end)? null: ${member.name}In;
#end
#end
    }

    private java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> $member.backingListName;

#set ($backingListMethod = $stringUtils.capitalize($member.backingListName))
    /**
     * The current collection of possible values of ${member.name}.
     *
     * @return ${member.backingListName}
     */
    public java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> get${backingListMethod}(){
        return this.${member.backingListName};
    }

    /**
     * The current collection of possible values of ${member.name}.
     *
     * @param ${member.backingListName}In
     */
    public void set${backingListMethod}(java.util.Collection<${jakartaNamespace}.faces.model.SelectItem> ${member.backingListName}In){
        this.${member.backingListName} = ${member.backingListName}In;
    }

#end
    // Master/detail view helpers
#foreach ($member in $manageable.manageableDetailsAssociationsEnds)
#set($fullyQualifiedDetailValueObjectName = "${member.type.manageablePackageName}.${member.type.valueObjectClassName}")
#set($detailsCollectionType="java.util.Collection<${fullyQualifiedDetailValueObjectName}>")
#set($detailsName="${member.name}${crudDetailsSuffix}")

    private $detailsCollectionType $detailsName;
    
    /**
     * The collection of ${fullyQualifiedDetailValueObjectName}.
     */
    public $detailsCollectionType ${member.getterName}${crudDetailsSuffix}()
    {
        return this.$detailsName;
    }

    /**
     * The collection of ${fullyQualifiedDetailValueObjectName}.
     */
    public void ${member.setterName}${crudDetailsSuffix}($detailsCollectionType ${detailsName}In)
    {
        this.$detailsName = ${detailsName}In;
    }
    
#end
#renderCopyFrom($manageable.formBeanClassName $manageable.manageableAttributes $manageable.manageableAssociationEnds)

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${manageable.formSerialVersionUID}L;
}