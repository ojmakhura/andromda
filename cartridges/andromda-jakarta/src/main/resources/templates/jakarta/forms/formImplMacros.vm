##
##  This macro renders the backing list support for the form implementation
##
#macro(renderBackingListImplSupport $field $ownerParameter)
#if ($field.backingListName)
#set ($backingListName = $field.backingListName)
#else
#set ($backingListName = $field.getBackingListName($ownerParameter))
#end

    /**
     * Stores the label/value pairs.
     */
    private java.util.Collection<${hibernateNamespace}.faces.model.SelectItem> $backingListName;

#set ($backingListMethod = $stringUtils.capitalize($backingListName))

    /**
     * @return backingList java.util.Collection<${hibernateNamespace}.faces.model.SelectItem>
     */
    public java.util.Collection<${hibernateNamespace}.faces.model.SelectItem> get${backingListMethod}()
    {
        return $backingListName;
    }

    /**
     * @param ${backingListName}In
     */
    public void set${backingListMethod}(java.util.Collection<${hibernateNamespace}.faces.model.SelectItem> ${backingListName}In)
    {
        this.$backingListName = ${backingListName}In;
    }
    
#end
##
##  This macro renders an alternate getter to boolean types because some frameworks
##  like Primefaces does not work well with 'is' in boolean types
##
#macro (renderAlternateGetterForPrimitiveBoolean $fieldName $fieldType $defaultGetter)
#if($defaultGetter.startsWith("is"))
#set($newGetter = $defaultGetter.replaceFirst("is","get"))
    public $fieldType $newGetter()
    {
        return this.$fieldName;
    }
#end
#end