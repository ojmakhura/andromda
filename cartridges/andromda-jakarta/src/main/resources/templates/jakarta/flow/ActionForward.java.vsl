// license-header java merge-point
// Generated by andromda-jakarta cartridge (flow\ActionForward.java.vsl) DO NOT EDIT!
#if ($stringUtils.isNotBlank($action.packageName))
package $action.packageName;
#end

/**
 * This servlet is used to allow controller operation execution through
 * a URL call.
 */
@jakarta.servlet.annotation.WebServlet("${action.path}.${facesServletExtension}")
public class $action.actionClassName
    extends jakarta.servlet.http.HttpServlet
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    @jakarta.inject.Inject
    private $action.controlle.fullyQualifiedImplementationName $action.controlle.beanName;

    /**
     * @see jakarta.servlet.http.HttpServlet#hash()doGet(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse)
     */
    @Override
    public void doGet(
        final jakarta.servlet.http.HttpServletRequest request,
        final jakarta.servlet.http.HttpServletResponse response)
        throws jakarta.servlet.ServletException, java.io.IOException
    {
        // - we need to resolve the controller differently since we're outside of the faces servlet
#set ($facesContextUtilsFullyQualifiedName = "FacesContextUtils")
#if ($stringUtils.isNotBlank($managedBeansPackage))
#set($facesContextUtilsFullyQualifiedName = "${managedBeansPackage}.${facesContextUtilsFullyQualifiedName}")
#end
#set ($controller = $action.controller)
## TODO UMLMETA-106 uml22 StateVertex outgoing FinalState target returns null/unknown for Exception transition.
##        // action=$action
##        // activityGraph=$action.activityGraph
##foreach ($state in $action.activityGraph.states)
##        // state=$state transition=$state.transition
##end
## Returns null in UML2 model
##        // controller=$action.activityGraph.controller
        
        final String forwardPath;
        try
        {
            forwardPath = ${controller.beanName}.startUseCase();
        }
        catch(Throwable t)
        {
            throw new jakarta.servlet.ServletException(t);
        }
        
        if(forwardPath != null){
            request.getRequestDispatcher(forwardPath).forward(request, response);
        }
    }

    /**
     * @see jakarta.servlet.http.HttpServlet#hash()doPost(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse)
     */
    @Override
    public void doPost(
        final jakarta.servlet.http.HttpServletRequest request,
        final jakarta.servlet.http.HttpServletResponse response)
        throws jakarta.servlet.ServletException, java.io.IOException
    {
        this.doGet(request, response);
    }
}
