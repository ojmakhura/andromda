// license-header java merge-point
// Generated by andromda-jsf cartridge (test\SeleniumCommand.java.vsl) DO NOT EDIT!
#if ($stringUtils.isNotEmpty($testPackage))
package $testPackage;
#end

import java.util.Collection;
import java.util.regex.Pattern;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.arcadian.logOne.util.helper.SeleniumHelper;

public class SeleniumCommand implements WebCommand {

    private WebDriver driver = SeleniumHelper.instance().getDriver();
    private WebDriverWait wait = SeleniumHelper.instance().getWait();
    
    @Override
    public void alertAccept() 
    {
        getAlert().accept();
    }

    @Override
    public void alertDismiss() 
    {
        getAlert().dismiss();
    }

    @Override
    public void clear(String id) 
    {
        getElement(By.id(id)).clear();
    }

    @Override
    public void click(String id) 
    {
        getElement(By.id(id)).click();
    }
    
    @Override
    public void clickByXpath(String xpath) 
    {
        getElement(By.xpath(xpath)).click();
    }

    @Override
    public void clickByXpathAndLink(String xpath, String link) 
    {
        WebElement element= getElement(By.xpath(xpath));
        element.findElement(By.linkText(link)).click();
    }
    
    @Override
    public String getAttributeValue(String id) 
    {
        return getElement(By.id(id)).getAttribute("value");
    }

    @Override
    public String getAttributeClass(String id) 
    {
        return getElement(By.id(id)).getAttribute("class");
    }

    @Override
    public String getElementText(String id) 
    {
        return getElement(By.id(id)).getText();
    }
    
    @Override
    public String[] getElementsByAttributeClass(String className) 
    {
        Collection<WebElement> elements = getElements(By.className(className));
        String[] result = new String[elements.size()];
        int index = 0;
        for(WebElement element : elements) 
        {
            result[index++] = element.getText();
        }
        return result;
    }
    
    @Override
    public boolean isElementDisplayed(String id) 
    {        
        return getElement(By.id(id)).isDisplayed();
    }

    @Override
    public boolean isSelected(String id) 
    {
        return getElement(By.id(id)).isSelected();
    }

    @Override
    public boolean isTextPresent(String regex) 
    {
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(driver.getPageSource());
        boolean result = false;
        if(m.find()) 
        {
            result = true;
        }
        return result;
    }
    
    @Override
    public void moveToElement(String id) 
    {
        WebElement element = getElement(By.id(id));
        if("input".equalsIgnoreCase(element.getTagName())) 
        {
            element.sendKeys("");
        } 
        else 
        {
            new Actions(driver).moveToElement(element).perform();
        }
    }

    @Override
    public void showAllSubMenu(String idRoot, String className, String tagNameFind, String tagNameClick) 
    {
        WebElement root = getElement(By.id(idRoot));
        Collection<WebElement> elements = root.findElements(By.className(className));
        for(WebElement element : elements) 
        {
            WebElement div = element.findElement(By.tagName(tagNameFind));
            if(div != null && !div.isDisplayed()) 
            {
                WebElement h3 = element.findElement(By.tagName(tagNameClick));
                h3.click();
            }
        }
    }
    
    @Override
    public void select(String id, String value) 
    {
        getElement(By.id(id)).click();
        clickByXpath("//div[@id='" + id + "_panel']/div/ul/li[text()='" + value + "']");
    }
    
    @Override
    public void selectPanelValue(String id, String value) 
    {
        WebElement root = getElement(By.id(id));
        Collection<WebElement> elements = root.findElements(By.tagName("li"));
        for(WebElement element : elements) 
        {
            if(element.getText().startsWith(value)) 
            {
                element.click();
                break;
            }
        }
    }

    @Override
    public void sendKeys(String id, String value) 
    {
        getElement(By.id(id)).sendKeys(value);
    }
    
    @Override
    public void sendKeyTab(String id) 
    {
        getElement(By.id(id)).sendKeys(Keys.TAB);
    }
    
    @Override
    public void switchToDefaultContent() 
    {
        driver.switchTo().defaultContent();
    }

    @Override
    public void switchToFrame(String id) 
    {
        WebElement frame = getElement(By.id(id));
        driver.switchTo().frame(frame);
    }

    @Override
    public void waitAjaxLoader(String id) 
    {
        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id(id)));
    }
    
    @Override
    public void waitElementDisplayed(String id) 
    {
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(id)));
    }
    
    @Override
    public void waitElementNotDisplayed(String id) 
    {
        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id(id)));
    }
    
    private Alert getAlert() 
    {
        return driver.switchTo().alert();
    }
    
    private WebElement getElement(By by) 
    {
        return driver.findElement(by);
    }
    
    private Collection<WebElement> getElements(By by) 
        {
        return driver.findElements(by);
    }
}