// license-header java merge-point
// Generated by andromda-jsf cartridge (test\SeleniumFactory.java.vsl) DO NOT EDIT!
#if ($stringUtils.isNotEmpty($testPackage))
package $testPackage;
#end

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3..StringUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerDriverService;

public class SeleniumFactory {

    public WebDriver newInstance(String driver) 
    {
        try 
        {
            SeleniumStrategy strategy = availableDrivers.get(driver.toLowerCase());
            return strategy.create();
        } 
        catch(Exception e) 
        {
            throw new RuntimeException("The WebDriver can't be instanciated", e);
        }
    }
    
    private static Map<String, SeleniumStrategy> availableDrivers;
    static 
    {
        availableDrivers = new HashMap<String, SeleniumStrategy>();
        availableDrivers.put("firefox", SeleniumStrategy.FIREFOX);
        availableDrivers.put("chrome", SeleniumStrategy.CHROME);
        availableDrivers.put("ie", SeleniumStrategy.IE);
    }
    
    private enum SeleniumStrategy {
        FIREFOX 
        {
            @Override
            protected WebDriver create() 
            {
                FirefoxProfile profile = new FirefoxProfile();
                profile.setPreference("browser.safebrowsing.malware.enabled", false);
                return new FirefoxDriver(profile);
            }
        },
        CHROME 
        {
            @Override
            protected WebDriver create() 
            {
                String path = System.getProperty("chromeDriverPath");
                if(StringUtils.isBlank(path)) 
                {
                    throw new RuntimeException("Chrome driver not found");
                }
                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, path);
                return new ChromeDriver();
            }
        }, 
        IE 
        {
            @Override
            protected WebDriver create() 
            {
                String path = System.getProperty("ieDriverPath");
                if(StringUtils.isBlank(path)) 
                {
                    throw new RuntimeException("IE driver not found");
                }
                System.setProperty(InternetExplorerDriverService.IE_DRIVER_EXE_PROPERTY, path);
                return new InternetExplorerDriver();
            }
        };        
        protected abstract WebDriver create();
    }
}
