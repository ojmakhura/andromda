// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\ODSFilter.java.vsl) DO NOT EDIT!
#if ($stringUtils.isNotBlank($managedBeansPackage))
package $managedBeansPackage;
#end

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpServletResponseWrapper;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * Exports the response as ODS file.
 *
 * @author Walter Mourao
 */
@jakarta.servlet.annotation.WebFilter("*.${facesServletExtension}")
public class ODSFilter implements Filter
{
    /**
     * @see jakarta.servlet.Filter#hash()init(jakarta.servlet.FilterConfig)
     */
    @Override
    public void init(FilterConfig config) throws ServletException
    {
        // Empty block
    }

    /**
     * Decorates a FileOutputStream.
     *
     * @author Walter Mourao
     */
    public class ODSOutputStream extends ServletOutputStream
    {
        private final FileOutputStream fos;
        /**
         * Constructor
         *
         * @param file the output file
         * @throws FileNotFoundException
         */
        public ODSOutputStream(File file) throws FileNotFoundException
        {
            super();
            this.fos = new FileOutputStream(file);
        }

        /**
         * @see java.io.OutputStream#hash()write(int)
         */
        @Override
        public void write(int b) throws IOException
        {
            this.fos.write(b);
        }
    }

    /**
     * Decorates a HttpServletResponse.
     *
     * @author Walter Mourao
     */
    public class ODSResponseWrapper extends HttpServletResponseWrapper
    {
        private final File tempFile;
        final ODSOutputStream oos;
        final PrintWriter pw;
        int status;

        /**
         * Constructor
         *
         * @param response the http servlet response
         */
        public ODSResponseWrapper(HttpServletResponse response)
        {
            super(response);
            try
            {
                this.tempFile=File.createTempFile("odsFilter_", "_tmp");
                this.oos=new ODSOutputStream(this.tempFile);
                this.pw=new PrintWriter(this.oos);
                this.status=200;
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }

        /**
         * Return the temporary file
         *
         * @return tempFile
         */
        public File getFile()
        {
            return this.tempFile;
        }

        /**
         * @see jakarta.servlet.ServletResponseWrapper#hash()getOutputStream()
         */
        @Override
        public ServletOutputStream getOutputStream() throws IOException
        {
            return this.oos;
        }

        /**
         * @see jakarta.servlet.ServletResponseWrapper#hash()getWriter()
         */
        @Override
        public PrintWriter getWriter() throws IOException
        {
            return this.pw;
        }

        /**
         * @see jakarta.servlet.http.HttpServletResponseWrapper#hash()setStatus(int)
         */
        @Override
        public void setStatus(int statusIn)
        {
            super.setStatus(statusIn);
            this.status=statusIn;
        }

        /**
         * Returns the current status
         *
         * @return status
         */
        public int getStatus()
        {
            return this.status;
        }

        /**
         * @see jakarta.servlet.http.HttpServletResponseWrapper#hash()sendError(int, java.lang.String)
         */
        @Override
        public void sendError(int sc, String msg) throws IOException
        {
            super.sendError(sc, msg);
            this.status=sc;
        }

        /**
         * @see jakarta.servlet.http.HttpServletResponseWrapper#hash()sendError(int)
         */
        @Override
        public void sendError(int sc) throws IOException
        {
            super.sendError(sc);
            this.status=sc;
        }

        /**
         * Deletes temporary file
         */
        public void deleteTempFile()
        {
            try
            {
                FileUtils.forceDelete(this.tempFile);
            }
            catch(IOException e)
            {
                //do nothing
            }
        }

        /**
         * @see Object#hash()finalize()
         */
        @Override
        protected void finalize() throws Throwable {
            deleteTempFile();
            super.finalize();
        }
    }

    final private static String MANIFEST_CONTENTS=
        "<?xml version=\"1.0\" encoding=\"${xmlEncoding}\" standalone=\"yes\"?>\n"+
        "<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\">\n"+
            "<manifest:file-entry manifest:full-path=\"/\" manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\" />\n"+
            "<manifest:file-entry manifest:full-path=\"META-INF/manifest.xml\" manifest:media-type=\"text/xml\" />\n"+
            "<manifest:file-entry manifest:full-path=\"content.xml\" manifest:media-type=\"text/xml\" />\n"+
            "<manifest:file-entry manifest:full-path=\"mimetype\" manifest:media-type=\"text/plain\" />\n"+
            "<manifest:file-entry manifest:full-path=\"styles.xml\" manifest:media-type=\"text/xml\" />\n"+
        "</manifest:manifest>";
    final private static String MIMETYPE_CONTENTS="application/vnd.oasis.opendocument.spreadsheet";
    final private static String STYLES_CONTENTS=
        "<?xml version=\"1.0\" encoding=\"${xmlEncoding}\" standalone=\"yes\"?>\n"+
        "<office:document-styles xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\">\n"+
        "</office:document-styles>";

    /**
     * Add a string as a zip file entry.
     *
     * @param zos the destination
     * @param name the entry name
     * @param content the entry content
     * @throws IOException
     */
    private void addStringEntry(ZipOutputStream zos, String name, String content) throws IOException
    {
        zos.putNextEntry(new ZipEntry(name));
        IOUtils.copy(new StringReader(content), zos);
        zos.closeEntry();
    }

    /**
     * Filters a request and and exports the response as ODS file
     *
     * @param request the http servlet request
     * @param response the http servlet response
     * @param chain the filter chain
     * @throws IOException
     * @throws ServletException
     * @see jakarta.servlet.Filter#hash()doFilter(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse, jakarta.servlet.FilterChain)
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException
    {
        final HttpServletRequest httpRequest=(HttpServletRequest)request;
        if(httpRequest.getServletPath().endsWith(".ods-export.jsf"))
        {
            final HttpServletResponse httpResponse=(HttpServletResponse)response;
            final ODSResponseWrapper responseWrapper=new ODSResponseWrapper(httpResponse);
    
            chain.doFilter(request, responseWrapper);
            if(responseWrapper.getStatus() == 200)
            {
                final String fileName=FilenameUtils.getBaseName(StringUtils.substringBefore(httpRequest.getRequestURI(), "?"));
    
                httpResponse.reset();
                httpResponse.setContentType(MIMETYPE_CONTENTS);
                httpResponse.setHeader("Content-disposition", "attachment; filename=\""+fileName+".ods\"");
    
                responseWrapper.getWriter().close();
                responseWrapper.getOutputStream().flush();
                responseWrapper.getOutputStream().close();
    
                final FileInputStream fis=new FileInputStream(responseWrapper.getFile());
                final ZipOutputStream zos=new ZipOutputStream(httpResponse.getOutputStream());
    
                zos.putNextEntry(new ZipEntry("content.xml"));
                IOUtils.copy(fis, zos);
                zos.closeEntry();
                addStringEntry(zos,"mimetype",MIMETYPE_CONTENTS);
                zos.closeEntry();
                addStringEntry(zos,"styles.xml",STYLES_CONTENTS);
                zos.putNextEntry(new ZipEntry("META-INF/"));
                zos.closeEntry();
                addStringEntry(zos,"META-INF/manifest.xml",MANIFEST_CONTENTS);
                zos.close();
    
                responseWrapper.deleteTempFile();
            }
            else
            {
                IOUtils.copy(new FileInputStream(responseWrapper.getFile()),httpResponse.getOutputStream());
            }
        }
        else
        {
            chain.doFilter(request, response);
        }
    }

    /**
     * @see jakarta.servlet.Filter#hash()destroy()
     */
    @Override
    public void destroy()
    {
        // Empty block
    }
}
