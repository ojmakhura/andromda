// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\AutocompleteHelper.java.vsl) DO NOT EDIT!
package $managedBeansPackage;

/**
 * Helper for use in autocomplete
 *
 * @author Walter Mourao
 */
public class AutocompleteHelper {

    /**
     * Set autocomplete value from dialog
     *
     * @param clientId  the client identifier
     * @param converterId the converter identifier
     * @param multi indicates if it is an autocompleteMulti
     * @return null
     */
    public String setValueFromDialog(String clientId, String converterId, boolean multi){
        final Object value=ControllerBase.getUseCaseReturnValues().get("savedId");
        if(value != null){
            JsfUtils.addPPRScript("document.getElementById('"+clientId+":hiddenValue').value='"+value+"';");
            if(StringUtils.isNotBlank(converterId)){
                String displayValue=JsfUtils.valueFromConverter(value, converterId);
                JsfUtils.addPPRScript("document.getElementById('"+clientId+":subform:edit').value='"+displayValue+"';");
            }
            if(multi){
                JsfUtils.addPPRScript(clientId.replace(':', '_')+"_addItem();");
            }
            ControllerBase.getUseCaseReturnValues().remove("savedId");
        }
        return null;
    }

    /**
     * Create a collection of SelectItems from an array of itens
     *
     * @param items the array of itens
     * @param converterId the converter identifier
     * @return collection of SelectItems
     */
    public java.util.Collection<javax.faces.model.SelectItem> itemsToSelectItems(Object[] items, String converterId){
        if(org.apache.commons.lang3.ArrayUtils.isEmpty(items)){
            return null;
        } 
        else 
        {
            final java.util.Collection<javax.faces.model.SelectItem> result=new java.util.ArrayList<javax.faces.model.SelectItem>(items.length);
            if(org.apache.commons.lang3.StringUtils.isBlank(converterId)){
                for(final Object obj: items){
                    result.add(new SelectItem(obj,obj.toString()));
                }
            }
            else
            {
                for(final Object obj: items){
                    result.add(new SelectItem(obj,JsfUtils.valueFromConverter(obj, converterId)));
                }
            }
            return result;
        }
    }
    
    /**
     * Create a collection of SelectItems from a collection of itens
     *
     * @param items the collection of itens
     * @param converterId the converter identification
     * @return collection of SelectItems
     */    
    public java.util.Collection<javax.faces.model.SelectItem> itemsToSelectItems(java.util.Collection<?> items, String converterId){
        return items==null?null:itemsToSelectItems(items.toArray(),converterId);
    }

    /**
     * Calls a complete method for a given query
     * 
     * @param completeMethod the complete method to be evoked
     * @param queryParamName the parameter name that contains the query
     * @param searchField the field to be searched
     * @param filter additional filter to be used in the form attribute1=value1; attribute2=value2
     * @return null
     */
    public String callComplete(javax.el.MethodExpression completeMethod, String queryParamName, String searchField, String filter){
        final javax.faces.context.FacesContext facesContext=javax.faces.context.FacesContext.getCurrentInstance();
        final java.util.Map<String,String> parameters = facesContext.getExternalContext().getRequestParameterMap();
        final Object fieldValue = parameters.get(queryParamName);
        final java.util.Map<String,String> searchFilter=new java.util.HashMap<String, String>();
        if(fieldValue != null)
        {
            searchFilter.put(searchField, fieldValue.toString());
        }
        if(filter != null)
        {
            final String[] filters=filter.split(";");
            for(String pair:filters)
            {
                final String[] attrValue=pair.split("=");
                if(attrValue.length > 1)
                {
                    searchFilter.put(attrValue[0].trim(),attrValue[1].trim());
                }
            }
        }

        ((javax.servlet.http.HttpServletRequest)facesContext.getExternalContext().getRequest()).setAttribute("autocompleteResult", completeMethod.invoke(FacesContext.getCurrentInstance().getELContext(), new Object[]{searchFilter}));
        return null;
    }
}
