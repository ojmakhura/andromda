#set ($generatedFile = "${controller.fullPath}Impl.java")
##
##  CONSTANTS
##
#set ($quote = '"')
#set ($controllerPackageName = $controller.packageName)
#set ($controllerClassName = $controller.name)
#set ($useCase = $controller.useCase)
##
##  START TEMPLATE
##
// Generated by controllers/ControllerImpl.java.vsl in cartridge andromda-bpm4struts
// license-header java merge-point
#if ($stringUtils.isNotBlank($controllerPackageName))
package $controllerPackageName;

#end
import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @see ${controllerPackageName}.${controllerClassName}
 */
public class ${controllerClassName}Impl extends ${controllerClassName}
{
#foreach ($operation in $controller.operations)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.getterSetterReturnTypeName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
     * @see ${controllerPackageName}.${controllerClassName}${esc.hash}${operation.name}(org.apache.struts.action.ActionMapping, $operation.interfaceType, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    $visibility final $returnType ${operation.name}(ActionMapping mapping, $operation.interfaceType form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#set($allowDummyData = ($dummyData == 'true'))
#if ($allowDummyData)
#set ($formFields = $operation.formFields)
#if ($formFields.empty)
        // nothing to be done for this operation, there are no properties that can be set
#else
#foreach ($field in $formFields)
#set ($tableActionFound = false)
#foreach ($action in $operation.deferringActions)
#if($action.tableAction)#foreach($parameter in $action.actionParameters)#if($parameter.name==$field.name)#set($tableActionFound=true)#end#end#end
#end
#if ($field.table)
        // populating the table with a dummy list
        form.${field.setterName}(${field.name}DummyList);
#elseif ($field.date)
        // setting a date
        form.${field.setterName}AsDate($field.resetValue);
#elseif ($tableActionFound)
        // we don't set row selection parameters such as ${field.name}RowSelection
#else
        // this property receives a default value, just to have the application running on dummy data
        form.${field.setterName}($field.resetValue);
#end
#if ($field.selectable)
#set ($valueListMethod = $stringUtils.capitalize($field.valueListName))
#set ($labelListMethod = $stringUtils.capitalize($field.labelListName))
        form.set${valueListMethod}($field.valueListResetValue);
        form.set${labelListMethod}(form.get${valueListMethod}());
#end
#end
#end
#end
#if ($returnType != "void")
#if ($returnType=="boolean")
        return false;
#elseif ($operation.returnType.primitive)
        return 0;
#else
        return null;
#end
#end
    }
#set ($returnType = false)

#end
#if ($allowDummyData)
## here we populate tabular data with dummy values
#foreach ($field in $useCase.pageVariables)
#if ($field.table)
    /**
     * This dummy variable is used to populate the "$field.name" table.
     * You may delete it when you add you own code in this controller.
     */
#if ($field.type.collectionType)
    private static final java.util.Collection ${field.name}DummyList =
        java.util.Arrays.asList( new Object[] {
#set ($count = 0)
#foreach ($itemSeparator in [",", ",", ",", ",", ""])
#set ($count = $count + 1)
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
#set ($constructor = "$constructor$paramSeparator$quote${columnName}-$count$quote")
#set ($paramSeparator = ', ')
#end
            new $stringUtils.capitalize($field.name)Dummy($constructor)$itemSeparator
#end
        } );

    /**
     * This inner class is used in the dummy implementation in order to get the web application
     * running without any manual programming.
     * You may delete this class when you add you own code in this controller.
     */
    public static final class $stringUtils.capitalize($field.name)Dummy implements java.io.Serializable
    {
        private static final long serialVersionUID = 34L;

        #set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
        private String $columnName = null;
#set ($constructor = "$constructor${paramSeparator}String ${columnName}")
#set ($paramSeparator = ', ')
#end

        public $stringUtils.capitalize($field.name)Dummy($constructor)
        {
#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
            this.$columnName = $columnName;
#end
        }

#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
        public void set$stringUtils.capitalize($columnName)(String $columnName)
        {
            this.$columnName = $columnName;
        }

        public String get$stringUtils.capitalize($columnName)()
        {
            return this.$columnName;
        }

#end
    }
#else
    private static final ${field.type.fullyQualifiedName}[] ${field.name}DummyList =
        new ${field.type.fullyQualifiedName}[]
        {
#set ($dummyItemType = $field.type.nonArray.fullyQualifiedName)
#foreach ($itemSeparator in [",", ",", ",", ",", ""])
#set ($count = $velocityCount)
            new ${dummyItemType}(## no newline
#set ($comma = "")
#foreach ($attribute in $field.type.nonArray.attributes)
#if ($attribute.type.booleanType)
#set ($dummyValue = false)
#elseif ($attribute.type.primitive)
#set ($dummyValue = $velocityCount)
#elseif ($attribute.type.stringType)
#set ($dummyValue = "${quote}${attribute.name}-${count}${quote}")
#elseif ($attribute.type.dateType)
#set ($dummyValue = "new java.util.Date()")
#else
#set ($dummyValue = "null")
#end
${comma}${dummyValue}#set ($comma = ", ")
#end
)$itemSeparator
#end
        };
#end
#end
#end
#end
}