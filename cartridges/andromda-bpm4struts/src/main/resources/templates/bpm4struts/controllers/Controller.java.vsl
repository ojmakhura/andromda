#set ($generatedFile = "${controller.fullPath}.java")
#set ($operations = $controller.operations)
##
##  CONSTANTS
##
#set ($sessionObjects = $controller.sessionObjects)
##
##  START TEMPLATE
##
// Generated by controllers/Controller.java.vsl in cartridge andromda-bpm4struts
// license-header java merge-point
#if ($stringUtils.isNotBlank($controller.packageName))
package $controller.packageName;

#end
/**
$controller.getDocumentation(" * ")
 */
public abstract class ${controller.name} implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${controller.serialVersionUID}L;

#foreach ($operation in $operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.getterSetterReturnTypeName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
$operation.getDocumentation("     * ")
#if ($operation.callingBackEnd)
     *
     * This operation delegates to
     * <code>${operation.backEndServiceOperation.owner.fullyQualifiedName}.${operation.backEndServiceOperation.name}</code>
#end
     */
#if ($operation.callingBackEnd)
    $visibility $returnType ${operation.name}(org.apache.struts.action.ActionMapping mapping, $operation.interfaceType form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws Exception
    {
        ${operation.backEndServiceOperation.owner.accessorImplementation}.${operation.backEndServiceOperation.name}(
#set ($comma = "")
#foreach ($argument in $operation.backEndServiceOperation.arguments)
            ${comma}form.${argument.getterName}()
#set ($comma = ", ")
#end
        );
    }
#else
    $visibility abstract $returnType ${operation.name}(org.apache.struts.action.ActionMapping mapping, $operation.interfaceType form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws Exception;
#end

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $stringUtils.capitalize($sessionObject.name))
    /**
     * Returns the current $sessionObject.name from the session found in the argument request.
     * <p>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p>
     * If there is no session, it will be created; if the session would not contain a session-object
     * the object will be instantiated and subsequently stored in the session.
     */
    protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(javax.servlet.http.HttpServletRequest request)
    {
        $sessionObject.fullyQualifiedName object = null;
        javax.servlet.http.HttpSession session = request.getSession(true);

        Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
        if (attribute instanceof $sessionObject.fullyQualifiedName)
        {
            object = ($sessionObject.fullyQualifiedName)attribute;
        }
        else if (attribute == null)
        {
            object = new $sessionObject.fullyQualifiedName ();
            set${accessorSuffix}(request, object);
        }

        return object;
    }

    /**
     * Set the argument $sessionObject.name object in the session corresponding with the argument request.
     * In case the session would not exist it will be created.
     */
    protected final void set${accessorSuffix}(javax.servlet.http.HttpServletRequest request, $sessionObject.fullyQualifiedName object)
    {
        set${accessorSuffix}(request, object, true);
    }

    /**
     * Set the argument $sessionObject.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
    protected final void set${accessorSuffix}(javax.servlet.http.HttpServletRequest request, $sessionObject.fullyQualifiedName object, boolean createSession)
    {
        javax.servlet.http.HttpSession session = request.getSession(createSession);
        if (session != null)
        {
            session.setAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY, object);
        }
    }

    /**
     * Removes the argument $sessionObject.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $sessionObject.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
    protected final void remove${accessorSuffix}(javax.servlet.http.HttpServletRequest request)
    {
        javax.servlet.http.HttpSession session = request.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            if (attribute instanceof $sessionObject.fullyQualifiedName)
            {
                session.removeAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            }
        }
    }

#end
    /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @param arguments any arguments used within the message
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, String message, String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitly store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$warningMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${esc.hash}saveWarningMessage(javax.servlet.http.HttpServletRequest, String, String[])
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, String message)
    {
        this.saveWarningMessage(request, message, null);
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, String message, String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitly store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$successMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${esc.hash}saveSuccessMessage(javax.servlet.http.HttpServletRequest, String, String[])
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, String message)
    {
        this.saveSuccessMessage(request, message, null);
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${esc.hash}saveSuccessMessage(javax.servlet.http.HttpServletRequest, String, String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, String message, String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitly store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$errorMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${esc.hash}saveSuccessMessage(javax.servlet.http.HttpServletRequest, String, String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, String message)
    {
        this.saveErrorMessage(request, message, null);
    }

#foreach ($serviceRef in $controller.serviceReferences)
#if ($stringUtils.isNotBlank($serviceRef.targetElement.accessorImplementation))
    /**
     * Returns a reference to the $serviceRef.targetElement.name back-end service.
     */
    @org.springframework.beans.factory.annotation.Autowired
    protected $serviceRef.targetElement.fullyQualifiedName ${serviceRef.name};

#end
#end
}