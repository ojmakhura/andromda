<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AndroMDA - EJB3 - HowTo Caching and Clustering</title>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
    </properties>
    <body>
        <section name="Caching and Clustering">
            <p>
                This howto will guide you to use the EJB3 cartridge caching and clustering facilities, 
                based on the JBoss distributed/clustered caching environment.
            </p>
            <p>
                <i>
                    JBoss Cache supports a high performance, in-memory, transactional, and replicated cache for 
                    the cluster.
                </i>
            </p>
            <p>
                JBoss Cache has 2 types of caching
            </p>
            <ul>
                <li>
                    <b>Entity Cache</b> - caching database objects like entity POJOs and query results.
                    <ul>
                        <li>POJOs are cached in-memory.</li>
                        <li>Reduces round trips to the database server.</li>
                        <li>
                            <p>
                                Access by one node in the cluster makes the POJO available to all nodes via the 
                                distributed entity cache.
                            </p>
                        </li>
                    </ul>
                </li>
                <li>
                    <b>State Cache</b> - stores application state information.
                    <ul>
                        <li>HTTP session state can be cached and accessed across all nodes.</li>
                        <li>Caching includes stateful session beans.</li>
                        <li>Can cache <i>transient</i> properties across nodes.</li>
                    </ul>
                </li>
            </ul>
            <p>
                The following example was taken from the manageable entities howto with the caching options
                enabled.  The manageable components are not relevant here and will not be discussed.
            </p>
            <p>
                <img src="images/org/andromda/test/17/a/uml.gif" alt="images/org/andromda/test/17/a/uml.gif"/>
            </p>
            <ul>
                <li class="gen">Auto-generated source that does not need manual editing</li>
                <li class="impl">Auto-generated source that should be edited manually</li>
                <li class="changed">File that is affected by the modifications applied in this section</li>
            </ul>
            <ul>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></li>
                <li class="impl"><a class="changed" href="howto/org/andromda/test/howto17/a/Car.java"><code>Car.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/CarType.java"><code>CarType.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/CarDao.java"><code>CarDao.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto17/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/CarDaoException.java"><code>CarDaoException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/Person.java"><code>Person.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/PersonDao.java"><code>PersonDao.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto17/a/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/PersonDaoException.java"><code>PersonDaoException.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto17/a/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/ServiceDelegateBase.java"><code>ServiceDelegateBase.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/RentalException.java"><code>RentalException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/ejb-jar.xml"><code>ejb-jar.xml</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/jboss.xml"><code>jboss.xml</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto17/a/persistence.xml"><code>persistence.xml</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/ejb3-entity-cache-service.xml"><code>ejb3-entity-cache-service.xml</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto17/a/andromda.xml"><code>andromda.xml</code></a></li>
            </ul>
            <p class="highlight">
                Remember: You must set the 
                <a href="namespace.html#persistenceProviderExtensions">persistenceProviderExtensions</a>
                namespace property such that Hibernate cache specific annotations are generated.
            </p>
            <p>
                The following sections will show you how to enable and configure caching and clustering.
            </p>
            <a name="Cache_Config"/>
            <subsection name="Cache Configuration">
                <p>
                    The EJB3 cartridge allows you to configure caching through namespace properties
                    via your application <code>andromda.xml</code> descriptor.  Make sure the
                    <code>hibernateCacheProvider</code> and <code>hibernateTreecacheMbeanObject</code> properties
                    are defined to use the internal <i>JBoss Cache</i> with JBoss.
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                <property name="hibernateCacheProvider">org.jboss.ejb3.entity.TreeCacheProviderHook</property>
                <property name="hibernateTreecacheMbeanObject">jboss.cache:service=EJB3EntityTreeCache</property>
                <!-- uncomment to enable default entity cache settings -->
                <property name="hibernateEntityCache">TRANSACTIONAL</property>
                <!-- uncomment to enable default association caching configuration -->
                <property name="hibernateAssociationCache">TRANSACTIONAL</property>
                ...
            </properties>
        </namespace>
]]></source>
                    The <code>hibernateEntityCache</code> and <code>hibernateAssociationCache</code> properties
                    define the default cache settings if you choose to enable entity and association caching.
                </p>
                <p>
                    Your generated <code>persistence.xml</code> descriptor will look something like:
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: persistence.xml.vsl in andromda-ejb3-cartridge.
  -->
<persistence>
    <persistence-unit name="howtomodelcaching">
        <jta-data-source>java:/jdbc/howtomodelcaching</jta-data-source>
        <properties>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLInnoDBDialect"/>
            <property name="hibernate.cache.provider_class" value="org.jboss.ejb3.entity.TreeCacheProviderHook"/>
            <property name="hibernate.treecache.mbean.object_name" value="jboss.cache:service=EJB3EntityTreeCache"/>
        </properties>
    </persistence-unit>
</persistence>
]]></source>
                </p>
            </subsection>
            <a name="Entity_Cache"/>
            <subsection name="Entity Cache">
                <p>
                    In situations where data, persisted by entity beans are rarely changed, you can employ the
                    entity cache option to avoid unnecessary round-trips to the database.
                </p>
                <p>
                    To enable entity caching, you enable the <code>hibernateEnableCache</code> ejb3 namespace
                    property in your andromda.xml like so:
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                <property name="hibernateEnableCache">true</property>
                <property name="useDefaultCacheRegion">false</property>
                ...
            </properties>
        </namespace>
]]></source>
                    This property must be enabled before all other caching properties are fine-tuned.
                </p>
                <p>
                    The <code>useDefaultCacheRegion</code> property allows you to specify whether you want all
                    entities to use the default cache region specified in <code>ejb3-entity-cache-service.xml</code>
                    and the cache region set on corresponding finder queries.
                    By default, this is set to <code>false</code>.  If you set it to <code>true</code>, 
                    the user specified cache regions for entities will not be defined.
                </p>
                <p>
                    If you enable the default entity caching in your andromda.xml descriptor (by enabling
                    <code>hibernateEntityCache</code>), then caching will be enabled for all entities.
                    To override this default value, you can model the
                    <code>andromda_persistence_entity_cache</code> tagged value on individual entities.
                </p>
                <p>
                    Once you have enabled entity caching, you will notice the
                    <code>@org.hibernate.annotations.Cache</code> annotation at the class level in all entities.
                </p>
                <p>
                    The corresponding entity cache region is defined in the <code>ejb3-entity-cache-service.xml</code>
                    configuration service file for the <code>Car</code> and <code>Person</code> entities:
<source><![CDATA[
        ....
        <!-- The Car entity cache -->
        <region name="/org/andromda/howto2/rental/Car">
          <attribute name="maxNodes">10000</attribute>
          <attribute name="timeToLiveSeconds">5000</attribute>
        </region>

        <!-- The Person entity cache -->
        <region name="/org/andromda/howto2/rental/Person">
          <attribute name="maxNodes">10000</attribute>
          <attribute name="timeToLiveSeconds">5000</attribute>
        </region>
        ....
]]></source>
                </p>
                <p>
                    You must deploy the <code>ejb3-entity-cache-service.xml</code> to your JBoss deploy folder
                    as you do with your ear package bundle.  Remember, if you have other cached enabled applications,
                    you must merge the changes to the <code>ejb3-entity-cache-service.xml</code> manually, otherwise
                    you will override previous configurations.
                </p>
            </subsection>
            <a name="Association_Cache"/>
            <subsection name="Association Cache">
                <p>
                    To enable entity association relationship caching, you enable the 
                    <code>hibernateEnableAssociationsCache</code>  ejb3 namespace property in your 
                    <code>andromda.xml</code> like so:
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                <property name="hibernateEnableCache">true</property>
                <property name="hibernateEnableAssociationsCache">true</property>
                ...
            </properties>
        </namespace>
]]></source>
                    You must have <code>hibernateEnableCache</code> enabled.
                </p>
                <p>
                    If you enable the default association cache strategy in your <code>andromda.xml</code> descriptor, 
                    (by enabling <code>hibernateAssociationCache</code>), then all collection association caching
                    will be enabled by default.  To override this default value, you can model the
                    <code>andromda_persistence_association_cache</code> tagged value on individual target association
                    ends.
                </p>
                <p>
                    Once you have enabled entity association caching, you will notice the
                    <code>@org.hibernate.annotations.Cache</code> annotation on One-To-Many and Many-To-Many
                    relationships.
                </p>
            </subsection>
            <a name="Query_Cache"/>
            <subsection name="Query Cache">
                <p>
                    To enable entity query caching for all queries, you enable the <code>hibernateUseQueryCache</code>
                    ejb3 namespace property in your <code>andromda.xml</code> like so:
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                <property name="hibernateEnableCache">true</property>
                <property name="hibernateUseQueryCache">true</property>
                <property name="useDefaultCacheRegion">false</property>
                ...
            </properties>
        </namespace>
]]></source>
                    You must have <code>hibernateEnableCache</code> enabled.  This will enable the query cache
                    for all queries, including your generic query, the <code>findAll</code> query.
                </p>
                <p>
                    In many circumstance, you shouldn't enable query cache for all queries (using the 
                    <code>hibernateUseQueryCache</code> property) but enable caching
                    for required queries only.  You can enable caching for individual finder method using 
                    the <code>andromda_ejb_query_useCache</code> tagged value which is modeled on the
                    finder method.
                </p>
                <p>
                    The <code>useDefaultCacheRegion</code> property allows you to specify whether you want all
                    queries to use the default cache region specified in <code>ejb3-entity-cache-service.xml</code>.
                    By default, this is set to <code>false</code>.  If you set it to <code>true</code>, 
                    the user specified cache regions will not be defined and the hint on queries to 
                    set the cache region will not be assigned.
                </p>
                <p>
                    The cartridge will look for at least one query which is marked for caching.  If it finds one
                    such query, the <code>persistence.xml</code> descriptor will include the
                    <code>hibernate.cache.use_query_cache</code> like so:
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: persistence.xml.vsl in andromda-ejb3-cartridge.
  -->
<persistence>
    <persistence-unit name="howtomodel2">
        <jta-data-source>java:/jdbc/howtomodel2</jta-data-source>
        <properties>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLInnoDBDialect"/>
            <property name="hibernate.cache.provider_class" value="org.jboss.ejb3.entity.TreeCacheProviderHook"/>
            <property name="hibernate.treecache.mbean.object_name" value="jboss.cache:service=EJB3EntityTreeCache"/>
            <property name="hibernate.cache.use_query_cache">true</property>
        </properties>
    </persistence-unit>
]]></source>
                </p>
                <p>
                    In the above example, the <code>Car</code> entity has the <code>findByType</code> finder marked
                    as cacheable.  When generating the<code>findByType</code> DAO method in
                    <code>CarDaoBase.java</code>,
                    the cartridge will set the <code>org.hibernate.cacheRegion</code> hint automatically like so:
<source><![CDATA[
public java.util.List findByType(final int transform, final org.andromda.howto2.rental.CarType type)
    throws org.andromda.howto2.rental.CarDaoException
{
    try
    {
        jakarta.persistence.Query queryObject = emanager.createNamedQuery("Car.findByType");
        queryObject.setParameter("type", type.name());
        queryObject.setHint("org.hibernate.cacheRegion", "/org/andromda/howto2/rental/Car_findByType");
        java.util.List results = queryObject.getResultList();
        transformEntities(transform, results);
        return results;
    }
    catch (Exception ex)
    {
        throw new org.andromda.howto2.rental.CarDaoException(ex);
    }
}
]]></source>
                </p>
                <p>
                    The corresponding cache region is defined in the <code>ejb3-entity-cache-service.xml</code>
                    configuration service file:
<source><![CDATA[
        ....
        <!-- The Car entity cache -->
        <region name="/org/andromda/howto2/rental/Car">
          <attribute name="maxNodes">10000</attribute>
          <attribute name="timeToLiveSeconds">5000</attribute>
        </region>
        ....
]]></source>
                </p>
                <p>
                    You must deploy the <code>ejb3-entity-cache-service.xml</code> to your JBoss deploy folder
                    as you do with your ear package bundle.  Remember, if you have other cached enabled applications,
                    you must merge the changes to the <code>ejb3-entity-cache-service.xml</code> manually, otherwise
                    you will override previous configurations.
                </p>
            </subsection>
            <a name="Clustering"/>
            <subsection name="Clustering Session Beans">
                <p>
                    Enabling session bean clustering is achieved by setting the <code>enableClustering</code>
                    ejb3 namespace property to true.
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                property name="enableClustering">true</property>
                ...
            </properties>
        </namespace>
]]></source>
                    This will automatically add the <code>@org.jboss.annotation.ejb.Clustered</code> JBoss
                    annotation to all session beans which will enable load-balancing and failover of all requests
                    (if you have configured clustering on the container).
                    The default load balance policy <code>org.jboss.ha.framework.interfaces.RandomRobin</code>
                    is used.
                </p>
                <p>
                    There is nothing more you need to do for stateless session beans.  For stateful session beans,
                    you must make sure that the <i>JBoss Cache</i> session state replication service is deployed.
                    Simply make sure that <code>ejb3-clustered-sfsbcache-service.xml</code> exists in your
                    JBoss deploy directory.
                </p>
            </subsection>
            <a name="Further_Reading"/>
            <subsection name="Further Reading">
                <p>
                    Visit the following links to find out more information
                </p>
                <ul>
                    <li>http://clusterstore.demo.jboss.com/</li>
                    <li>http://docs.jboss.org/ejb3/app-server/tutorial/clusteredentity/clusteredentity.html</li>
                </ul>
            </subsection>
        </section>
        <section name="Next">
            <p>
                To expose service operations and session beans as webservices click <a href="howto18.html">here</a>.
            </p>
        </section>
    </body>
</document>
