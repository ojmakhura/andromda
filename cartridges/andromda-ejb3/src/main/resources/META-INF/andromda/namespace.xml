<?xml version="1.0" encoding="ISO-8859-1" ?>

<namespace name="ejb3">
    <components>
        <component name="cartridge">
            <path>META-INF/andromda/cartridge.xml</path>
        </component>
        <component name="metafacades">
            <path>META-INF/andromda/metafacades.xml</path>
        </component>
        <component name="profile">
            <path>META-INF/andromda/profile.xml</path>
        </component>
    </components>
    <properties>
        <!-- namespace-propertyGroup merge-point -->
        <propertyGroup name="Outlet Properties">
            <documentation>
                Defines the locations to which output is generated.
            </documentation>
            <property name="services">
                <documentation>
                    The location to which all service classes (including the service locator(s))
                    will be generated.
                </documentation>
            </property>
            <property name="entity-beans">
                <documentation>
                    The directory to which Entity POJOs are generated.
                </documentation>
            </property>
            <property name="entity-impls">
                <documentation>
                    The location to which Entity POJO implementation
                    files are generated.
                </documentation>
            </property>
            <property name="entity-config">
                <documentation>
                   The location where the persistence XML descriptor
                   is generated.
                </documentation>
            </property>
            <property name="session-beans">
                <documentation>
                    The directory to which Session Bean files are
                    generated.
                </documentation>
            </property>
            <property name="session-impls">
                <documentation>
                    The directory to which Session Bean implementation
                    files are generated.
                </documentation>
            </property>
            <property name="session-config">
                <documentation>
                    The location where the ejb-jar.xml XML descriptor
                    is generated.
                </documentation>
            </property>
            <property name="daos">
                <documentation>
                    The location to which EJB3 DAOs, and any support classes
                    are generated.
                    <p>
                        Please <strong>NOTE</strong>
                        that the dao implementation classes will also be generated to this location when
                        <strong>no operations</strong> are present on the entity with <em>classifier scope</em>.
                    </p>
                </documentation>
            </property>
            <property name="dao-impls">
                <documentation>
                    The location to which EJB3 DAO implementation
                    classes will be generated (if there are any classifier scoped business
                    operations modeled on any entity).
                    <p>
                        Please <strong>NOTE</strong>
                        that the dao implementation classes will be generated to the <em>daos</em> outlet when
                        <strong>no operations</strong> are present on the entity with <em>classifier scope</em>.
                    </p>
                </documentation>
            </property>
            <property name="application-config">
                <documentation>
                    The location where the application specific XML
                    descriptors are generated.  i.e the application
                    login-config.xml descriptor.
                </documentation>
            </property>
            <property name="application-metainf">
                <documentation>
                    The location where the application specific XML
                    descriptors that are packaged in the ear file are
                    generated.
                </documentation>
            </property>
            <property name="message-driven-beans">
                <documentation>
                    The directory to which Message Driven Bean files
                    are generated.
                </documentation>
            </property>
            <property name="message-driven-impls">
                <documentation>
                    The directory to which Message Driven Bean
                    implementation files are generated.
                </documentation>
            </property>
            <property name="commons">
                <documentation>
                    The directory to which common classes
                    for session beans, entity POJOs or MDB
                    are generated
                </documentation>
            </property>
            <property name="user-types">
                <documentation>
                    The location to which user-types such as enumeration
                    are generated.
                </documentation>
            </property>
            <property name="test-config">
                <documentation>
                    The location where manual session bean and entity test resources
                    such as persistence.xml and log4j.xml are generated, as well as
                    the JBoss Embedded/Microcontainer configuration files.  These will not be regenerated
                    and may require user intervention.
                </documentation>
            </property>
            <property name="tests">
                <documentation>
                    The location where auto generated session bean test classes
                    are generated.  These are typically the helper classes
                    which are re-generated.
                </documentation>
            </property>
            <property name="test-impls">
                <documentation>
                    The location where manual session bean and entity test classes
                    are generated.  These will not be regenerated and require
                    user intervention.
                </documentation>
            </property>
            <property name="java-refs">
                <documentation>
                    The location containing java Impl classes that would have been
                    generated but are not overwritten. Use these to compare and merge with the
                    existing Impl classes when reconciling model changes. These will be regenerated
                    every time.
                </documentation>
            </property>
            <property name="test-refs">
                <documentation>
                    The location containing test classes that would have been
                    generated but are not overwritten. Use these to compare and merge with the
                    existing Impl classes when reconciling model changes. These will be regenerated
                    every time.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="JDBC">
            <property name="entityManagerName" required="false">
                <documentation>
                    The name assigned to the entity manager.  If no name
                    is specified, the name of the containing persistence
                    archive without the .par extension is used.
                </documentation>
            </property>
            <property name="entityManagerJTADataSource">
                <default>java:/DefaultDS</default>
                <documentation>
                    Specifies the global JNDI name of the JTA data source.
                </documentation>
            </property>
            <property name="hibernateHbm2DDLAuto" required="false">
                <default>update</default>
                <documentation>
                    Automatically export schema DDL to the database when deployed.
                    With create-drop, the database schema will be dropped when
                    the entity is undeployed. Permitted values are:
                    <ul>
                        <li>update</li>
                        <li>create</li>
                        <li>create-drop</li>
                        <li>none</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateDialect" required="false">
                <default>org.hibernate.dialect.H2Dialect</default>
                <documentation>
                    The SQL dialect of the database.
                    <ul>
                        <li>org.hibernate.dialect.Cache71Dialect</li>
                        <li>org.hibernate.dialect.DataDirectOracle9Dialect</li>
                        <li>org.hibernate.dialect.DB2390Dialect</li>
                        <li>org.hibernate.dialect.DB2400Dialect</li>
                        <li>org.hibernate.dialect.DB2Dialect</li>
                        <li>org.hibernate.dialect.DerbyDialect</li>
                        <li>org.hibernate.dialect.FirebirdDialect</li>
                        <li>org.hibernate.dialect.FrontbaseDialect</li>
                        <li>org.hibernate.dialect.H2Dialect</li>
                        <li>org.hibernate.dialect.HSQLDialect</li>
                        <li>org.hibernate.dialect.InformixDialect</li>
                        <li>org.hibernate.dialect.IngresDialect</li>
                        <li>org.hibernate.dialect.IngresDialect9</li>
                        <li>org.hibernate.dialect.IngresDialect10</li>
                        <li>org.hibernate.dialect.InterbaseDialect</li>
                        <li>org.hibernate.dialect.JDataStoreDialect</li>
                        <li>org.hibernate.dialect.MckoiDialect</li>
                        <li>org.hibernate.dialect.MimerSQLDialect</li>
                        <li>org.hibernate.dialect.MySQL5Dialect</li>
                        <li>org.hibernate.dialect.MySQL5InnoDBDialect</li>
                        <li>org.hibernate.dialect.MySQLDialect</li>
                        <li>org.hibernate.dialect.MySQLInnoDBDialect</li>
                        <li>org.hibernate.dialect.MySQLMyISAMDialect</li>
                        <li>org.hibernate.dialect.OracleDialect</li>
                        <li>org.hibernate.dialect.Oracle8iDialect</li>
                        <li>org.hibernate.dialect.Oracle9Dialect</li>
                        <li>org.hibernate.dialect.Oracle9iDialect</li>
                        <li>org.hibernate.dialect.Oracle10gDialect</li>
                        <li>org.hibernate.dialect.PointbaseDialect</li>
                        <li>org.hibernate.dialect.PostgresPlusDialect</li>
                        <li>org.hibernate.dialect.PostgreSQLDialect</li>
                        <li>org.hibernate.dialect.ProgressDialect</li>
                        <li>org.hibernate.dialect.RDMSOS2200Dialect</li>
                        <li>org.hibernate.dialect.SAPDBDialect</li>
                        <li>org.hibernate.dialect.SQLServer2008Dialect</li>
                        <li>org.hibernate.dialect.SQLServerDialect</li>
                        <li>org.hibernate.dialect.SybaseDialect</li>
                        <li>org.hibernate.dialect.Sybase11Dialect</li>
                        <li>org.hibernate.dialect.SybaseAnywhereDialect</li>
                        <li>org.hibernate.dialect.SybaseASE15Dialect</li>
                        <li>org.hibernate.dialect.TeradataDialect</li>
                        <li>org.hibernate.dialect.TimesTenDialect</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateShowSql" required="false">
                <documentation>
                    Whether or not to log SQL statements.
                </documentation>
            </property>
            <property name="hibernateMaxFetchDepth" required="false">
                <documentation>
                    Sets a maximum "depth" for the outer join fetch tree.
                    Recommended values between 0 and 3
                </documentation>
            </property>
            <property name="hibernateJdbcFetchSize" required="false">
                <documentation>
                    A non-zero value determines the JDBC fetch size
                </documentation>
            </property>
            <property name="hibernateJdbcBatchSize" required="false">
                <documentation>
                    A nonzero value enables use of JDBC2 batch updates by Hibernate.
                    Recommended values between 5 and 30
                </documentation>
            </property>
            <property name="hibernateJdbcUseScrollableResultSet" required="false">
                <documentation>
                    Whether or not to enable use of JDBC2 scrollable resultsets by Hibernate.
                    This property is only necessary when using user supplied connections.
                    Hibernate uses connection metadata otherwise.
                </documentation>
            </property>
            <property name="hibernateJdbcUseStreamsForBinary" required="false">
                <documentation>
                    Whether or not to use streams when writing / reading binary
                    or serializable types to/from JDBC.
                </documentation>
            </property>
            <property name="jarFiles" required="false">
                <documentation>
                    The comma separated ejb jars that are included
                    in the deployed ear package.
                </documentation>
            </property>
            <property name="driver" required="false">
                <documentation>
                    JDBC Driver to make a database connection.
                </documentation>
            </property>
            <property name="username" required="false">
                <documentation>
                    The database user login name.
                </documentation>
            </property>
            <property name="password" required="false">
                <documentation>
                    The database user password.
                </documentation>
            </property>
            <property name="connectionUrl" required="false">
                <documentation>
                    URL for the JDBC Driver to make the connection to the database.
                </documentation>
            </property>
            <property name="testDriver" required="false">
                <documentation>
                    JDBC Driver to make test database connection, this should be a fully qualified Java class name.
                </documentation>
            </property>
            <property name="testUsername" required="false">
                <documentation>
                    The test database user login name.
                </documentation>
            </property>
            <property name="testPassword" required="false">
                <documentation>
                    The test database user password.
                </documentation>
            </property>
            <property name="testConnectionUrl" required="false">
                <documentation>
                    URL for the JDBC Driver to make the connection to the test database.
                </documentation>
            </property>
            <property name="testCatalog" required="false">
                <documentation>
                    The Database Catalog used to determine the tables used for reveng.xml.
                    Should be the capitalized database name.
                </documentation>
            </property>
            <property name="testDialect" required="false">
                <default>org.hibernate.dialect.H2Dialect</default>
                <documentation>
                    The SQL dialect of the test database.
                    <ul>
                        <li>org.hibernate.dialect.MySQLDialect</li>
                        <li>org.hibernate.dialect.MySQLInnoDBDialect</li>
                        <li>org.hibernate.dialect.MySQLMyISAMDialect</li>
                        <li>org.hibernate.dialect.H2Dialect</li>
                        <li>org.hibernate.dialect.HSQLDialect</li>
                        <li>org.hibernate.dialect.PostgreSQLDialect</li>
                        <li>org.hibernate.dialect.DB2Dialect</li>
                        <li>org.hibernate.dialect.OracleDialect</li>
                        <li>org.hibernate.dialect.Oracle9Dialect</li>
                        <li>org.hibernate.dialect.SybaseDialect</li>
                        <li>org.hibernate.dialect.SQLServerDialect</li>
                        <li>org.hibernate.dialect.SAPDBDialect</li>
                        <li>org.hibernate.dialect.InformixDialect</li>
                        <li>org.hibernate.dialect.IngresDialect</li>
                        <li>org.hibernate.dialect.ProgressDialect</li>
                        <li>org.hibernate.dialect.InterbaseDialect</li>
                        <li>org.hibernate.dialect.PointbaseDialect</li>
                        <li>org.hibernate.dialect.FrontbaseDialect</li>
                        <li>org.hibernate.dialect.FirebirdDialect</li>
                    </ul>
                </documentation>
            </property>
            <property name="dataSource" required="false">
                <documentation>
                    Full JNDI name of data source to use. (would be used instead
                    of the connection properties, driver, username, password, etc).
                </documentation>
            </property>
            <property name="dataSourceName" required="false">
                <documentation>
                    The JNDI name of data source to use without prefix like java:/.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Cache">
            <property name="hibernateCacheProvider" required="false">
                <documentation>
                    Defines Hibernate Cache Provider implementation class.
                    Possible values for JBoss4/Hibernate are:
                    <ul>
                       <li>org.hibernate.cache.HashtableCacheProvider</li>
                       <li>org.jboss.ejb3.entity.TreeCacheProviderHook</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateTreecacheMbeanObject" required="false">
                <documentation>
                    Defines the Hibernate cache MBean object name
                    used in JBoss4.
                    <ul>
                        <li>jboss.cache:service=EJB3EntityTreeCache</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateEnableCache">
                <default>false</default>
                <documentation>
                    Enable/disable hibernate's second level cache
                    features for the cartridge.  This implies the
                    JBoss Cache framework for the EJB3 cartridge.
                    By enabling this, you are enabling entity
                    caching.
                </documentation>
            </property>
            <property name="hibernateEnableAssociationsCache">
                <default>false</default>
                <documentation>
                    Enable/disable Hibernate's second level cache
                    feature for entity associations.
                    Please <strong>NOTE</strong> that hibernateEnableCache
                    should also be enabled when specifying this property.
                </documentation>
            </property>
            <property name="hibernateUseQueryCache">
                <default>false</default>
                <documentation>
                    Enable/disable Hibernate's query cache
                    feature for queries.
                    Please <strong>NOTE</strong> that hibernateEnableCache
                    should also be enabled when specifying this property.
                </documentation>
            </property>
            <property name="useDefaultCacheRegion">
                <default>false</default>
                <documentation>
                    Set to true if you do NOT wish to separate the
                    entity and query cache regions.  That way, all
                    entities and queries use the default cache
                    region.
                    Set to false and the cartridge will create a
                    new cache region for all entities and all
                    queries marked as cacheable.
                </documentation>
            </property>
            <property name="hibernateEntityCache">
                <default>TRANSACTIONAL</default>
                <documentation>
                    Defines the default strategy for Entities caching.
                    Can be overwritten using the corresponding
                    tagged value <code>andromda_persistence_entity_cache</code>.
                    Possible values are:
                    <ul>
                       <li>READ_WRITE</li>
                       <li>NONSTRICT_READ_WRITE</li>
                       <li>READ_ONLY</li>
                       <li>TRANSACTIONAL</li>
                       <li>NONE</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateAssociationCache">
                <default>TRANSACTIONAL</default>
                <documentation>
                    Defines the default strategy for associations between
                    Entities caching. Can be overwritten with the corresponding
                    tagged value <code>andromda_persistence_association_cache</code>.
                    Possible values are:
                    <ul>
                       <li>READ_WRITE</li>
                       <li>NONSTRICT_READ_WRITE</li>
                       <li>READ_ONLY</li>
                       <li>TRANSACTIONAL</li>
                       <li>NONE</li>
                    </ul>
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Clustering">
            <property name="enableClustering">
                <default>false</default>
                <documentation>
                    Enable/disable EJB 3.0 clustering by
                    the application server.  Applies to
                    stateless and stateful session bean
                    clustering.  You can override the
                    default setting via the
                    <code>andromda_service_clustered</code>
                    tagged value.  Possible values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Transactions">
            <property name="hibernateTransactionManagerLookupClass" required="false">
                <documentation>
                     Defines the classname of a TransactionManagerLookup
                     which is required when JVM-level caching is enabled
                     or when using hilo generator in a JTA environment.
                     Typically, this value is:
                     <ul>
                         <li>org.hibernate.transaction.JBossTransactionManagerLookup</li>
                     </ul>
                </documentation>
            </property>
            <property name="hibernateTransactionFlushBeforeCompletion" required="false">
                <documentation>
                    Define if the session will automatically be flushed
                    during the before completion phase of the
                    transaction.  Handy options for CMT demarcation.
                    Possible values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateTransactionAutoCloseSession" required="false">
                <documentation>
                    Define if the session will be automatically closed
                    during the after completion phase of the transaction.
                    Handy option when using CMT demarcation.
                    Possible values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Name Patterns">
            <property name="entityNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing an entity name.
                    <em>{0}</em>
                    is used to represent the entity name in the model,
                    so if you specified a value of
                    <code>{0}Entity</code>
                    all the entities generated would have a suffix of
                    "Entity".
                </documentation>
            </property>
            <property name="entityImplementationNamePattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern to use when constructing the entity
                    implementation name.
                </documentation>
            </property>
            <property name="entityListenerNamePattern">
                <default>{0}Listener</default>
                <documentation>
                    The pattern to use when constructing an entity
                    listener class name.
                </documentation>
            </property>
            <property name="entityEmbeddableNamePattern">
                <default>{0}Embeddable</default>
                <documentation>
                    The pattern to use when constructing an entity
                    embeddable super class name.
                </documentation>
            </property>
            <property name="serviceNamePattern">
                <default>{0}Bean</default>
                <documentation>
                    The pattern to use when constructing a service bean name.
                    <em>{0}</em>
                    is used to represent the service bean name in the model,
                    so if you specified a value of
                    <code>{0}Bean</code>
                    all the entities generated would have a suffix of
                    "Bean".
                </documentation>
            </property>
            <property name="serviceInterfaceNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean parent interface name.
                </documentation>
            </property>
            <property name="serviceLocalInterfaceNamePattern">
                <default>{0}Local</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean local interface name.
                </documentation>
            </property>
            <property name="serviceRemoteInterfaceNamePattern">
                <default>{0}Remote</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean remote interface name.
                </documentation>
            </property>
            <property name="serviceImplementationNamePattern">
                <default>{0}BeanImpl</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean implementation name.
                </documentation>
            </property>
            <property name="serviceListenerNamePattern">
                <default>{0}Listener</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean listener class name.
                </documentation>
            </property>
            <property name="serviceDelegateNamePattern">
                <default>{0}Delegate</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean delegate class name.
                </documentation>
            </property>
            <property name="serviceBaseNamePattern">
                <default>{0}Base</default>
                <documentation>
                    The pattern to use when constructing the service
                    bean base class name.
                </documentation>
            </property>
            <property name="serviceTestNamePattern">
                <default>{0}Test</default>
                <documentation>
                    The pattern to use when constructing the service
                    test class name.
                </documentation>
            </property>
            <property name="serviceTestPackageNamePattern">
                <default>{0}.test</default>
                <documentation>
                    The pattern to use when constructing the package for
                    the service test class.
                </documentation>
            </property>
            <property name="serviceOperationTestNamePattern">
                <default>test{0}</default>
                <documentation>
                    The pattern to use when constructing the service
                    test operation name.
                </documentation>
            </property>
            <property name="implementationOperationNamePattern">
                <default>handle{0}</default>
                <documentation>
                    The pattern used to the create the implementation operation name
                    for both session and entity bean operations.
                    (i.e. the operations that actually perform the handling of the logic),
                    where <em>{0}</em> represents the operation name.
                </documentation>
            </property>
            <property name="defaultServiceExceptionNamePattern">
                <default>{0}Exception</default>
                <documentation>
                    The pattern to use when constructing the default service exception name.
                    <strong>NOTE:</strong> This property is only applicable when
                    allowDefaultServiceExceptions is <code>true</code>.
                </documentation>
            </property>
            <property name="messageDrivenNamePattern">
                <default>{0}MDBBean</default>
                <documentation>
                    The pattern to use when construction the JMS message driven
                    bean class name.
                </documentation>
            </property>
            <property name="messageDrivenListenerNamePattern">
                <default>{0}Listener</default>
                <documentation>
                    The pattern to use when constructing the JMS message driven
                    bean listener class name.
                </documentation>
            </property>
            <property name="messageDrivenImplementationNamePattern">
                <default>{0}MDBBeanImpl</default>
                <documentation>
                    The pattern to use when constructing the JMS message driven
                    bean implementation class name.
                </documentation>
            </property>
            <property name="messageDrivenTestNamePattern">
                <default>{0}Test</default>
                <documentation>
                    The pattern to use when constructing the message driven bean
                    test class name.
                </documentation>
            </property>
            <property name="messageDrivenTestPackageNamePattern">
                <default>{0}.test</default>
                <documentation>
                    The pattern to use when constructing the package for
                    the message driven bean test class.
                </documentation>
            </property>
            <property name="messageDrivenDurableSubscriptionIdPattern">
                <default>{0}SubscriptionId</default>
                <documentation>
                    The pattern to use when constructing the durable subscription
                    ID for a MDB.  Only use for topics with durable subscription.
                </documentation>
            </property>
            <property name="interceptorNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing the interceptor
                    class name.
                </documentation>
            </property>
            <property name="entityCompositePrimaryKeyNamePattern">
                <default>{0}PK</default>
                <documentation>
                    The pattern to use when constructing the composite
                    primary key class name.
                </documentation>
            </property>
            <property name="jndiNamePrefix" required="false">
                <documentation>
                    The prefix to give to the EJB JNDI names (this
                    allows the same EJBs to be deployed multiple times
                    in the same container)
                </documentation>
            </property>
            <property name="manageableServiceBaseNamePattern">
                <default>{0}Base</default>
                <documentation>
                    The pattern to use when constructing the
                    manageable service base name.
                </documentation>
            </property>
            <property name="manageableCreateExceptionNamePattern">
                <default>{0}CreateManageableException</default>
                <documentation>
                    The pattern to use when constructing the create
                    manageable application exception name.
                </documentation>
            </property>
            <property name="manageableReadExceptionNamePattern">
                <default>{0}ReadManageableException</default>
                <documentation>
                    The pattern to use when constructing the read
                    manageable application exception name.
                </documentation>
            </property>
            <property name="manageableUpdateExceptionNamePattern">
                <default>{0}UpdateManageableException</default>
                <documentation>
                    The pattern to use when constructing the update
                    manageable application exception name.
                </documentation>
            </property>
            <property name="manageableDeleteExceptionNamePattern">
                <default>{0}DeleteManageableException</default>
                <documentation>
                    The pattern to use when constructing the update
                    manageable application exception name.
                </documentation>
            </property>
            <property name="labelCollectionNamePattern">
                <default>{0}Labels</default>
                <documentation>
                    The pattern to use when defining the display
                    attribute label name when it's of type Collection.
                </documentation>
            </property>
            <property name="labelSingleNamePattern">
                <default>{0}Label</default>
                <documentation>
                    The pattern to use when defining the display
                    attribute label name when it's NOT of type
                    Collection.
                </documentation>
            </property>
            <property name="webServiceInterfaceNamePattern">
                <default>{0}WSInterface</default>
                <documentation>
                    The pattern to use when defining the web
                    service interface name when exposing
                    session bean operations as web services.
                </documentation>
            </property>
            <property name="embeddedValueImplementationNamePattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern to use when constructing an embedded
                    value implementation name.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="MDB Properties">
            <property name="messageDrivenDestinationType">
                <default>javax.jms.Queue</default>
                <documentation>
                    The default destination type for a JMS message
                    driven bean.  Possible values are:
                    <ul>
                        <li>javax.jms.Queue</li>
                        <li>javax.jms.Topic</li>
                    </ul>
                </documentation>
            </property>
            <property name="messageDrivenTopicSubscriptionDurability">
                <default>NonDurable</default>
                <documentation>
                    The default topic subscription durability.
                    Possible values are:
                    <ul>
                        <li>Durable</li>
                        <li>NonDurable</li>
                    </ul>
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Entity Properties">
            <property name="entityViewType">
                <default>local</default>
                <documentation>
                    The default view type accessibility for an entity POJO bean.
                    <ul>
                        Permitted values are:
                        <li>local</li>
                        <li>remote</li>
                        <li>both</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultCascade">
                <default>NONE</default>
                <documentation>
                    The value of the
                    <code>CascadeType</code>
                    annotation of the entity association. Possible
                    values are:
                    <ul>
                        <li>ALL</li>
                        <li>PERSIST</li>
                        <li>MERGE</li>
                        <li>REMOVE</li>
                        <li>REFRESH</li>
                        <li>NONE if one does not exist</li>
                    </ul>
                    It is possible to comma separate multiple
                    cascade properties.
                </documentation>
            </property>
            <property name="entityCompositeCascade" required="false">
                <documentation>
                    Indicates how a UML composition should be
                    interpreted to determine cascadable operations that
                    are propagated to the associated entity.
                    <ul>
                        <li>
                            If undefined, the cascade attribute is
                            computed by AndroMDA. If default cascade is
                            <em>all</em>
                            , then cascade is
                            <em>all</em>
                            otherwise cascade is
                            <em>REMOVE</em>
                            .
                        </li>
                        <li>
                            If this property is defined, its value is
                            generated at each occurrence of a UML
                            composition as the inverse side is not
                            marked with a cascade annotation element
                            which indicates no cascade propagation.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityAggregationCascade" required="false">
                <documentation>
                    Indicates how a UML aggregation should be interpreted
                    to determine cascadable operations that are
                    propagated to the associated entity.
                    <ul>
                        <li>
                            If undefined, aggregation is not
                            interpreted as a cascade value.
                        </li>
                        <li>
                            If the property is defined, its value is
                            generated at each occurrence of a UML
                            aggregation ad the inverse side is not
                            marked with a cascade annotation element
                            which indicates no cascade propogation.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultGeneratorType">
                <default>AUTO</default>
                <documentation>
                    Default entity identifier primary key generator type
                    set to AUTO unless specified using
                    andromda_persistence_column_generatorType tagged
                    value.
                </documentation>
            </property>
            <property name="entityDefaultGeneratorInitialValue">
                <default>1</default>
                <documentation>
                    Default generator initial value used when allocating
                    id numbers from the generator.
                </documentation>
            </property>
            <property name="entityDefaultGeneratorAllocationSize">
                <default>1</default>
                <documentation>
                    Default generator amount to increment by when
                    allocating id number from the generator.
                </documentation>
            </property>
            <property name="entityInheritanceStrategy">
                <default>SINGLE_TABLE</default>
                <documentation>
                    Defines the entity inheritance strategy used for the
                    entity class hierarchy (unless overridden on an
                    entity level by the
                    <a
                        href="profile.html#andromda._persistence_inheritance">
                        andromda_persistence_inheritance
                    </a>
                    tagged value, can be the following possible values:
                    <ul>
                        <li>
                            SINGLE_TABLE - A single table per class hierarchy. One table will have all
                            properties of every class in the hierarchy.
                        </li>
                        <li>
                            TABLE_PER_CLASS - A table per concrete class in the
                            hierarchy. Each class will have a table dedicated to it, with all of its
                            properties and the properties of its superclass mapped to this table.
                        </li>
                        <li>
                            JOINED - A table per subclass. Each class will have its own table. Each
                            table will have only the properties that are defined in that particular class.
                            These tables will not have properties of any superclass or subclass.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDiscriminatorType">
                <default>STRING</default>
                <documentation>
                    The value of the
                    <code>discriminatorType</code>
                    element for the Inheritance annotation of the
                    entity. Possible values are:
                    <ul>
                        <li>STRING</li>
                        <li>CHAR</li>
                        <li>INTEGER</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDiscriminatorColumnName">
                <default>TYPE</default>
                <documentation>
                    The DiscriminatorColumn annotation defines the
                    discriminator column for the SINGLE_TABLE and JOINED
                    mapping inheritance strategies. The name element
                    defines the name of the column to be used for the
                    discriminator. It will default to
                    <code>TYPE</code>
                    if it is required and not specified..
                </documentation>
            </property>
            <property name="entityGenericFinders">
                <default>true</default>
                <documentation>
                    Specifies whether to include the generic finder
                    property.  Generic finders in the entity bean include
                    findByPrimaryKey and findAll.
                    Permitted values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultEnumLiteralColumnLength">
                <default>20</default>
                <documentation>
                    The default column length specified for the
                    storage of a string based enumeration literal.
                </documentation>
            </property>
            <property name="entityDefaultTemporalType">
                <default>TIMESTAMP</default>
                <documentation>
                    Specifies that the persistence property should
                    be persisted as a temporal type.
                    This is only specified on fields of type
                    <code>java.util.Date</code> or
                    <code>java.util.Calendar</code>.
                    Possible values are:
                    <ul>
                        <li>DATE</li>
                        <li>TIME</li>
                        <li>TIMESTAMP</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityHibernateValidations">
                <default>true</default>
                <documentation>
                    Generate hibernate bean validations on the Entity, for
                    NotNull, Size, Pattern according to JSR303 and JEE6.
                    See http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/#table-spec-constraints
                    default = true.
                </documentation>
            </property>
            <property name="entityVOTransformations">
                <default>false</default>
                <documentation>
                    Generate Entity Domain to VO transformations and mappings automatically.
                    No longer needed for JPA since the domain Entity acts as a ValueObject.
                    This allows strongly-typed queries and results. Domain classes can be used as
                    VOs in the service and UI layers, especially if the DAO handles all database operations.
                    Default = false.
                </documentation>
            </property>
            <property name="entityCmpEqHash">
                <default>true</default>
                <documentation>
                    Generate Entity compareTo, equals, and hashCode methods. The only reason to turn this off
                    is if the Entity inherits from a custom framework class that has the same methods as final
                    and uses its own ancestor implementation for these methods.
                    default = true.
                </documentation>
            </property>
            <property name="entityFindersOnUniqueProperties">
                <default>true</default>
                <documentation>
                    Generate Entity findByX methods, returning a single Domain instance, for all unique properties automatically.
                    UML2 only, since UML14 cannot mark attributes or associations as Unique,
                    they all become unique when migrated to UML2.
                    default = true.
                </documentation>
            </property>
            <property name="daoNamedQueries">
                <default>true</default>
                <documentation>
                    Generate DAO named queries, where a strongly-typed result domain object is returned methods.
                    Only JPA2 supports this, avoiding compiler warnings from class cast.
                    default = true.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Service Properties">
            <property name="serviceViewType">
                <default>remote</default>
                <documentation>
                    The default view type accessibility for a session bean.
                    <ul>
                        Permitted values are:
                        <li>local</li>
                        <li>remote</li>
                        <li>both</li>
                    </ul>
                </documentation>
            </property>
            <property name="serviceLocatorName">
                <default>ServiceLocator</default>
                <documentation>
                    The name to give the service locator class.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="DAO Properties">
            <property name="daoType">
                <default>ejb3</default>
                <documentation>
                    The output type for classes which use EntityManager. Default is ejb3.
                    Spring will create JpaTemplate DAO classes. Use 'none' if you have your
                    own framework which creates and uses and tests EntityManager, and you only want to
                    generate the Entity and Embeddable classes with andromda (no unit tests).
                    Possible choices are:
                    <ul>
                        <li>ejb3</li>
                        <li>spring</li>
                        <li>custom</li>
                        <li>none</li>
                    </ul>
                </documentation>
            </property>
            <property name="daoInheritanceEnabled">
                <default>false</default>
                <documentation>
                    Whether or not the DAOs should make up an inheritance tree in
                    the same way as their respective entities. This is disabled
                    by default but you might want to enable it if you prefer to have
                    top-level DAO operations visible in child DAO classes. The EJB3
                    cartridge uses JDK5 generics, further enahanced by enabling the
                    <code>enableTemplating</code> namespace property.
                </documentation>
            </property>
            <property name="enableDaoPropertiesCreateMethod">
                <default>true</default>
                <documentation>
                    Whether or not the create methods on the DAOs taking properties
                    from the entity shall be generated.
                </documentation>
            </property>
            <property name="daoPackageNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing the package for
                    the dao class. By default, the same package as the entities.
                    <em>{0}</em> is used to represent the entity name in the model.
                </documentation>
            </property>
            <property name="daoNamePattern">
                <default>{0}Dao</default>
                <documentation>
                    The pattern to use when constructing the DAO name. <em>{0}</em>
                    is used to represent the entity name in the model, so if you
                    specified a value of <code>{0}Dao</code> all
                    the entities generated would have a suffix of "Dao".
                </documentation>
            </property>
            <property name="daoBaseNamePattern">
                <default>{0}DaoBase</default>
                <documentation>
                    The pattern to use when constructing the base DAO's name.
                    <em>{0}</em> is used to represent the entity name
                    in the model, so if you specified a value of
                    <code>{0}DaoBase</code> all the entities generated
                    would have a suffix of "DaoBase".
                </documentation>
            </property>
            <property name="daoImplementationNamePattern">
                <default>{0}DaoImpl</default>
                <documentation>
                    The pattern to use when constructing the DAO's
                    implementation name. <em>{0}</em> is used to represent
                    the entity name in the model, so if you specified a value of
                    <code>{0}DaoImpl</code> all the entities generated
                    would have a suffix of "DaoImpl".
                </documentation>
            </property>
            <property name="daoDefaultExceptionNamePattern">
                <default>{0}DaoException</default>
                <documentation>
                    The pattern to use when constructing the DAO
                    default exception name.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="WebService Properties">
            <property name="webServiceDefaultStyle">
                <default>document</default>
                <documentation>
                    The default style given all web services (if not defined separately
                    on each web service). Possible choices are:
                    <ul>
                        <li>rpc</li>
                        <li>document</li>
                    </ul>
                </documentation>
            </property>
            <property name="webServiceDefaultUse">
                <default>literal</default>
                <documentation>
                    The default use given all web services (if not defined separately
                    on each web service). Possible choices are:
                    <ul>
                        <li>literal</li>
                        <li>encoded</li>
                    </ul>
                </documentation>
            </property>
            <property name="webServiceDefaultParameterStyle">
                <default>wrapped</default>
                <documentation>
                    The default parameter encoding style for a
                    webservice operation.  Possible choices are:
                    <ul>
                        <li>wrapped</li>
                        <li>bare</li>
                    </ul>
                </documentation>
            </property>
            <property name="webServiceQualifiedNameLocalPartPattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when a qualified name local part
                    is created.  {0} represents the name of the classifier
                    (Service).
                </documentation>
            </property>
            <property name="webServiceEnabled">
                <documentation>
                    Specifies whether to use the JSR 181 web services
                    standards to expose web service operations in the
                    EJB3 cartridge.
                    If set to false, use the webservice cartridge
                    provided by AndroMDA/Axis.  Possible choices are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="webServiceNamespacePattern">
                <default>http://{0}/{1}</default>
                <documentation>
                    The pattern to use when a namespace is created.
                    <em>{0}</em> represents the package name of the classifier (i.e.
                    <em>ws.{0}</em> would prefix all your type and service
                    namespaces with <em>ws.</em>).
                </documentation>
            </property>
            <property name="webServiceReverseNamespace">
                <default>false</default>
                <documentation>
                    Whether or not to reverse the ordering of the namespace.
                    The namespace is typically determined by the package
                    name of the service or type, this allows you to reverse the package
                    name. (i.e. org.andromda.samples would become
                    <em>samples.andromda.org</em> if this was set to <code>true</code>).
                    Possible value are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="webServiceContextRoot">
                <documentation>
                    The context root for the web service.
                </documentation>
            </property>
            <property name="webServiceUrlPattern">
                <documentation>
                    The URL pattern appended to the context
                    root for the web service.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Security Properties">
            <property name="securityRealm" required="false">
                <documentation>
                    Specifies the security domain to use
                    for role based authorization.  Use the
                    security realm to match allowed roles.
                    This is only applicable for session beans
                    and MDBs.
                </documentation>
            </property>
            <property name="manageableRolesAllowed">
                <default>Admin</default>
                <documentation>
                    A comma separated list of roles added to the DAO
                    base <code>RolesAllowed</code> annotation.
                    This requires <code>securityRealm</code> be
                    enabled.
                    This exists because in some cases it is
                    incorrect to model an actor dependency on the
                    manageable entity and expect that actor to
                    define the authorised role on
                    ManageableServiceBeans.
                    This property separates
                    the roles for manageable session beans and
                    the remaining components.
                    It is expected that the list of roles
                    secure all manageable session beans.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Other Properties">
            <property name="persistenceProviderExtensions">
                <default>none</default>
                <documentation>
                    Determines whether the default persistence provider
                    extensions such as annotations should also be rendered.
                    By default, this is disabled.
                    To enable caching:
                    this must be set to <b>hibernate</b> such that
                    the Hibernate caching annotations are rendered.
                    To enable JBoss Seam:
                    this must be set to <b>hibernate</b> such that
                    the hibernate validator annotations are
                    rendered.
                    To enable Hibernate Criteria Query, this must
                    be set to <b>hibernate</b>.
                    Possible values are:
                    <ul>
                        <li>none</li>
                        <li>hibernate</li>
                    </ul>
                </documentation>
            </property>
            <property name="javaVersion">
                <default>1.6</default>
                <documentation>
                    Determines if some annotations or JDK-specific features are output such as @Override compareTo().
                    If 1.4, templating and generics should be turned off. Should be set by property java.version in pom.xml
                    which is also used by the maven-compiler-plugin. Allowed values=1.4,1.5,1.6. Default=1.6.
                </documentation>
            </property>
            <property name="deploymentPlatform">
                <default>jboss6</default>
                <documentation>
                    The default container deployment platform name and version.
                    Used when specifying specific annotations and dependencies and tests
                    for different persistence containers.
                    Possible values are:
                    <ul>
                      <li>jboss7</li>
                      <li>jboss6</li>
                      <li>jboss51</li>
                      <li>jboss5</li>
                      <li>jboss42</li>
                      <li>jboss4</li>
                      <li>jboss3</li>
                      <li>was8</li>
                      <li>was7</li>
                      <li>was61</li>
                      <li>wasce2</li>
                      <li>glassfish3</li>
                      <li>glassfish2</li>
                      <li>weblogic11</li>
                      <li>weblogic10</li>
                      <li>weblogic9</li>
                      <li>weblogic8</li>
                      <li>geronimo</li>
                      <li>jonas5</li>
                      <li>oracleas</li>
                      <li>resin3</li>
                      <li>resin4</li>
                      <li>sun8</li>
                    </ul>
                </documentation>
            </property>
            <property name="persistenceContainerName">
                <default>jboss</default>
                <documentation>
                    The default container deployment platform name and version.
                    Used when specifying specific annotations and dependencies and tests
                    for different persistence containers.
                    Possible values are:
                    <ul>
                      <li>jboss7</li>
                      <li>jboss6</li>
                      <li>jboss51</li>
                      <li>jboss5</li>
                      <li>jboss42</li>
                      <li>jboss4</li>
                      <li>jboss3</li>
                      <li>was8</li>
                      <li>was7</li>
                      <li>was61</li>
                      <li>wasce2</li>
                      <li>glassfish6</li>
                      <li>glassfish5</li>
                      <li>glassfish4</li>
                      <li>glassfish3</li>
                      <li>glassfish2</li>
                      <li>weblogic11</li>
                      <li>weblogic10</li>
                      <li>weblogic9</li>
                      <li>weblogic8</li>
                      <li>geronimo</li>
                      <li>jonas5</li>
                      <li>oracleas</li>
                      <li>resin3</li>
                      <li>resin4</li>
                      <li>sun8</li>
                    </ul>
                </documentation>
            </property>
            <property name="persistenceContextUnitName" required="false">
                <documentation>
                    Specifies the default persistence context
                    unit name associated with the default Entity
                    Manager.
                </documentation>
            </property>
            <property name="hibernateVersion">
                <default>5</default>
                <documentation>
                    The version of Hibernate to use when generating.
                    Allowable values are:
                    <ul>
                        <li>2 - Hibernate 2.x</li>
                        <li>3 - Hibernate 3.x</li>
                        <li>4 - Hibernate 4.x</li>
                        <li>5 - Hibernate 5.x</li>
                        <li>6 - Hibernate 6.x</li>
                    </ul>
                </documentation>
            </property>
            <property name="listTypeImplementation">
                <default>java.util.ArrayList</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as lists.
                </documentation>
            </property>
            <property name="setTypeImplementation">
                <default>java.util.TreeSet</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as sets.
                </documentation>
            </property>
            <property name="mapTypeImplementation">
                <default>java.util.HashMap</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as maps.
                </documentation>
            </property>
            <property name="specificCollectionInterfaces">
                <default>false</default>
                <documentation>
                    A flag indicating whether or not specific collection interfaces will be used
                    in association end mutators and accessors (i.e. java.util.Set, java.util.List, etc).
                    If this is set to false, then the value of the
                    <a href="#defaultCollectionInterface">defaultCollectionInterface</a>
                    property will used to provide the collection interface.
                </documentation>
            </property>
            <property name="defaultCollectionInterface">
                <default>java.util.Set</default>
                <documentation>
                    The default collection interface, this is the interface used with association end
                    accessors and mutators if the
                    <a href="#specificCollectionInterfaces">specificCollectionInterfaces</a>
                    flag is set to <code>false</code>.
                </documentation>
            </property>
            <property name="associationCollectionType">
                <default>set</default>
                <documentation>
                    Used to define the default mapping for EJB3 collections.
                </documentation>
            </property>
            <property name="associationEndCollectionIndexName" required="false">
                <documentation>
                    The default association end collection index name
                    (this can be overridden by the
                    <a href="profile.html#andromda_persistence_collection_index">andromda_persistence_collection_index</a>).
                </documentation>
            </property>
            <property name="associationEndCollectionIndexType" required="false">
                <default>datatype::String</default>
                <documentation>
                    The default association end collection index type
                    (this can be overridden by the
                    <a href="profile.html#andromda_persistence_collection_index_type">andromda_persistence_collection_index_type</a>
                    (this is applicable when the collection is a map).
                </documentation>
            </property>
            <property name="ejb3TypeMappingsUri" required="false">
                <default>Hibernate</default>
                <documentation>
                    URI specifying the specific mappings from model types to ejb3/hibernate types.
                    (i.e. <code>file:${basedir}/HibernateTypeMappings.xml</code>). This
                    is not necessary but useful for defining hibernate user types (when
                    hibernate doesn't support a specific type in the manner needed
                    for your application).
                </documentation>
            </property>
            <property name="compositionDefinesEagerLoading">
                <default>true</default>
                <documentation>
                    Allows you to turn on/off whether or not composite associations will define eager loading
                    and aggregate associations define lazy loading.
                </documentation>
            </property>
            <property name="queryUseNamedParameters">
                <default>true</default>
                <documentation>
                    Whether or not named parameters (i.e.
                    ':someParameter') or unnamed (i.e. '?') parameters
                    should be used in the SQL queries embedded within
                    the model.
                    <strong>NOTE:</strong>
                    Does not apply to queries written in OCL.
                </documentation>
            </property>
            <property name="valueObjectPackage">
                <default>{0}</default>
            </property>
            <property name="valueObjectName">
                <default>{0}</default>
            </property>
            <property name="transactionType">
                <default>REQUIRED</default>
                <documentation>
                    The default value to use for transaction types.
                    <ul>
                        Permitted values are:
                        <li>NOT_SUPPORTED</li>
                        <li>SUPPORTS</li>
                        <li>REQUIRED</li>
                        <li>REQUIRES_NEW</li>
                        <li>MANDATORY</li>
                        <li>NEVER</li>
                    </ul>
                    <strong>NOTE:</strong>
                    Can be overridden on a per bean/bean operation basis with the
                    <a
                        href="profile.html#andromda_ejb_transaction_type">
                        andromda_ejb_transaction_type
                    </a>
                    tagged value.
                </documentation>
            </property>
            <property name="ejb3TypesPackage">
                <default>org.andromda.ejb3</default>
                <documentation>
                    The package to which extra types are generated (i.e. ServiceLocator).
                </documentation>
            </property>
            <property name="parameterRequiredCheck">
                <default>true</default>
                <documentation>
                    Whether or not parameters should be checked if they're
                    required on services bean operation.
                </documentation>
            </property>
            <property name="xmlEncoding">
                <default>UTF-8</default>
                <documentation>
                    The encoding for xml documents
                </documentation>
            </property>
            <property name="allowDefaultServiceException">
                <default>true</default>
                <documentation>
                    Whether or not to generate a default exception for each service.  This exception
                    will handle unexpected exceptions occuring within the implemented operations.
                </documentation>
            </property>
            <property name="manageableServiceLocatorName">
                <default>ManageableServiceLocator</default>
                <documentation>
                    The name to give the CRUD manageable service
                    locator class.
                </documentation>
            </property>
            <property name="seamEnabled">
                <default>false</default>
                <documentation>
                    Set to true to enable the JBoss Seam application
                    framework for Java EE 5.
                </documentation>
            </property>
            <property name="javaTypeConversionIgnoreList" required="false">
                <documentation>
                   A list of one or more fully qualified java types that should be ignored whenever a type conversion
                   needs to be done. Currently, there is an issue with ValueObjects generated with the Java Axis
                   mappings that causes the relevant cartridge to generate DAO "entity to value object" type conversions
                   incorrectly for all date types.  By listing those date types here, the relevant cartridge will not
                   attempt to auto-generate conversions for date/time related attributes.
                </documentation>
            </property>
        </propertyGroup>
    </properties>
</namespace>