// license-header java merge-point
// Generated by EntityListener.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Modify as necessary. If deleted it will be regenerated.
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedEntityListenerName,'.','/')}.java")

/**
 * Callback Listener for Entity POJO EJB ${entity.fullyQualifiedName}
 *
 * @see ${entity.fullyQualifiedName}
 */
public class ${entity.entityListenerName}
{
    /**
     * Default public no-args constructor
     */
    public ${entity.entityListenerName}()
    {
        // empty constructor
    }

    @jakarta.persistence.PrePersist
    public void prePersist(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // pre persist implementation
    }

    @jakarta.persistence.PostPersist
    public void postPersist(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // post persist implementation
    }

    @jakarta.persistence.PreRemove
    public void preRemove(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // pre remove implementation
    }

    @jakarta.persistence.PostRemove
    public void postRemove(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // post remove implementation
    }

    @jakarta.persistence.PreUpdate
    public void preUpdate(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})}) {
        // pre update implementation
    }

    @jakarta.persistence.PostUpdate
    public void postUpdate(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // post update implementation
    }

    @jakarta.persistence.PostLoad
    public void postLoad(${entity.fullyQualifiedEntityName} ${stringUtils.uncapitalize(${entity.name})})
    {
        // post load implementation
    }
}
