#if ($umlUtils.shouldOutput($entity))
// license-header java merge-point
/* Autogenerated by AndroMDA EntityCompositePK.vsl in andromda-ejb3-cartridge on $umlUtils.date - do not edit */
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedEntityCompositePrimaryKeyName,'.','/')}.java")

/**
 * Composite primary key class for ${entity.entityName} entity bean.
$entity.getDocumentation(" * ")
 */
@jakarta.persistence.Embeddable
public class ${entity.entityCompositePrimaryKeyName}
    implements java.io.Serializable, Comparable<${entity.entityCompositePrimaryKeyName}>
{
    private static final long serialVersionUID = 1L;
##Distinguish between attribute identifiers and identifiers on identifier associations
##set ($identifiers = $entityUtils.getIdentifierAttributes($entity, true))
#set ($identifiers = $entity.identifiers)
#foreach ($property in $identifiers)
    private $property.getterSetterTypeName $property.name;
#end
#foreach ($property in $identifiers)

#set ($visibility = $property.visibility)
    /**
     * Get the $property.name property.
$property.getDocumentation("     * ")
     * @return $property.getterSetterTypeName The value of ${property.name}
     * owning=$property.otherEnd.owning optional=$property.optional $property.otherEnd.fulyQualifiedName many2One=$property.many2One target=$property.otherEnd.many2One
     */
#if ($property.associationEndFacadeMetaType && $property.otherEnd.owning)
#set ($target = $property.otherEnd)
#if ($target.many2One)
    @jakarta.persistence.ManyToOne(#if (!$property.optional)optional=false#set ($argExists = true)#end#if ($target.cascadeType)#if ($argExists), #end#**#cascade={${target.cascadeType}}#set ($argExists = true)#end#if ($target.lazy)#if ($argExists), #end#**#fetch=jakarta.persistence.FetchType.LAZY#end)
#elseif ($target.one2Many)
    @jakarta.persistence.OneToMany(#if ($target.cascadeType)cascade={${target.cascadeType}}#set ($argExists = true)#end#if ($target.navigable)#if ($argExists) ,#end#**#mappedBy="$property.otherEnd.name"#set ($argExists = true)#end#if ($target.eager)#if ($argExists), #end#**#fetch=jakarta.persistence.FetchType.EAGER#end)
#elseif ($target.one2One)
    @jakarta.persistence.OneToOne(#if ($target.cascadeType)cascade={${target.cascadeType}}#set ($argExists = true)#end#if ($target.navigable)#if ($argExists) ,#end#**#mappedBy="$property.otherEnd.name"#set ($argExists = true)#end#if ($target.eager)#if ($argExists), #end#**#fetch=jakarta.persistence.FetchType.EAGER#end)
#end
##set ($typeIdentifiers = $property.type.identifiers)
#set ($typeIdentifiers = $entityUtils.getIdentifierAttributes($property.type, true))
#if ($typeIdentifiers.size()==1)
#set ($identifier = $typeIdentifiers.get(0))
    @jakarta.persistence.JoinColumn(name="${identifier.columnName}"#if (!$identifier.columnNullable), nullable=${identifier.columnNullable}#end, insertable=true, updatable=false)  // ${identifier.owner.name}.${identifier.name}
#elseif ($typeIdentifiers.size()>1)
    // Order of the JoinColumns is EXTREMELY important - must match the order in the FK definition
##    // $property.type.name $property.type.compositePrimaryKeyPresent $property.type
    @jakarta.persistence.JoinColumns({
#foreach ($identifier in $typeIdentifiers)
##        // $identifier.owner.name $identifier.name
        @jakarta.persistence.JoinColumn(name="${identifier.columnName}"#if (!$identifier.columnNullable), nullable=${identifier.columnNullable}#end, insertable=true, updatable=false)#if($velocityCount != $typeIdentifiers.size()),#end   // ${identifier.owner.name}.${identifier.name}
#end
##        @jakarta.persistence.AttributeOverride(name="${property.name}", column=@jakarta.persistence.Column(name="${property.columnName}"#if ($property.unique), unique=${property.unique}#end#if (!$property.columnNullable), nullable=${property.columnNullable}#end#if ($property.columnLength), length=${property.columnLength}#end#if ($property.columnDefinition), columnDefinition="${property.columnDefinition}"#end#if ($property.columnPrecision), precision=${property.columnPrecision}#end#if ($property.columnScale), scale=${property.columnScale}#end))#if($velocityCount != $identifiers.size()),#end
##
#*  *#
    })
#end
#else
    @jakarta.persistence.Column(name="$property.columnName", nullable=false)
#end
    public $property.getterSetterTypeName ${property.getterName}()
    {
        return this.$property.name;
    }

    /**
     * Set the $property.name property.
     * @param value the new value
     */
    public void ${property.setterName}($property.getterSetterTypeName value)
    {
        this.${property.name} = value;
    }
#end

    /**
     * Default empty constructor
     */
    public ${entity.entityCompositePrimaryKeyName}()
    {
        // default empty constructor
    }

    /**
     * Implementation for the main constructor with all POJO identifier properties.
     *
#set ($identifierList = "")
#foreach($property in $identifiers)
     * @param ${property.name} Value for the $property.name property $velocityHasNext
#set ($identifierList = $identifierList + $property.type.fullyQualifiedName + " " + $property.name)
#if ($velocityHasNext)
#set ($identifierList = $identifierList + ", ")
#end
#end
     */
    public ${entity.entityCompositePrimaryKeyName}($identifierList)
    {
#foreach ($property in $identifiers)
        ${property.setterName}($property.name);
#end
    }

    /**
     * Returns a hash code value for the object
     * @return int The hash code value
     * @see Object${esc.hash}hashCode
     */
    @Override
    public int hashCode()
    {
        int result = 0;
#foreach($property in $identifiers)
#**##if ($property.type.primitive)
#*  *##if ($property.type.booleanType)
        result = 37*result + (this.${property.name} ? 0 : 1);
#*  *##else
        result = 37*result + (int)this.${property.name};
#*  *##end
#**##else
        result = 37*result + ((this.${property.name} != null) ? this.${property.name}.hashCode() : 0);
#**##end
#end
        return result;
    }

    /**
     * Indicates if the argument is of the same type and all values are equal.
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     * @see Object${esc.hash}equals(Object)
     */
    @Override
    public boolean equals(Object object)
    {
        if (object == null)
        {
            return false;
        }
        if (object == this)
        {
            return true;
        }
        if (!(object instanceof ${entity.entityCompositePrimaryKeyName}))
        {
            return false;
        }
        ${entity.entityCompositePrimaryKeyName} pk = (${entity.entityCompositePrimaryKeyName})object;
        return
#set ($totalIdentifiers = $identifiers.size())
#foreach($property in $identifiers)
#**##if ($property.type.stringType)
            #if ($velocityCount > 1)&&#end pk.${property.name}.equals(this.${property.name})#if ($velocityCount == $totalIdentifiers);#end

#**##else
            #if ($velocityCount > 1)&&#end pk.${property.name} == this.${property.name}#if ($velocityCount == $totalIdentifiers);#end

#**##end
#end
    }

    /**
     * @see Comparable${esc.hash}compareTo
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public int compareTo(${entity.entityCompositePrimaryKeyName} o)
    {
        int cmp = 0;
##set ($identifiers = $entity.identifiers)
#if (!$identifiers.empty)
#**##foreach ($identifier in $identifiers)
#*  *##if (!$identifier.type.primitive && !$identifier.type.arrayType && !$identifier.lob && !$identifier.containsEmbeddedObject && !$identifier.type.collectionType && !$identifier.type.name.equals("Object"))
#*    *##if ($velocityCount == 1)
        if (this.${identifier.getterName}() != null)
        {
#if ($identifier.many)
            // Compare Collection sizes for ordering
            cmp = Math.abs(this.${identifier.getterName}().size()-o.${identifier.getterName}().size());
#else
            cmp = this.${identifier.getterName}().compareTo(o.${identifier.getterName}());
#end
        }
#*    *##else
        if (this.${identifier.getterName}() != null)
        {
#if ($identifier.many)
            // Compare Collection sizes for ordering
            cmp = (cmp != 0 ? cmp : Math.abs(this.${identifier.getterName}().size()-o.${identifier.getterName}().size()));
#else
            cmp = (cmp != 0 ? cmp : this.${identifier.getterName}().compareTo(o.${identifier.getterName}()));
#end
        }
#*    *##end
#*  *##end
#**##end
#end
        return cmp;
    }

    /**
     * Returns a String representation of the composite key object
     * @return String Textual representation of the object displaying name/value pairs for all properties
     * @see Object${esc.hash}toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("${entity.name}PK(");
#*  *##if ($entity.generalization)
        sb.append(super.toString());
#*  *##end
#*  *##set( $sep = "" )
#*  *##foreach ($identifier in $identifiers)
#*    *##set ($attrType = $identifier.type)
        sb.append(" ${identifier.name}=").append(${identifier.getterName}()#if ($identifier.containsEmbeddedObject).toString()#end);
#*    *##set( $sep = ", " )
#*  *##end## foreach
        sb.append(")");
        return sb.toString();
    }
}
#end
