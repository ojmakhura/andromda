##
##  This macro will render the equals() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderEqualsMethod $class $className $attributeSet)
#if (!$jpaFramework)
##if (!$class.generalization || !$class.generalization.name.startsWith("AbstractPersistent") || $class.generalization.name.startsWith("AbstractAudited"))
    /**
     * Indicates if the argument is of the same type and all values are equal.
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     * @see Object${esc.hash}equals(Object)
     */
    @Override
    public boolean equals(Object object)
    {
#if ($attributeSet.empty)
        return super.equals(object);
#else
        if (null == object)
        {
            return false;
        }
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof $className))
        {
            return false;
        }
        final $className that = ($className)object;
#*  *##foreach ($attribute in $attributeSet)
#*    *##set ($idType = $attribute.type)
#if ($class.compositePrimaryKeyPresent)
#set ($pkGet="getPk().")
#else
#set ($pkGet="")
#end
#*    *##if ($idType.primitive)
        if (this.$pkGet${attribute.getterName}() != that.$pkGet${attribute.getterName}())
        {
            return false;
        }
#*    *##elseif ($idType.arrayType)
        if (!java.util.Arrays.equals(this.$pkGet${attribute.getterName}(), that.$pkGet${attribute.getterName}()))
        {
            return false;
        }
#*    *##else
        if (this.$pkGet${attribute.getterName}() == null || that.$pkGet${attribute.getterName}() == null || !this.$pkGet${attribute.getterName}().equals(that.$pkGet${attribute.getterName}()))
        {
            return false;
        }
#*    *##end
#*  *##end
        return true;
#end
    }
#end

#end
##
##  This macro will render the hashCode() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderHashCodeMethod $class $attributeSet)
#if (!$jpaFramework)
    /**
     * Returns a hash code value for the object
     * @return int The hash code value
     * @see Object${esc.hash}hashCode
     */
    @Override
    public int hashCode()
    {
#if ($attributeSet.empty)
        return super.hashCode();
#else
#*  *##if ($class.generalization)
        int hashCode = super.hashCode();
#*  *##else
        int hashCode = 0;
#*  *##end
#*  *##foreach ($attribute in $attributeSet)
#*    *##set ($attrType = $attribute.type)
#if ($class.compositePrimaryKeyPresent)
#set ($pkGet="getPk().")
#else
#set ($pkGet="")
#end
#*    *##if  ($attribute.getterSetterTypeName == "boolean")
        hashCode = 29 * hashCode + (${attribute.getterName}() ? 1 : 0);
#*    *##elseif ($attrType.arrayType)
        // arrays are not part of the hashCode calculation
#*    *##elseif ($attrType.primitive)
        hashCode = 29 * hashCode + #if(!$attrType.name.equals("int"))(int)#end$pkGet${attribute.getterName}();
#*    *##else
        hashCode = 29 * hashCode + ($pkGet${attribute.getterName}() == null ? 0 : $pkGet${attribute.getterName}().hashCode());
#*    *##end## if
#*  *##end## foreach

        return hashCode;
#end## $attributeSet.empty
    }
#end

#end
##
##  This macro will render the toString() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderToStringMethod $class $className $attributeSet)
    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object${esc.hash}toString
     */
    @Override
    public String toString()
    {
#if ($attributeSet.empty)
        return super.toString();
#else
        StringBuilder sb = new StringBuilder();
        sb.append("${className}(");
#*  *##if ($class.generalization)
        sb.append(super.toString());
#*  *##end
#*  *##set( $sep = "" )
#if ($class.compositePrimaryKeyPresent)
        sb.append(this.pk);
#end
#foreach ($attribute in $attributeSet)
##        // assoc=$attribute.associationEndFacadeMetaType id=$attribute.identifier owning=$attribute.otherEnd.owning Id=$attribute.hasStereotype("Identifier") PK=$class.compositePrimaryKeyPresent
#if ($attribute.attributeFacadeMetaType || ($attribute.associationEndFacadeMetaType && $attribute.otherEnd.owning))
## Identifier attributes already displayed as part of composite PK toString
#if (!$attribute.hasStereotype("Identifier") || !$class.compositePrimaryKeyPresent)
#*    *##set ($attrType = $attribute.type)
##        sb.append(" #if ($class.compositePrimaryKeyPresent && $attribute.identifier)pk.#end${attribute.name}=").append(#if ($class.compositePrimaryKeyPresent && $attribute.identifier)this.getPk().#end${attribute.getterName}()#if ($attribute.containsEmbeddedObject).toString()#end);
        sb.append(" ${attribute.name}=").append(${attribute.getterName}()#if ($attribute.containsEmbeddedObject).toString()#end);
#*    *##set( $sep = ", " )
#end
#end
#end## foreach
        sb.append(")");
        return sb.toString();
#end## $attributeSet.empty
    }

#end
##
##  This macro will render the compareTo(Object o) method
##  This is required since each entity implements Comparable<T>
##
#macro (renderCompareToMethod $class $className $identifiers)
#if (!$jpaFramework)
    /**
     * @see Comparable${esc.hash}compareTo
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public int compareTo($className o)
    {
        int cmp = 0;
#if ($identifiers.size() > 1)
        if (this.getPk() != null)
        {
            cmp = this.getPk().compareTo(o.getPk());
        }
#elseif ($identifiers.size()==1)
#*  *##set ($getter = "${identifiers.get(0).getterName}()")
## Assume numeric identifier if primitive
#if ($identifier.type.primitive)
        if (this.$getter > 0)
        {
            cmp = this.${getter} - o.$getter;
        }
#else
        if (this.$getter != null)
        {
            cmp = this.${getter}.compareTo(o.$getter);
        }
#end
#end
#set ($attributes = $class.getAttributes(true))
#if (!$attributes.empty)
        else
        {
#*  *##foreach ($attribute in $attributes)
##            // primitive=$attribute.type.primitive type=$attribute.type.fullyQualifiedName
#*    *##if (!$attribute.type.primitive && !$attribute.type.arrayType && !$attribute.lob && !$attribute.identifier && !$attribute.transient && !$attribute.containsEmbeddedObject && !$attribute.type.collectionType)
            if (this.${attribute.getterName}() != null)
            {
#if ($attribute.many)
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.${attribute.getterName}().size()-o.${attribute.getterName}().size()));
#else
                cmp = (cmp != 0 ? cmp : this.${attribute.getterName}().compareTo(o.${attribute.getterName}()));
#end
            }
#*    *##end
#*  *##end
        }
#end
        return cmp;
    }
#end

#end
##
##  This macro will render the hashCode() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderObjectIdMethod $class $identifiers)
#if ($jpaFramework)
    /**
     * Returns a unique objectId value for the object
     * @return String The objectId value
     */
    @Override
    @jakarta.persistence.Transient
    public String getObjectId()
    {
#if ($identifiers.size()>1)
        StringBuilder sb = new StringBuilder();
#if ($class.compositePrimaryKeyPresent)
        if (this.getPk() != null)
        {
#set ($tab="    ")
#end
#foreach($identifier in $identifiers)
$tab        sb.append(String.valueOf(this#if ($class.compositePrimaryKeyPresent).getPk()#end.${identifier.getterName}())).append("-");
#end
#if ($class.compositePrimaryKeyPresent)
        }
#end
        return sb.toString();
#elseif ($identifiers.size()==1)
        return String.valueOf(this.${identifiers.get(0).getterName}());
#end
    }
#end

#end
