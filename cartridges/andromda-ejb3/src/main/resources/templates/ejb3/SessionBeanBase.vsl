#parse("templates/ejb3/Globals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SessionBeanBase.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedServiceBaseName,'.','/')}.java")

/**
 * Autogenerated EJB3 session bean base class ${service.serviceName} which contains
 * method level annotations for the session bean.  All method level annotations
 * are inherited by the extending session bean class.
#if ($service.stateful)
 *
 * ${service.serviceName} is a stateful session bean and implements Serializable to maintain
 * state when bean instance not in use.
#end
#if ($service.seamComponent)
 *
 * This Seam component is defined through META-INF/components.xml rather than
 * class level annotations.
#end
$service.getDocumentation(" * ")
 */
#if ($service.transactionManagement)
@jakarta.ejb.TransactionManagement(jakarta.ejb.TransactionManagementType.${service.transactionManagement})
#end
#if ($service.securityEnabled)
#**##if ($service.persistenceContainerJboss)
@org.jboss.annotation.security.SecurityDomain("${service.securityRealm}")
#**##end
#end
#if ($service.runAs)
@javax.annotation.security.RunAs("${service.runAs}")
#end
#if ($service.jndiNameRemote)
#**##if ($service.persistenceContainerJboss)
@org.jboss.annotation.ejb.RemoteBinding(jndiBinding = "${service.jndiNameRemote}")
#**##end
#end
#if ($service.jndiNameLocal)
#**##if ($service.persistenceContainerJboss)
@org.jboss.annotation.ejb.LocalBinding(jndiBinding = "${service.jndiNameLocal}")
#**##end
#end
#if ($service.clusteringEnabled)
@org.jboss.annotation.ejb.Clustered
#end
public abstract class ${service.serviceBaseName}
#if($service.generalization)
    extends ${service.generalization.fullyQualifiedServiceName}
#end
    implements ${service.fullyQualifiedServiceInterfaceName}#if ($service.stateful), java.io.Serializable#end

{
    // ------ Session Context Injection ------

    /**
     * jakarta.ejb.SessionContext Injection
     */
    @javax.annotation.Resource
    protected jakarta.ejb.SessionContext context;
#if ($service.transactionManagementBean)

    // ---------- User Transaction Injection ---------

    /**
     * javax.transaction.UserTransaction Injection
     */
    @javax.annotation.Resource
    protected javax.transaction.UserTransaction userTrans;
#end

    // ------ Persistence Context Definitions --------
#set ($argExists = false)
    /**
     * Inject persistence context #if ($service.persistenceContextUnitName)${service.persistenceContextUnitName}#end

     */
    @jakarta.persistence.PersistenceContext#if ($service.persistenceContextUnitName || $service.persistenceContextType)(#end#if ($service.persistenceContextUnitName)unitName = "${service.persistenceContextUnitName}"#set ($argExists = true)#end#if ($service.persistenceContextType)#if ($argExists),#end type = jakarta.persistence.PersistenceContextType.${service.persistenceContextType}#end#if ($service.persistenceContextUnitName || $service.persistenceContextType))#end

    protected jakarta.persistence.EntityManager emanager;
#foreach ($persistenceContext in $service.persistenceContextReferences)
#**##set ($argExists = false)

    /**
     * Inject persistence context #if ($persistenceContext.unitName)${persistenceContext.unitName}#end

     */
    @jakarta.persistence.PersistenceContext#if ($persistenceContext.unitName || $persistenceContext.contextType)(#end#if ($persistenceContext.unitName)unitName = "${persistenceContext.unitName}"#set ($argExists = true)#end#if ($persistenceContext.contextType)#if ($argExists),#end type = jakarta.persistence.PersistenceContextType.${persistenceContext.contextType}#end#if ($persistenceContext.unitName || $persistenceContext.contextType))#end

    protected jakarta.persistence.EntityManager $stringUtils.uncapitalize(${persistenceContext.name});
#end
#set ($references = $service.serviceReferences)
#if (!$references.empty)

    // ------ EJB Injection Definitions --------
#**##foreach ($dependency in $references)
#*  *##set ($reference = $dependency.targetElement)

#*  *##if ($service.seamComponent && $reference.seamComponent)
    /**
     * Inject Seam session EJB ${reference.name}
     */
    @org.jboss.seam.annotations.In
#*  *##else
    /**
     * Inject session EJB ${reference.name}
     */
    @jakarta.ejb.EJB
#*  *##end
#*  *##if ($service.viewType == "local")
    protected ${reference.fullyQualifiedServiceLocalInterfaceName} $stringUtils.uncapitalize(${reference.name});
#*  *##else
    protected ${reference.fullyQualifiedServiceRemoteInterfaceName} $stringUtils.uncapitalize(${reference.name});
#*  *##end
#**##end
#end
#set ($entityReferences = $service.entityReferences)
#if (!$entityReferences.empty)

    // ------ DAO Injection Definitions --------
#**##foreach ($daoDependency in $entityReferences)
#*  *##set ($daoReference = $daoDependency.targetElement)

    /**
     * Inject DAO ${daoReference.daoName}
     */
    @jakarta.ejb.EJB
    private ${daoReference.fullyQualifiedDaoName} $stringUtils.uncapitalize(${daoReference.daoName});
#**##end
#end
#set ($mdbReferences = $service.messageDrivenReferences)
#if (!$mdbReferences.empty)

    // ------ Message Driven EJB Injection Definitions --------

#**##foreach ($dependency in $mdbReferences)
#*  *##set ($reference = $dependency.targetElement)
#*  *##if ($reference.destinationTypeQueue)
#*    *##if (!$queueConnectionFactoryDefined)
    @javax.annotation.Resource(mappedName = "java:/JmsXA")
    protected javax.jms.QueueConnectionFactory queueFactory;
#*      *##set ($queueConnectionFactoryDefined = true)

#*    *##end
#*  *##elseif ($reference.destinationTypeTopic)
#*    *##if (!$topicConnectionFactoryDefined)
    @javax.annotation.Resource(mappedName = "java:/JmsXA")
    protected javax.jms.TopicConnectionFactory topicFactory;
#*      *##set ($topicConnectionFactoryDefined = true)

#*    *##end
#*  *##end
    /**
     * Inject ${reference.destinationType}
     */
    @javax.annotation.Resource(mappedName = "${reference.destination}")
## NOTE: CHANGE TO USE mappedName
    protected javax.jms.Destination $stringUtils.uncapitalize(${reference.name});
#**##end
#end
#set ($constants = $service.getConstants(true))
#if (!$constants.empty)

    // ----------- Constant Definitions -----------

#**##foreach($constant in $constants)
    private static final $constant.type.fullyQualifiedName $constant.name = $constant.defaultValue;
#**##end
#end
#set ($instanceAttributes = $service.instanceAttributes)
#if(!$instanceAttributes.empty)

    // --------- Attribute Definitions ------------

#**##foreach ($attribute in $instanceAttributes)
    /**
     * The $attribute.name property
     */
#*  *##if ($service.seamComponent)
#*    *##if ($attribute.seamBijectionIn)
    @org.jboss.seam.annotations.In#if ($stringUtils.isNotBlank($attribute.seamBijectionInParameters))$attribute.seamBijectionInParameters#end

#*    *##end
#*    *##if ($attribute.seamBijectionOut)
    @org.jboss.seam.annotations.Out#if ($stringUtils.isNotBlank($attribute.seamBijectionOutParameters))$attribute.seamBijectionOutParameters#end

#*    *##end
#*    *##if ($attribute.seamBijectionLogger)
    @org.jboss.seam.annotations.Logger#if ($stringUtils.isNotBlank($attribute.seamBijectionLoggerParameters))$attribute.seamBijectionLoggerParameters#end

#*    *##end
#*    *##if ($attribute.seamBijectionRequestParameter)
    @org.jboss.seam.annotations.RequestParameter#if ($stringUtils.isNotBlank($attribute.seamBijectionRequestParameterParameters))$attribute.seamBijectionRequestParameterParameters#end

#*    *##end
#*    *##if ($attribute.seamDataModel)
    @org.jboss.seam.annotations.datamodel.DataModel#if ($stringUtils.isNotBlank($attribute.seamDataModelParameters))$attribute.seamDataModelParameters#end

#*    *##end
#*    *##if ($attribute.seamDataModelSelection)
    @org.jboss.seam.annotations.datamodel.DataModelSelection#if ($stringUtils.isNotBlank($attribute.seamDataModelSelectionParameters))$attribute.seamDataModelSelectionParameters#end

#*    *##end
#*    *##if ($attribute.seamDataModelSelectionIndex)
    @org.jboss.seam.annotations.datamodel.DataModelSelectionIndex#if ($stringUtils.isNotBlank($attribute.seamDataModelSelectionIndexParameters))$attribute.seamDataModelSelectionIndexParameters#end

#*    *##end
##
## Only enable JBoss Seam components if Hibernate extensions are enabled
##
#*    *##if ($attribute.seamValidationValid && $hibernateExtensionEnabled)
    @org.hibernate.validator.Valid

#*    *##end
#*  *##end
    protected #if ($attribute.seamBijectionLogger)org.jboss.seam.log.Log#else${attribute.getterSetterTypeName}#end $attribute.name;

#**##end
#end
#set ($envEntries = $service.getEnvironmentEntries(true))
#if (!$envEntries.empty)

    // ---------- Env Entry Injection -----------

#**##foreach ($envEntry in $envEntries)
    /**
     * The $envEntry.name resource injection
     */
    @javax.annotation.Resource(name = "${envEntry.name}")
    protected $envEntry.type.fullyQualifiedName $envEntry.name;

#**##end
#end

    // --------------- Constructors ---------------

    /**
     * Default constructor method with no arguments.
     */
    public ${service.serviceBaseName}()
    {
        super();
    }
## Autogenerated create method with all attributes. Only present for stateful beans.
#set ($allAttributes = $service.filterSeamAttributes(${service.allInstanceAttributes}))
#if (!$allAttributes.empty)

    /**
     * Constructor with all attribute values.
#**##set ($inheritedAttributes = $service.filterSeamAttributes(${service.inheritedInstanceAttributes}))
#**##foreach($attribute in $allAttributes)
     * @param $attribute.name Value for the ${attribute.name} property
#**##end
     */
    public ${service.serviceBaseName}($service.getAttributesAsList($allAttributes, true, true))
    {
#**##if(!$inheritedAttributes.empty)
        super($service.getAttributesAsList($inheritedAttributes, false, true));
#**##end
#**##foreach ($attribute in $service.filterSeamAttributes(${service.instanceAttributes}))
## Don't use a setter here - we may have none if the attribute is marked readonly
        this.$attribute.name = $attribute.name;
#**##end
    }
#end
#if (!$constants.empty)

    // --------- Accessors for Constants ----------

#**##foreach($constant in $constants)
#*  *##if ($constant.visibility == "public")
    /**
     * Get the <code>$constant.name</code> constant
$constant.getDocumentation("     * ")
     */
    $constant.visibility $constant.type.fullyQualifiedName ${constant.getterName}()
    {
        return $constant.name;
    }

#*  *##end
#**##end
#end
#if(!$instanceAttributes.empty)

    // ------- Accessors for Attributes ----------

#**##foreach ($attribute in $service.filterSeamAttributes(${instanceAttributes}))
#*  *##set ($visibility = $attribute.visibility)
    /**
     * Get the ${attribute.name} property
$attribute.getDocumentation("     * ")
     */
#*  *##if (!$service.transactionManagementBean)
#*    *##if ($attribute.transactionType)
    @jakarta.ejb.TransactionAttribute(jakarta.ejb.TransactionAttributeType.${attribute.transactionType})
#*    *##end
#*  *##end
    $visibility ${attribute.getterSetterTypeName} ${attribute.getterName}()
    {
       return $attribute.name;
    }
## Only generate a setter if the attribute is not read-only
#*  *##if (!$attribute.readOnly)

    /**
     * Set the $attribute.name property
     * @param value the new value
     */
#*    *##if (!$service.transactionManagementBean)
#*      *##if ($attribute.transactionType)
    @jakarta.ejb.TransactionAttribute(jakarta.ejb.TransactionAttributeType.${attribute.transactionType})
#*      *##end
#*    *##end
    $visibility void ${attribute.setterName}(${attribute.getterSetterTypeName} value)
    {
       this.$attribute.name = value;
    }

#*  *##end
#**##end
#end
#if (!$entityReferences.empty)

    // ------ DAO Getters --------
#**##foreach ($daoDependency in $entityReferences)
#*  *##set ($daoReference = $daoDependency.targetElement)

    /**
     * Get the injected DAO ${daoReference.daoName}
     * @return $daoReference.fullyQualifiedDaoName
     */
    protected $daoReference.fullyQualifiedDaoName ${daoDependency.daoGetterName}()
    {
        return this.$stringUtils.uncapitalize(${daoReference.daoName});
    }
#**##end
#end
#set ($operations = $service.businessOperations)
#if (!$operations.empty)

    // -------- Business Methods  --------------

#**##foreach ($operation in $operations)
##
## Check that operation is NOT a lifecycle callback
## and has public visibility
##
#*  *##if (!$operation.lifecycleCallback && $operation.visibility == "public")
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $operation.getterSetterReturnTypeName
#end
#if ($operation.exceptionsPresent)
     * @${operation.throwsClause}
#end
     */
#*    *##if (!$service.transactionManagementBean)
#*      *##if ($stringUtils.isNotBlank($operation.transactionType))
    @jakarta.ejb.TransactionAttribute(jakarta.ejb.TransactionAttributeType.${operation.transactionType})
#*      *##end
#*    *##end
#*    *##if ($service.securityEnabled)
#*      *##if ($stringUtils.isBlank(${operation.rolesAllowed}))
#*        *##if ($operation.denyAll)
    @javax.annotation.security.DenyAll
#*        *##else
    @javax.annotation.security.PermitAll
#*        *##end
#*      *##else
    @javax.annotation.security.RolesAllowed({${operation.rolesAllowed}})
#*      *##end
#*    *##end
#*    *##if ($operation.flushMode)
    @jakarta.persistence.FlushMode(jakarta.persistence.FlushModeType.${operation.flushMode})
#*    *##end
#*    *##if ($operation.timeoutCallback)
    @jakarta.ejb.Timeout
#*    *##end
#*    *##set ($interceptors = $operation.interceptorReferences)
#*    *##if ($collectionUtils.size($interceptors) >= 1)
    // Interceptors are defined in ejb-jar.xml
    // @javax.interceptor.Interceptors({$transform.getInterceptorsAsList(${interceptors}, "")})
#*    *##end
#*    *##if ($operation.excludeDefaultInterceptors)
    // Interceptor default exclusions are defined in ejb-jar.xml
    // @javax.interceptor.ExcludeDefaultInterceptors
#*    *##end
#*    *##if ($operation.excludeClassInterceptors)
    // Interceptor class exclusions are defined in ejb-jar.xml
    // @javax.interceptor.ExcludeClassInterceptors
#*    *##end
#*    *##if ($service.seamComponent)
#*      *##if ($operation.seamLifecycleCreate)
    @org.jboss.seam.annotations.Create

#*      *##elseif ($operation.seamLifecycleDestroy)
    @org.jboss.seam.annotations.Destroy

#*      *##end
#*      *##if ($operation.seamValidationValidator)
#*        *##set ($argExists = false)
    @org.jboss.seam.annotations.IfInvalid(#if ($operation.seamValidationOutcome)outcome = ${operation.seamValidationOutcome}#set ($argExists = true)#end#if ($operation.seamValidationRefreshEntities)#if ($argExists), #end#**#refreshEntities = ${operation.seamValidationRefreshEntities}#end)

#*      *##end
#*      *##if ($operation.seamBijectionFactory)
    @org.jboss.seam.annotations.Factory#if ($stringUtils.isNotBlank($operation.seamBijectionFactoryParameters))$operation.seamBijectionFactoryParameters#end

#*      *##end
#*      *##if ($operation.seamConversationBegin)
    @org.jboss.seam.annotations.Begin#if ($stringUtils.isNotBlank($operation.seamConversationBeginParameters))$operation.seamConversationBeginParameters#end

#*      *##end
#*      *##if ($operation.seamConversationBeginTask)
    @org.jboss.seam.annotations.BeginTask#if ($stringUtils.isNotBlank($operation.seamConversationBeginTaskParameters))$operation.seamConversationBeginTaskParameters#end

#*      *##end
#*      *##if ($operation.seamConversationCreateProcess)
    @org.jboss.seam.annotations.CreateProcess#if ($stringUtils.isNotBlank($operation.seamConversationCreateProcessParameters))$operation.seamConversationCreateProcessParameters#end

#*      *##end
#*      *##if ($operation.seamConversationEnd)
    @org.jboss.seam.annotations.End#if ($stringUtils.isNotBlank($operation.seamConversationEndParameters))$operation.seamConversationEndParameters#end

#*      *##end
#*      *##if ($operation.seamConversationEndTask)
    @org.jboss.seam.annotations.EndTask#if ($stringUtils.isNotBlank($operation.seamConversationEndTaskParameters))$operation.seamConversationEndTaskParameters#end

#*      *##end
#*      *##if ($operation.seamConversationResumeProcess)
    @org.jboss.seam.annotations.ResumeProcess#if ($stringUtils.isNotBlank($operation.seamConversationResumeProcessParameters))$operation.seamConversationResumeProcessParameters#end

#*      *##end
#*      *##if ($operation.seamConversationStartTask)
    @org.jboss.seam.annotations.StartTask#if ($stringUtils.isNotBlank($operation.seamConversationStartTaskParameters))$operation.seamConversationStartTaskParameters#end

#*      *##end
#*      *##if ($operation.seamAsynchronous)
    @org.jboss.seam.annotations.Asynchronous

#*      *##end
#*      *##if ($operation.seamTransactional)
    @org.jboss.seam.annotations.Transactional

#*      *##end
#*      *##if ($operation.seamTransactionalRollback)
    @org.jboss.seam.annotations.TransactionalRollback#if ($stringUtils.isNotBlank($operation.seamConversationTransactionalRollbackParameters))$operation.seamConversationTransactionalRollbackParameters#end

#*      *##end
#*      *##if ($operation.seamConversationWebRemote)
    @org.jboss.seam.annotations.WebRemote#if ($stringUtils.isNotBlank($operation.seamConversationWebRemoteParameters))$operation.seamConversationWebRemoteParameters#end

#*      *##end
#*      *##if ($operation.seamObserver)
    @org.jboss.seam.annotations.Observer$operation.seamObserverEventName
#*      *##end
#*    *##end
    $operation.visibility $operation.getterSetterReturnTypeName $operation.signature
#*    *##if ($operation.exceptionsPresent)
        $operation.throwsClause
#*    *##end
    {
#*    *##if ($requiredCheckEnabled)
#*      *##foreach ($argument in $operation.arguments)
#*        *##if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedServiceName}.${operation.signature} - '${argument.name}' can not be null");
        }
#*        *##end
#*      *##end
#*    *##end
#*    *##if ($operation.constraintsPresent)
        this.$operation.preconditionCall;
#*    *##end
        try
        {
#*    *##set ($call = "this.${operation.implementationCall};")
#*    *##if ($operation.returnTypePresent)
            return $call
#*    *##else
            $call
#*    *##end
        }
#*    *##foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#*    *##end
#*    *##if ($service.allowDefaultServiceException)
        catch (Throwable th)
        {
            throw new ${service.fullyQualifiedDefaultExceptionName}(
                "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + th,
                th);
        }
#*    *##end
    }

#*    *##if ($operation.constraintsPresent)
    /**
     * Performs any precondition checks for {@link ${esc.hash}${operation.call}}.
     */
    private void $operation.preconditionSignature
    {
#renderPreconditions($operation)
    }

#*    *##end
    /**
     * Performs the core logic for {@link ${esc.hash}${operation.getSignature(false)}}
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $operation.getterSetterReturnTypeName
#end
     * @throws Exception
     */
    protected abstract $operation.getterSetterReturnTypeName $operation.implementationSignature
        throws Exception;

#*  *##end
#**##end
#end
#if (!$operations.empty)

    // -------- Lifecycle Callbacks --------------

#**##foreach ($operation in $operations)
#*  *##if ($operation.lifecycleCallback)
    /**
$operation.getDocumentation("     * ")
     */
#*    *##if ($operation.postConstruct)
    @javax.annotation.PostConstruct
#*    *##elseif ($operation.preDestroy)
    @javax.annotation.PreDestroy
#*    *##end
#*    *##if ($service.stateful)
#*      *##if ($operation.postActivate)
    @jakarta.ejb.PostActivate
#*      *##elseif ($operation.prePassivate)
    @jakarta.ejb.PrePassivate
#*      *##end
#*    *##end
    $operation.visibility void ${operation.name}()
    {
        this.handle${stringUtils.capitalize(${operation.name})}();
    }

    /**
     * Performs the core logic for {@link ${esc.hash}${operation.name}()}
#if ($operation.returnTypePresent)
     * @return $operation.getterSetterReturnTypeName
#end
     */
    protected abstract $operation.getterSetterReturnTypeName handle${stringUtils.capitalize(${operation.name})}();

#*  *##end
#**##end
#end
#if ($service.stateful)

    // ------------ Destroy Method ------------

    /**
     * Remove lifecycle method
     */
#*  *##if ($service.seamComponent)
    @org.jboss.seam.annotations.Destroy
#*  *##end
    @jakarta.ejb.Remove
    public void destroy() {}
#end
}
