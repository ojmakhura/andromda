#set ($generatedFile = "${embeddedValue.packagePath}/${embeddedValue.name}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by EmbeddedValue.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
#if ($stringUtils.isNotBlank($embeddedValue.packageName))
package $embeddedValue.packageName;
#end

/**
$embeddedValue.getDocumentation(" * ")
 *
 * Migrated from using @jakarta.persistence.Embeddable annotation to mapping in orm.xml
 * Still needs the attribute annotations
 */
@jakarta.persistence.Embeddable
public abstract class $embeddedValue.name
#if($embeddedValue.generalization)
    extends $embeddedValue.generalization.fullyQualifiedName
#end
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${embeddedValue.serialVersionUID}L;

#if (!$embeddedValue.abstract)
    /**
     * Creates a new instance of {@link ${embeddedValue.name}}
     * taking all properties.
#foreach ($attribute in $embeddedValue.attributes)
     * @param ${attribute.name}
#end
     */
#**##set ($parenthesis = "(")
#**##if ($embeddedValue.attributes.empty)
#*  *##set ($parenthesis = "()")
#**##end
    public static $embeddedValue.name newInstance${parenthesis}#foreach ($attribute in $embeddedValue.attributes)$attribute.getterSetterTypeName ${attribute.name}#if($velocityCount != $embeddedValue.attributes.size()), #else)#end#end

    {
        $embeddedValue.implementationName object = new ${embeddedValue.implementationName}();
#**##foreach ($attribute in $embeddedValue.attributes)
        object.${attribute.setterName}($attribute.name);
#**##end
        object.initialize();
        return object;
    }

    /**
     * Creates a new instance from other $embeddedValue.name instance.
     * @param otherObject
     * @return ${embeddedValue.name}
     */
    public static ${embeddedValue.name} newInstance($embeddedValue.name otherObject)
    {
        if (otherObject != null)
        {
            return newInstance(#foreach ($attribute in $embeddedValue.attributes)
otherObject.${attribute.getterName}()#if($velocityCount != $embeddedValue.attributes.size()),#end#end);
        }
        return null;
    }

    /**
     * Constructor does nothing
     */
    protected ${embeddedValue.name}()
    {
        // Constructor does nothing
    }

#end
    /**
     * Hook for initializing the object in the subclass
     */
    protected void initialize()
    {
        // Empty initialization
    }

#**##foreach ($attribute in $embeddedValue.attributes)
    private $attribute.getterSetterTypeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     * @return #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end

     */
##
## If attribute is transient ONLY add Transient annotation
##
#*  *##if ($attribute.transient)
    @jakarta.persistence.Transient
#*  *##else
#*    *##if ($attribute.version)
    @jakarta.persistence.Version
#*    *##end
#*    *##if ($attribute.lob)
##
## Add if LOB type is specified - do not set LOB type as of PFD Spec - inferred from type.
## Also sepcify Fetch type in Basic annotation if set to EAGER since
## default fetch type for LOB annotation is LAZY.
##
    @jakarta.persistence.Lob
#*      *##if ($attribute.eager)
    @jakarta.persistence.Basic(fetch = jakarta.persistence.FetchType.EAGER)
#*      *##end
#*    *##end
    @jakarta.persistence.Column(name = "${attribute.columnName}"#if ($attribute.unique), unique = ${attribute.unique}#end#if (!$attribute.columnNullable), nullable = ${attribute.columnNullable}#end#**#, insertable = ${attribute.insertEnabled}, updatable = ${attribute.updateEnabled}#if ($attribute.columnLength), length = ${attribute.columnLength}#end#if ($attribute.columnDefinition), columnDefinition = "${attribute.columnDefinition}"#end#if ($attribute.columnPrecision), precision = ${attribute.columnPrecision}#end#if ($attribute.columnScale), scale = ${attribute.columnScale}#end)
#*    *##if (!$attribute.lob && $attribute.lazy)
##
## Only add the fetch type property for LAZY hints - default is EAGER
##
    @jakarta.persistence.Basic(fetch = jakarta.persistence.FetchType.LAZY)
#*    *##end
#*    *##if ($stringUtils.isNotBlank($attribute.temporalType))
    @jakarta.persistence.Temporal(jakarta.persistence.TemporalType.${attribute.temporalType})
#*    *##end
#*    *##if ($stringUtils.isNotBlank($attribute.enumerationType))
    @jakarta.persistence.Enumerated(jakarta.persistence.EnumType.${attribute.enumerationType})
#*    *##end
#*  *##end
##
## Override attribute type if attribute is a LOB and lob type is specified
##
    $attribute.visibility #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    /**
$embeddedValue.getDocumentation("     * ")
     * @param ${attribute.name}In
     */
#*  *##if ($embeddedValue.immutable)
    // protected setter, if subclass methods need to normalize the $embeddedValue.name
    protected void ${attribute.setterName}(#if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end ${attribute.name}In)
#*  *##else
    $attribute.visibility void ${attribute.setterName}(#if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end ${attribute.name}In)
#*  *##end
    {
        this.${attribute.name} = ${attribute.name}In;
    }

#end
#foreach ($operation in $embeddedValue.operations)
#set ($returnType = $operation.getterSetterReturnTypeName)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getterSetterTypeName
#end
#if ($operation.returnTypePresent)
     * @return $operation.getterSetterReturnTypeName
#end
#foreach ($exception in $operation.exceptionList)
     * @throws $exception.fullyQualifiedName
#end
     */
#*  *##if ($operation.exceptionsPresent)
    $operation.visibility abstract $operation.getterSetterReturnTypeName $signature
        throws $operation.exceptionList;
#*  *##else
    $operation.visibility abstract $operation.getterSetterReturnTypeName $signature;
#*  *##end

#end
    /**
     * Indicates if the argument is of the same type and all values are equal.
     */
#set ($attributeCollection = $embeddedValue.attributes)
#renderEqualsMethod($embeddedValue $embeddedValue.name $attributeCollection)

#renderHashCodeMethod($embeddedValue $attributeCollection)

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
#renderToStringMethod($embeddedValue $embeddedValue.name $attributeCollection)
}
