// license-header java merge-point
//
// Generated by SessionListener.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Modify as necessary. If deleted it will be regenerated.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedServiceListenerName,'.','/')}.java")

/**
 * Callback Listener for Session bean ${service.fullyQualifiedName}
 *
 * @see ${service.fullyQualifiedName}
 */
public class ${service.serviceListenerName}
{
    /**
     * Default public no-args constructor
     */
    public ${service.serviceListenerName}()
    {
        // empty constructor
    }

    @javax.annotation.PostConstruct
    public void postConstruct(javax.interceptor.InvocationContext ctx)
    {
        try
        {
            // post construct implementation
            ctx.proceed();
        }
        catch (Exception ex)
        {
            throw new RuntimeException(ex);
        }
    }

    @javax.annotation.PreDestroy
    public void preDestroy(javax.interceptor.InvocationContext ctx)
    {
        try
        {
            // pre destroy implementation
            ctx.proceed();
        }
        catch (Exception ex)
        {
            throw new RuntimeException(ex);
        }
    }
#if ($service.stateful)

    @jakarta.ejb.PostActivate
    public void postActivate(javax.interceptor.InvocationContext ctx)
    {
        try
        {
            // post construct implementation
            ctx.proceed();
        }
        catch (Exception ex)
        {
            throw new RuntimeException(ex);
        }
    }

    @jakarta.ejb.PrePassivate
    public void prePassivate(javax.interceptor.InvocationContext ctx)
    {
        try
        {
            // pre passivate implementation
            ctx.proceed();
        }
        catch (Exception ex)
        {
            throw new RuntimeException(ex);
        }
    }
#end
}
