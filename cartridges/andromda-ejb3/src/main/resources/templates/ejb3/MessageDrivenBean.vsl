// license-header java merge-point
/* Autogenerated by AndroMDA MessageDrivenBean.vsl in andromda-ejb3-cartridge on $umlUtils.date - do not edit */
#if ($stringUtils.isNotBlank($mdb.packageName))
package $mdb.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($mdb.fullyQualifiedMessageDrivenName,'.','/')}.java")

/**
 * Autogenerated JMS message driven EJB class for the ${mdb.messageDrivenName} bean.
 *
$mdb.getDocumentation(" * ")
 */

// The MessageDriven annotation is now fully configured in ejb-jar.xml
// This allows to set the class name to the MDB implementation class
// The annotation is commented to avoid multiple registration with the
// container.
// @jakarta.ejb.MessageDriven(activationConfig =
// {
//   @jakarta.ejb.ActivationConfigProperty(propertyName="destinationType", propertyValue="${mdb.destinationType}"),
//   @jakarta.ejb.ActivationConfigProperty(propertyName="destination", propertyValue="${mdb.destination}")#if ($mdb.acknowledgeMode || $mdb.messageSelector || $mdb.subscriptionDurability),#end
//
#if ($mdb.acknowledgeMode)
//  @jakarta.ejb.ActivationConfigProperty(propertyName="acknowledgeMode", propertyValue="${mdb.acknowledgeMode}")#if ($mdb.messageSelector || $mdb.subscriptionDurability),#end
//
#end
#if ($mdb.messageSelector)
//  @jakarta.ejb.ActivationConfigProperty(propertyName="messageSelector", propertyValue="${mdb.messageSelector}")#if ($mdb.subscriptionDurability),#end
//
#end
#if ($mdb.subscriptionDurability)
//  @jakarta.ejb.ActivationConfigProperty(propertyName="durability", propertyValue="${mdb.subscriptionDurability}")
#end
//}
//)

#set ($interceptors = $mdb.interceptorReferences)
#if ($collectionUtils.size($interceptors) >= 1 || $mdb.listenerEnabled)
#**##if ($mdb.listenerEnabled)
#*  *##set ($lifecycleCallback = "${mdb.fullyQualifiedMessageDrivenListenerName}.class")
#**##else
#*  *##set ($lifecycleCallback = "")
#**##end
// Lifecycle callback listeners and interceptors are defined in ejb-jar.xml
// javax.interceptor.Interceptors({$transform.getInterceptorsAsList(${interceptors}, ${lifecycleCallback})})
#end
#if ($service.excludeDefaultInterceptors)
// @javax.interceptor.ExcludeDefaultInterceptors
#end

#if ($mdb.transactionManagement)
@jakarta.ejb.TransactionManagement(jakarta.ejb.TransactionManagementType.${mdb.transactionManagement})
#end
#if (!$mdb.transactionManagementBean)
#**##if ($mdb.transactionType)
@jakarta.ejb.TransactionAttribute(jakarta.ejb.TransactionAttributeType.${mdb.transactionType})
#**##end
#end
#if ($mdb.runAs)
@javax.annotation.security.RunAs("${mdb.runAs}")
#end
public abstract class ${mdb.messageDrivenName}
    implements javax.jms.MessageListener
{
    // ------ Message Driven Context Injection ------

    @javax.annotation.Resource
    protected jakarta.ejb.MessageDrivenContext context;
#if ($service.transactionManagementBean)

    // ---------- User Transaction Injection ---------

    @javax.annotation.Resource
    protected javax.transaction.UserTransaction userTrans;
#end
#set ($constants = $mdb.getConstants(true))
#if (!$constants.empty)

    // ----------- Constant Definitions -----------

#**##foreach($constant in $constants)
    public static final $constant.type.fullyQualifiedName $constant.name = $constant.defaultValue;
#**##end
#end
#set ($references = $mdb.serviceReferences)
#if (!$references.empty)

    // ------ EJB Injection Definitions --------
#**##foreach ($dependency in $references)
#*  *##set ($reference = $dependency.targetElement)

    /**
     * Inject session EJB ${reference.name};
     */
    @jakarta.ejb.EJB
    protected ${reference.fullyQualifiedServiceRemoteInterfaceName} $stringUtils.uncapitalize(${reference.name});

#**##end
#end
#set ($envEntries = $mdb.getEnvironmentEntries(true))
#if (!$envEntries.empty)

    // ---------- Env Entry Injection -----------

#**##foreach ($envEntry in $envEntries)
    /**
     * The $envEntry.name resource injection
     */
    @javax.annotation.Resource(name = "${envEntry.name}")
    protected $envEntry.type.fullyQualifiedName $envEntry.name;

#**##end
#end

    // --------- Default Constructor ----------

    public ${mdb.messageDrivenName}()
    {
        // Empty implementation
    }


#set ($operations = $mdb.operations)
#if (!$operations.empty)

    // -------- User Defined Methods  --------------

#**##foreach ($operation in $operations)
#*  *##set ($visibility = $operation.visibility)
    /**
$operation.getDocumentation("     * ")
     */
#*  *##if ($operation.postConstruct)
    @javax.annotation.PostConstruct
#*  *##elseif ($operation.preDestroy)
    @javax.annotation.PreDestroy
#*  *##end
#*  *##if ($operation.exceptionsPresent)
    $visibility abstract $operation.getterSetterReturnTypeName $operation.signature throws $operation.exceptionList;
#*  *##else
    $visibility abstract $operation.getterSetterReturnTypeName $operation.signature;
#*  *##end

#**##end
#end
}
