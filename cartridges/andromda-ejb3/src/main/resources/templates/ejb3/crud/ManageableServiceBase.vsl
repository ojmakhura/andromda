// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by crud/ManageableServiceBase.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
#set ($generatedFile = "${manageable.manageableServiceBaseFullPath}.java")
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
#if (!$manageable.identifiers.empty)
#**##set ($identifier = $manageable.manageableIdentifier)
#end
package $manageable.manageablePackageName;

/**
 * Autogenerated EJB manageable session bean class ${manageable.manageableServiceName}.
 */
/**
 * Do not specify the jakarta.ejb.${manageable.type} annotation
 * Instead, define the session bean in the ejb-jar.xml descriptor
 * jakarta.ejb.${manageable.type}
 */
@jakarta.ejb.TransactionAttribute(jakarta.ejb.TransactionAttributeType.REQUIRED)
@jakarta.ejb.Remote({${manageable.fullyQualifiedManageableServiceName}.class})
#if ($manageable.securityEnabled)
#**##if ($stringUtils.isNotBlank(${manageable.manageableRolesAllowed}))
@javax.annotation.security.RolesAllowed({${manageable.manageableRolesAllowed}})
#**##end
#end
public final class $manageable.manageableServiceBaseName
    implements $manageable.manageableServiceName
{
    // ------ Session Context Injection ------

    @javax.annotation.Resource
    protected jakarta.ejb.SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context #if ($manageable.defaultPersistenceContextUnitName)${manageable.defaultPersistenceContextUnitName}#end

     */
    @jakarta.persistence.PersistenceContext#if ($manageable.defaultPersistenceContextUnitName)(unitName = "${manageable.defaultPersistenceContextUnitName}")#end

    protected jakarta.persistence.EntityManager emanager;

#set ($associatedClasses = $manageable.allAssociatedClasses)
#if (!$associatedClasses.empty)
    // ------------ Private Operations ----------

#**##foreach ($associatedClass in $associatedClasses)
    private java.util.List<${associatedClass.fullyQualifiedEntityName}> find${associatedClass.name}ByIds(${associatedClass.identifier.type.fullyQualifiedName}[] ids)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        try
        {
            jakarta.persistence.Query query = emanager.createQuery("select entity from ${associatedClass.entityName} as entity where entity.${associatedClass.identifier.name} in (:${associatedClass.identifier.name})");
            query.setParameter("${associatedClass.identifier.name}", java.util.Arrays.asList(ids));
            return query.getResultList();
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
    }

#**##end
#end
    // ------------ CRUD Operations -------------

#if ($manageable.create)
    /**
     * Create operations
     *
     * @return $manageable.fullyQualifiedName
     * @throws $manageable.fullyQualifiedManageableServiceCreateExceptionName
     */
    public $manageable.fullyQualifiedName create($memberList)
        throws ${manageable.fullyQualifiedManageableServiceCreateExceptionName}
    {
#**##foreach ($member in $manageable.manageableMembers)
#*  *##if ($member.required && !$member.type.primitive && !($member.identifier && !$member.display))
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.create(${memberList}) - '${member.name}' can not be null");
        }

#*  *##end
#**##end
        final ${manageable.fullyQualifiedName} entity = new ${manageable.fullyQualifiedName}();
#**##foreach ($member in $manageable.manageableAttributes)
##
## Ignore arg where the corresponding entity attribute is modelled as a version
##
#*  *##if (!$member.version)
        entity.${member.setterName}($member.name);
#*  *##end
#**##end

        try
        {
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
#*    *##set ($memberEntityName = "${member.name}Entities")
            final java.util.List<${member.type.fullyQualifiedName}> $memberEntityName =
                ($member.name != null && ${member.name}.length > 0)
                    ? this.find${member.type.name}ByIds($member.name)
                        : java.util.Collections.EMPTY_LIST;

#*  *##else
#*    *##set ($memberEntityName = "${member.name}Entity")
            $member.type.fullyQualifiedName $memberEntityName = null;
            if ($member.name != null)
            {
                $memberEntityName = ($member.type.fullyQualifiedName)emanager.find(${member.type.fullyQualifiedName}.class, #if ($member.type.primitive)new ${member.type.wrapperName}($member.name)#else${member.name}#end);
            }
#*  *##end

            if ($memberEntityName != null)
            {
#*    *##if ($member.many && !$member.list)
                entity.${member.setterName}(${member.getCollectionTypeImplementation($memberEntityName)});
#*    *##else
                entity.${member.setterName}($memberEntityName);
#*    *##end
#*  *##if ($member.many2Many)
#*    *##if ($member.otherEnd.navigable)

                // set the other ends of the many2many association too
                for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
                {
                    final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
                    element.${member.otherEnd.getterName}().add(entity);
                }
#*    *##else
                // we ought to be setting the other end of the many2many association here
                // but the navigability on the other end has been disabled, therefore doing
                // the following would break compilation: element.${member.otherEnd.getterName}()
                // the result is that only one end of this association will be set
#*    *##end
#*  *##end
            }

#**##end

            emanager.persist(entity);
            emanager.flush();
            return entity;
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceCreateExceptionName}(ex);
        }
    }

#end
#if ($manageable.read)
    /**
     * Entity read operation
     *
     * @return $manageable.fullyQualifiedEntityName
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public $manageable.fullyQualifiedEntityName readById($identifier.type.fullyQualifiedName $identifier.name)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        try{
            return (${manageable.fullyQualifiedEntityName})emanager.find(${manageable.fullyQualifiedEntityName}.class, ${identifier.name});
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
    }

    /**
     * Read operation
     *
     * @return java.util.List
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.List<${manageable.fullyQualifiedEntityName}> read($memberList)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        String logicalOperator = "";
        StringBuilder buf = new StringBuilder("from ${manageable.entityName} as entity");
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
        buf.append(" join entity.${member.name} as ${member.type.name} ");
#*  *##end
#**##end
        buf.append(" where ");
#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if ($member.type.primitive)
        buf.append(logicalOperator);
#*    *##if ($member.type.booleanType)
        if ($member.name)
        {
            buf.append("entity.${member.name} is true");
        }
        else
        {
            buf.append("entity.${member.name} is not true");
        }
#*    *##else
        buf.append("entity.${member.name} = :${member.name}");
#*    *##end
        logicalOperator = " and ";
#*  *##else
        if ($member.name != null)
        {
            buf.append(logicalOperator);
#*    *##if ($member.type.booleanType)
            if (${member.name}.booleanValue())
            {
                buf.append("entity.${member.name} is true");
            }
            else
            {
                buf.append("entity.${member.name} is not true");
            }
#*    *##elseif ($member.type.dateType)
            final java.util.Calendar calendar = new java.util.GregorianCalendar();
            calendar.setTime($member.name);
            if (calendar.get(java.util.Calendar.HOUR) != 0
                 || calendar.get(java.util.Calendar.MINUTE) != 0
                 || calendar.get(java.util.Calendar.SECOND) != 0
                 || calendar.get(java.util.Calendar.MILLISECOND) != 0)
            {
                buf.append("entity.${member.name} = :${member.name}");
            }
            else
            {
                buf.append("entity.${member.name} between = :${member.name}Start and :${member.name}End");
            }
#*    *##elseif ($member.type.stringType)
            buf.append("entity.${member.name} like :${member.name}");
#*    *##else
            buf.append("entity.${member.name} = :${member.name}");
#*    *##end
            logicalOperator = " and ";
        }
#*  *##end
#**##end
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
        if ($member.name != null && ${member.name}.length > 0)
        {
            buf.append(logicalOperator);
            buf.append("${member.type.name} IN (:${member.name})");
            logicalOperator = " and ";
        }
#*  *##else
        if ($member.name != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.${member.name} = :${member.name}");
            logicalOperator = " and ";
        }
#*  *##end
#**##end

        try
        {
            final jakarta.persistence.Query query = emanager.createQuery(buf.toString());
#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if ($member.type.primitive)
#*    *##if ($member.type.booleanType)
            query.setParameter("$member.name", new ${member.type.wrapperName}($member.name));
#*    *##end
#*  *##else
#*    *##if ($member.type.booleanType)
            if ($member.name != null)
            {
#*      *##if ($member.type.dateType)
                // we check whether or not the user supplied time information within this particular date argument
                // if he/she didn't we assume he/she wishes to search in the scope of the entire day
                final java.util.Calendar calendar = new java.util.GregorianCalendar();
                calendar.setTime($member.name);
                if ( calendar.get(java.util.Calendar.HOUR) != 0
                     || calendar.get(java.util.Calendar.MINUTE) != 0
                     || calendar.get(java.util.Calendar.SECOND) != 0
                     || calendar.get(java.util.Calendar.MILLISECOND) != 0 )
                {
##
## Need to fix the temporal type once the metafacde engine is fixed to detect the EJB3ManageableEntityAttributeFacade
##
                    query.setParameter("$member.name", ${member.name}, jakarta.persistence.TemporalType.#if ($stringUtils.isBlank(${member.temporalType}))TIMESTAMP#else${member.temporalType}#end);
                }
                else
                {
##
## Need to fix the temporal type once the metafacde engine is fixed to detect the EJB3ManageableEntityAttributeFacade
##
                    calendar.add(java.util.Calendar.DATE, 1);
                    query.setParameter("${member.name}Start", $member.name, jakarta.persistence.TemporalType.#if ($stringUtils.isBlank(${member.temporalType}))TIMESTAMP#else${member.temporalType}#end);
                    query.setParameter("${member.name}End", calendar.getTime(), jakarta.persistence.TemporalType.#if ($stringUtils.isBlank(${member.temporalType}))TIMESTAMP#else${member.temporalType}#end);
                }
#*      *##else
                query.setParameter("$member.name", $member.name);
#*      *##end
            }
#*    *##end
#*  *##end
#**##end
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
            if ($member.name != null && ${member.name}.length > 0)
            {
                query.setParameter("$member.name", java.util.Arrays.asList($member.name));
            }
#*  *##else
#*    *##if ($member.type.primitive)
            query.setParameter("$member.name", new ${member.manageableIdentifier.type.wrapperName}($member.name));
#*    *##else
            if ($member.name != null)
            {
                query.setParameter("$member.name", $member.name);
            }
#*    *##end
#*  *##end
#**##end
#**##if ($manageable.maximumListSize > 0)
            query.setMaxResults($manageable.maximumListSize);
#**##end
            return query.getResultList();
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
    }

    /**
     * Read all operation
     *
     * @return java.util.List
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.List<${manageable.fullyQualifiedEntityName}> readAll()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        try
        {
#set ($findAllQuery = "select entity from ${manageable.entityName} as entity")
#foreach ($member in $manageable.manageableAssociationEnds)
##
## add left join fetch to query to retrieve many side of association ends
## this is only required if the ends are not initialised further down
##
#**##if ($member.type.manageableDisplayAttribute.name == $member.type.identifier.name)
#*  *##if ($member.many)
#*    *##set ($findAllQuery = "${findAllQuery} left join fetch entity.${member.name}")
#*  *##end
#**##end
#end
            jakarta.persistence.Query query = emanager.createQuery("${findAllQuery}");
#if ($manageable.maximumListSize > 0)
            query.setMaxResults($manageable.maximumListSize);
#end
            java.util.List<${manageable.fullyQualifiedEntityName}> entities = query.getResultList();
#foreach ($member in $manageable.manageableAssociationEnds)
#**##if ($member.type.manageableDisplayAttribute.name != $member.type.identifier.name)
            org.apache.commons.collections.CollectionUtils.transform(entities, new org.apache.commons.collections.Transformer()
            {
                public Object transform(final Object object)
                {
                    ${manageable.fullyQualifiedEntityName} result = (${manageable.fullyQualifiedEntityName})object;
                    if (result.${member.getterName}() != null)
                    {
#*  *##if ($member.many)
                        java.util.Collection<${member.type.manageableDisplayAttribute.type.fullyQualifiedName}> $member.labelName = java.util.Collections.synchronizedCollection(new java.util.ArrayList<${member.type.manageableDisplayAttribute.type.fullyQualifiedName}>());
                        for (final java.util.Iterator<${member.type.fullyQualifiedEntityName}> iterator = result.${member.getterName}().iterator(); iterator.hasNext();)
                        {
                            ${member.type.fullyQualifiedEntityName} entity = iterator.next();
                            synchronized (${member.labelName})
                            {
                                ${member.labelName}.add(entity.${member.type.manageableDisplayAttribute.getterName}());
                            }
                        }
                        result.${member.setterLabelName}(${member.labelName});
#*  *##else
                        result.${member.setterName}#if ($member.many)Labels#else#**#Label#end(result.${member.getterName}().${member.type.manageableDisplayAttribute.getterName}());
#*  *##end
                    }
                    return result;
                }
            });
#**##end
#end
            return entities;
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
    }

#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if ($member.manageableGetterAvailable)
    /**
     * Read BLOB type fields
     *
     * @return $member.type.fullyQualifiedName
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public $member.type.fullyQualifiedName ${member.getterName}($identifier.type.fullyQualifiedName $identifier.name)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
#*    *##if (!$member.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.${member.getterName}($identifier.type.fullyQualifiedName $identifier.name) - '${identifier.name}' can not be null");
        }

#*    *##end
        try
        {
            final jakarta.persistence.Query query = emanager.createNativeQuery("select entity.${member.name} from $manageable.entityName as entity where entity.${identifier.name} = :$identifier.name");
#*    *##if ($identifier.type.primitive)
            query.setParameter("$identifier.name", new ${identifier.type.wrapperName}($identifier.name));
#*    *##else
            query.setParameter("$identifier.name", $identifier.name);
#*    *##end
            return ($member.type.fullyQualifiedName)query.getSingleResult();
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
    }

#*  *##end
#**##end
#**##if (!$manageable.manageableAssociationEnds.empty)
    /**
     * Read backing list operation
     *
     * @return java.util.Map
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.Map readBackingLists()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        final java.util.Map lists = new java.util.HashMap();

        try
        {
#*  *##foreach ($member in $manageable.manageableAssociationEnds)
            lists.put("${member.name}", emanager.createQuery("select item.${member.type.identifier.name}, item.${member.type.manageableDisplayAttribute.name} from ${member.type.entityName} as item order by item.${member.type.manageableDisplayAttribute.name}").getResultList());
#*  *##end
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceReadExceptionName}(ex);
        }
        return lists;
    }

#**##end
#end
#if ($manageable.update)
    /**
     * Update Operation
     *
     * @return $manageable.fullyQualifiedName
     * @throws $manageable.fullyQualifiedManageableServiceUpdateExceptionName
     */
    public $manageable.fullyQualifiedName update($memberList)
        throws ${manageable.fullyQualifiedManageableServiceUpdateExceptionName}
    {
#**##foreach ($member in $manageable.manageableMembers)
#*  *##if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.update($memberList) - '${member.name}' can not be null");
        }

#*  *##end
#**##end
        final $manageable.fullyQualifiedName entity = (${manageable.fullyQualifiedName})emanager.find(${manageable.fullyQualifiedName}.class, #if ($identifier.type.primitive)new ${identifier.type.wrapperName}($identifier.name)#else${identifier.name}#end);
#**##foreach ($member in $manageable.manageableAttributes)
##
## Ignore arg where the corresponding entity attribute is modelled as a version
## The identifier is already present since we loaded the entity
##
#*  *##if (!$member.identifier && !$member.version)
        entity.${member.setterName}(${member.name});
#*  *##end
#**##end

        try
        {
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
#*    *##set ($memberEntityName = "${member.name}Entities")
            final java.util.List<${member.type.fullyQualifiedName}> $memberEntityName =
                ($member.name != null && ${member.name}.length > 0)
                    ? this.find${member.type.name}ByIds($member.name)
                        : java.util.Collections.EMPTY_LIST;

#*  *##else
#*    *##set ($memberEntityName = "${member.name}Entity")
            $member.type.fullyQualifiedName $memberEntityName = null;
            if ($member.name != null)
            {
                $memberEntityName = (${member.type.fullyQualifiedName})emanager.find(${member.type.fullyQualifiedName}.class, #if ($memeber.type.primitive)new ${member.type.wrapperName}($member.name)#else${member.name}#end);
            }
#*  *##end

            if ($memberEntityName != null)
            {
#*    *##if ($member.many && !$member.list)
                entity.${member.setterName}(${member.getCollectionTypeImplementation($memberEntityName)});
#*    *##else
                entity.${member.setterName}($memberEntityName);
#*    *##end
#*  *##if ($member.many2Many)
#*    *##if ($member.otherEnd.navigable)
                // set the other ends of the many2many association too
                for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
                {
                    final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
                    element.${member.otherEnd.getterName}().add(entity);
                }
#*    *##else
                // we ought to be setting the other end of the many2many association here
                // but the navigability on the other end has been disabled, therefore doing
                // the following would break compilation: element.${member.otherEnd.getterName}()
                // the result is that only one end of this association will be set
#*    *##end
#*  *##end
            }
#**##end

            emanager.merge(entity);
            emanager.flush();
            return entity;
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceUpdateExceptionName}(ex);
        }
    }

#end
#if ($manageable.delete)
    /**
     * Delete operation
     *
     * @throws $manageable.fullyQualifiedManageableServiceDeleteExceptionName
     */
    public void delete(${identifier.type.fullyQualifiedName}[] ids)
        throws ${manageable.fullyQualifiedManageableServiceDeleteExceptionName}
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${identifier.type.fullyQualifiedName}[] ids) - 'ids' can not be null");
        }

        try
        {
            final jakarta.persistence.Query queryObject = emanager.createQuery("delete from $manageable.name where $identifier.name in (:ids)");
            queryObject.setParameter("ids", java.util.Arrays.asList(ids));
            queryObject.executeUpdate();
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceDeleteExceptionName}(ex);
        }
    }

#end
}