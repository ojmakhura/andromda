// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * Represents a JSF use case.
 * MetafacadeLogic implementation for AngularUseCase.
 *
 * @see AngularUseCase
 */
public class AngularUseCaseLogicImpl
    extends AngularUseCaseLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularUseCaseLogicImpl
     * @see AngularUseCase
     */
    public AngularUseCaseLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * The path to which this use case points.
     * @see AngularUseCase#getPath()
     */
    protected String handleGetPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The root path for this use case (this is the path the directory containing the use case's
     * resources).
     * @see AngularUseCase#getPathRoot()
     */
    protected String handleGetPathRoot()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name that will cause a forward to use case.
     * @see AngularUseCase#getForwardName()
     */
    protected String handleGetForwardName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * A map with keys sorted alphabetically, normalized across all different use-cases, views, etc.
     * @see AngularUseCase#getAllMessages()
     */
    protected Map handleGetAllMessages()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The title message key for this use-case.
     * @see AngularUseCase#getTitleKey()
     */
    protected String handleGetTitleKey()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The title message value for this use-case.
     * @see AngularUseCase#getTitleValue()
     */
    protected String handleGetTitleValue()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name of the action class that forwards to this use case.
     * @see AngularUseCase#getActionClassName()
     */
    protected String handleGetActionClassName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The fully qualified path to the action class that forwards to this use case.
     * @see AngularUseCase#getFullyQualifiedActionClassPath()
     */
    protected String handleGetFullyQualifiedActionClassPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The name of the action on the controller that executions this use case.
     * @see AngularUseCase#getControllerAction()
     */
    protected String handleGetControllerAction()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The fully qualified name of the action class that forwards to this use case.
     * @see AngularUseCase#getFullyQualifiedActionClassName()
     */
    protected String handleGetFullyQualifiedActionClassName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The key under which to store the action form passed along in this in this use-case.
     * @see AngularUseCase#getFormKey()
     */
    protected String handleGetFormKey()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The path of the initial target going into this use case.
     * @see AngularUseCase#getInitialTargetPath()
     */
    protected String handleGetInitialTargetPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Indicates whether or not the initial target of this use case is a view or not.
     * @see AngularUseCase#isInitialTargetView()
     */
    protected boolean handleIsInitialTargetView()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates that at least one client/server parameter found in the collection of existing
     * use-cases requires validation.
     * @see AngularUseCase#isApplicationValidationRequired()
     */
    protected boolean handleIsApplicationValidationRequired()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not at least one parameter in this use-case require validation.
     * @see AngularUseCase#isValidationRequired()
     */
    protected boolean handleIsValidationRequired()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not at least one view in the use case has the same name as this use
     * case.
     * @see AngularUseCase#isViewHasNameOfUseCase()
     */
    protected boolean handleIsViewHasNameOfUseCase()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Indicates whether or not this is a front-end registration use case.  Only one use case can be
     * labeled as a 'registration' use case.
     * @see AngularUseCase#isRegistrationUseCase()
     */
    protected boolean handleIsRegistrationUseCase()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * The name of the class that stores all the forwards paths.
     * @see AngularUseCase#getForwardsClassName()
     */
    protected String handleGetForwardsClassName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Constains all forwards includes regular FrontEndForwards and all actiion forwards.
     * @see AngularUseCase#getAllForwards()
     */
    protected List handleGetAllForwards()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The forward name for the portlet 'view' page.
     * @see AngularUseCase#getPortletViewForwardName()
     */
    protected String handleGetPortletViewForwardName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The forward name for the portlet 'edit' page.
     * @see AngularUseCase#getPortletEditForwardName()
     */
    protected String handleGetPortletEditForwardName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The forward name for the portlet 'help' page.
     * @see AngularUseCase#getPortletHelpForwardName()
     */
    protected String handleGetPortletHelpForwardName()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The path to the portlet 'view' page.
     * @see AngularUseCase#getPortletViewPath()
     */
    protected String handleGetPortletViewPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The path to the portlet 'edit' page.
     * @see AngularUseCase#getPortletEditPath()
     */
    protected String handleGetPortletEditPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * The path to the 'help' page of the portlet.
     * @see AngularUseCase#getPortletHelpPath()
     */
    protected String handleGetPortletHelpPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Retrieves all navigation rules for the faces-config.xml
     * @see AngularUseCase#getNavigationRules()
     */
    protected Collection handleGetNavigationRules()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * TODO: Model Documentation for
     * AngularUseCase.getNavigationChildren
     * @see AngularUseCase#getNavigationChildren()
     */
    protected Collection handleGetNavigationChildren()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * TODO: Model Documentation for
     * AngularUseCase.getNavigationParents
     * @see AngularUseCase#getNavigationParents()
     */
    protected Collection handleGetNavigationParents()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * TODO: Model Documentation for
     * AngularUseCase.getActionRoles
     * @see AngularUseCase#getActionRoles()
     */
    protected String handleGetActionRoles()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Represents a JSF use case.
     * @see AngularUseCase#getForwards()
     */
    protected List<AngularForward> handleGetForwards()
    {
        // TODO add your implementation here!
        return null;
    }

    /**
     * Represents a JSF use case.
     * @see AngularUseCase#getActionForwards()
     */
    protected List<AngularAction> handleGetActionForwards()
    {
        // TODO add your implementation here!
        return null;
    }

    /**
     * Represents a JSF use case.
     * @see AngularUseCase#getAllViews()
     */
    protected Collection<AngularView> handleGetAllViews()
    {
        // TODO add your implementation here!
        return null;
    }

    /**
     * The use case to which the portlet preferences belongs.
     * @see AngularUseCase#getPreferences()
     */
    protected Object handleGetPreferences()
    {
        // TODO add your implementation here!
        return null;
    }

    /**
     * Represents a JSF use case.
     * @see AngularUseCase#getRegistrationUseCases()
     */
    protected List<AngularUseCase> handleGetRegistrationUseCases()
    {
        // TODO add your implementation here!
        return null;
    }
}