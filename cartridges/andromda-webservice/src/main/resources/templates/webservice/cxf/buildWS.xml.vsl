<?xml version="1.0" encoding="UTF-8"?>
<!-- Bob Fields 1/11/08.
This uses the MDA webservice cartridge output (wsdl, services, and TOs) and
runs CXF wsdl2java and java2wsdl against the MDA outputs, into the CXF subdirectory.
This fills in the missing java objects (ObjectFactory, Request/Response wrappers)
and allows double-checking of both java and wsdl code generation and all annotations and refernces
(JAXWS may require JAXB wrapper objects under certain circumstances, not picked up by the MDA tool). -->
<!-- The BuildWSNew.xml file is overwritten each time. The BuildWS.xml file is not -->
<!-- Generated by andromda-webservice cartridge (cxf/buildWS.xml.vsl) on $webServiceUtils.date DO NOT EDIT -->
<project name="${applicationName}-wsgen" default="wsgenall" basedir=".">
  <description>Create Java and wsdl from AndroMDA Webservice Cartridge output</description>
  <!-- set global properties for this build -->
  <property environment="env"/>
  <property file="../mda/build.properties"/>
  <property name="m2repo" value="${env.M2_REPO}"/>
  <property name="m2home" value="${env.M2_HOME}"/>
  <property name="m2opts" value="${env.MAVEN_OPTS}"/>
  <property name="cxf.home" value="${env.CXF_HOME}"/>

  <path id="cxf1.classpath">
    <!-- These dependencies allow CXF 2+ utilities to run outside of maven with no additional classpath >
    <pathelement location="${m2repo}/com/sun/xml/bind/jaxb-xjc/2.2.1.1/jaxb-xjc-2.2.1.1.jar"/>
    <pathelement location="${m2repo}/com/sun/xml/bind/jaxb-impl/2.2.1.1/jaxb-impl-2.2.1.1.jar"/>
    <pathelement location="${m2repo}/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.jar"/>
    <pathelement location="${m2repo}/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
    <pathelement location="${m2repo}/javax/xml/bin/jaxb-api/2.2.1/jaxb-api-2.2.1.jar"/>
    <pathelement location="${m2repo}/org/apache/neethi/neethi/3.0.0/neethi-3.0.0.jar"/>
    <pathelement location="${m2repo}/org/apache/ws/xmlschema/xmlschema-core/2.0/xmlschema-core-2.0.jar"/>
    <pathelement location="${m2repo}/wsdl4j/wsdl4j/1.6.2/wsdl4j-1.6.2.jar"/ -->
    <pathelement location="${m2repo}/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar"/>
    <pathelement location="${m2repo}/org/apache/cxf/cxf-rt-frontend-jaxws/${cxf.version}/cxf-rt-frontend-jaxws-${cxf.version}.jar"/>
#if($stringUtils.isNotBlank(${cxf.xjc.version}) && ${cxf.xjc.version}>"2.2")
#set($xjcplugins="xjcplugins/")
#else
#set($xjcplugins="")
#end
    <pathelement location="${m2repo}/org/apache/cxf/${xjcplugins}cxf-xjc-dv/${cxf.xjc.version}/cxf-xjc-dv-${cxf.xjc.version}.jar"/>
    <pathelement location="${m2repo}/org/apache/cxf/${xjcplugins}cxf-xjc-ts/${cxf.xjc.version}/cxf-xjc-ts-${cxf.xjc.version}.jar"/>
    <pathelement location="${m2repo}/org/apache/velocity/velocity/1.6.4/velocity-1.6.4.jar"/>
#if ($stringUtils.isNotBlank($xjcArguments))
    <fileset dir="${m2repo}/org/andromda/thirdparty/jaxb2_commons">
        <include name="**/*.jar"/>
        <exclude name="**/*-sources.jar"/>
        <exclude name="**/*-javadoc.jar"/>
    </fileset>
#end
    <!-- It leaves some needed provided classes out of the runtime classpath. -->
    <path path="${compile_classpath}"/>
    <path path="${runtime_classpath}"/>
  </path>
  <path id="project1.classpath">
    <pathelement location="${m2repo}/org/hibernate/hibernate-core/${hibernate.version}/hibernate-core-${hibernate.version}.jar"/>
    <pathelement location="${m2repo}/org/springframework/spring-core/${spring.version}/spring-core-${spring.version}.jar"/>
    <pathelement location="${m2repo}/jboss/jboss-j2ee/4.2.2.GA/jboss-j2ee-4.2.2.GA.jar"/>
    <path refid="cxf1.classpath"/>
    <fileset dir="${andromda.project}/webservice">
        <include name="/src/main/resources/log4j.xml"/>
    </fileset>
  </path>

  <target name="init">
    <!-- Create the time stamp for logging purposes -->
    <tstamp>
        <format property="NOW" pattern="HHmmss" locale="en"/>
    </tstamp>
    <tstamp/>
    <echo message="m2repo=${m2repo}"/>
    <echo message="m2home=${m2home}"/>
    <echo message="cxf.version=${cxf.version}"/>
    <echo message="maven.compile.classpath=${compile_classpath}"/>
    <echo message="maven.runtime.classpath=${runtime_classpath}"/>
  </target>

  <target name="wsgenall" depends="init"
        description="Call wsgen for each Service">
    <!-- Delete the wsgen logs -->
    <!--delete includeEmptyDirs="false" failonerror="false" quiet="true">
      <fileset dir="${project}/webservice">
        <include name="**/*.log"/>
      </fileset>
    </delete-->
    <record name="${project}/mda/wsgen${NOW}.log" action="start"/>
    <echo message="running wsgen for each generated webservice class"/>
    <!-- wsgen throws an exception if directories don't exist -->
    <mkdir dir="${andromda.project}/common/src/main/java"/>
    <mkdir dir="${andromda.project}/common/src/main/resources"/>
    <mkdir dir="${andromda.project}/common/src/test/java"/>
    <mkdir dir="${andromda.project}/common/src/test/resources"/>
    <mkdir dir="${andromda.project}/common/target/classes"/>
    <mkdir dir="${andromda.project}/common/target/src/main/java"/>
    <mkdir dir="${andromda.project}/core/src/main/java"/>
    <mkdir dir="${andromda.project}/core/src/main/resources"/>
    <mkdir dir="${andromda.project}/core/src/test/java"/>
    <mkdir dir="${andromda.project}/core/src/test/resources"/>
    <mkdir dir="${andromda.project}/core/target/classes"/>
    <mkdir dir="${andromda.project}/core/target/src/main/java"/>
    <mkdir dir="${andromda.project}/core/target/src/main/resources"/>
    <mkdir dir="${andromda.project}/CXF/src/main/java"/>
    <mkdir dir="${andromda.project}/CXF/src/main/resources"/>
    <mkdir dir="${andromda.project}/CXF/src/test/java"/>
    <mkdir dir="${andromda.project}/CXF/src/test/resources"/>
    <mkdir dir="${andromda.project}/CXF/target/classes"/>
    <mkdir dir="${andromda.project}/CXF/target/src/main/java"/>
    <mkdir dir="${andromda.project}/CXF/src/main/webapp/WEB-INF/lib"/>
    <mkdir dir="${andromda.project}/CXF/src/main/webapp/WEB-INF/wsdl"/>
    <mkdir dir="${andromda.project}/CXF/src/main/webapp/WEB-INF/classes"/>
    <mkdir dir="${andromda.project}/webservice/src/main/java"/>
    <mkdir dir="${andromda.project}/webservice/src/main/resources"/>
    <mkdir dir="${andromda.project}/webservice/src/test/java"/>
    <mkdir dir="${andromda.project}/webservice/src/test/resources"/>
    <mkdir dir="${andromda.project}/webservice/target/classes"/>
    <mkdir dir="${andromda.project}/webservice/target/src/main/java"/>
    <mkdir dir="${andromda.project}/webservice/src/main/webapp/WEB-INF/lib"/>
    <mkdir dir="${andromda.project}/webservice/src/main/webapp/WEB-INF/wsdl"/>
    <mkdir dir="${andromda.project}/webservice/src/main/webapp/WEB-INF/classes"/>

    <!--delete>
        <fileset dir="${andromda.project}/CXF/target/src" includes="**/*"/>
    </delete-->
    <delete>
        <fileset dir="${andromda.project}/CXF/src/main/webapp/WEB-INF/classes" includes="**/*"/>
    </delete>
    <!-- Run wsgen (CXF wsdl2java) for each generated webservice class -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <antcall target="wsgenjava">
      <param name="package" value="$service.packageName"/>
      <param name="service" value="$service.name"/>
      <param name="namespace" value="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"/>
      <param name="dir" value="$dir"/>
    </antcall>
#end
#end
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
#if (!$service.allowedOperations.empty)
    <!-- Copy CXF generated ObjectFactory to common project so they can be referenced by implementation without circular dependencies -->
    <copy todir="${andromda.project}/common/target/src/main/java/$dir" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java/$dir">
        <include name="ObjectFactory.java"/>
        <!--include name="package-info.java"/-->
      </fileset>
    </copy>
#end
#end
#end

    <!-- Copy initial log4j settings to webservice and CXF projects for embedded server test -->
    <copy file="${andromda.project}/mda/log4j.xml" todir="${andromda.project}/core/src/test/resources" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false"/>
    <copy file="${andromda.project}/mda/log4j.xml" todir="${andromda.project}/webservice/src/main/resources" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false"/>
    <copy file="${andromda.project}/mda/log4j.xml" todir="${andromda.project}/CXF/src/main/resources" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false"/>
    <!-- Copy CXF generated ObjectFactory to common project alongside generated SEI interface and implementation -->
    <copy todir="${andromda.project}/common/target/src/main/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
        <include name="**/ObjectFactory.java"/>
        <include name="org/apache/**"/>
        <include name="org/oasis*/**"/>
        <include name="org/w3*/**"/>
        <include name="org/xmlsoap/**"/>
        <!--include name="**/*Fault.java"/-->
        <!--include name="**/package-info.java"/-->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
        <exclude name="${dir}/ObjectFactory*.java"/>
        <exclude name="${dir}/package-info.java"/>
#end
#end
      </fileset>
    </copy>
    <!-- Copy CXF generated Service Exception FaultBeans to webservice project -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && !$service.allowedOperationExceptions.empty && $service.jaxwsCount>0)
    <copy todir="${andromda.project}/common/target/src/main/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
#foreach ($exception in $service.allowedOperationExceptions)
##        <!-- $faultName $exception -->
#set ($faultName = $exception.name.replace("Exception", "Fault"))
        <include name="**/${faultName}.java"/>
#end
      </fileset>
    </copy>
#end
#end
    <!-- Copy CXF generated Test Client, Test Server, and WS Endpoint Client files to webservice project -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <copy todir="${andromda.project}/webservice/src/test/java/$dir" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java/$dir">
        <include name="**/*_Client.java"/>
        <include name="**/*_Server.java"/>
        <include name="**/*${seiSuffix}Client.java"/>
      </fileset>
    </copy>
#end
#end
  </target>

  <target name="wsdlgenall" depends="init"
        description="Call java2ws (create client) for each Service, modify URL">

#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <antcall target="wsgenwsdl">
      <param name="package" value="$service.packageName"/>
      <param name="service" value="$service.name"/>
      <param name="namespace" value="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"/>
    </antcall>
#end
#end
    <!-- Copy Andromda generated Test Client and WS Endpoint Client files to CXF project -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
    <copy todir="${andromda.project}/CXF/src/test/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src/test/java">
        <include name="**/*_WSClient.java"/>
        <include name="**/*WSITCase.java"/>
      </fileset>
    </copy>
    <copy todir="${andromda.project}/CXF/src/test/resources" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src/test/java">
        <include name="**/cxf*.xml"/>
      </fileset>
    </copy>
#end
#end
    <!-- Copy default value generator and test client to CXF webservice project for client testing -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <copy todir="${andromda.project}/CXF/src/test/java" overwrite="true" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src">
        <include name="$dir/test/${service.name}_WSClient.java"/>
      </fileset>
    </copy>
    <copy todir="${andromda.project}/CXF/src/main/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/core/src/main/java">
#foreach ($operation in $service.allowedOperations)
#if ($umlUtils.shouldOutput($operation))
        <include name="$dir/${stringUtils.capitalize($operation.operationName)}Impl.java"/>
#end
#end
        <include name="$dir/${service.name}WSDelegate.java"/>
      </fileset>
    </copy>
#end
#end
    <!-- Overwrite CXF generated Impl which only returns null values -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
    <move file="${andromda.project}/CXF/target/src/main/java/$dir/${service.name}SEIImpl.java"
        tofile="${andromda.project}/CXF/target/src/main/java/$dir/${service.name}SEIImpl.java.ref"
        failonerror="false" verbose="true"/>
    <copy todir="${andromda.project}/CXF/target/src/main/java" overwrite="true" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/core/target/src/main/java">
        <include name="$dir/${service.name}SEIImpl.java"/>
      </fileset>
    </copy>
#end
#end
    <!-- Force recompilation because copied files are older -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/classes" includes="**/*.*"/>
      <fileset dir="${andromda.project}/CXF/target/test-classes" includes="**/*.*"/>
    </delete>
    <!-- Copy web.xml from webservice to CXF project for embedded server test, in case it got cleaned -->
    <copy todir="${andromda.project}/CXF/src/main/webapp/WEB-INF" overwrite="true" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src/main/webapp/WEB-INF" includes="*.xm*"/>
    </copy>
    <record name="${project}/mda/wsgen${NOW}.log" action="stop"/>
  </target>

  <target name="wsreplaceall" depends="init"
          description="Call wsreplace for each Service">
    <!-- Run wsreplace for each generated webservice class -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
    <antcall target="wsreplace">
      <param name="class" value="$service.name"/>
    </antcall>
#end
#end

  </target>

  <!-- Generate WebService artifacts using CXF version $cxfVersion.
       http://cxf.apache.org/docs/wsdl-to-java.html -->
  <target name="wsgenjava" description="Generate WebService code artifacts using CXF wsdl2java and java2wsdl utilities.">
    <echo message="running wsdlvalidator for AndroMDA generated wsdl for service ${service}"/>
    <java classname="org.apache.cxf.tools.validator.WSDLValidator" fork="true" failonerror="true" append="true">
      <arg value="-verbose"/>
      <arg value="${andromda.project}/webservice/src/main/webapp/wsdl/${service}.wsdl"/>
       <classpath>
          <path refid="project1.classpath"/>
       </classpath>
       <!-- Java return code is not set properly unless system.exit is called from java class with return code -->
       <sysproperty key="exitOnFinish" value="yes"/>
       <sysproperty key="org.apache.cxf.Logger" value="org.apache.cxf.common.logging.Log4jLogger"/>
       <sysproperty key="log4j.configuration" value="file:/${andromda.project}/mda/log4j.xml"/>
    </java>
#set ($header=false)
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
#if ($service.hasStereotype("WSCustomHeader") || $service.hasStereotype("WSSecurity"))
#set ($header=true)
#end
#end
#end
    <echo message="running wsdl2java for service ${service}"/>
    <java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true" failonerror="true" append="true">
      <arg value="-p"/>
      <arg value="${namespace}=${package}"/>
      <arg value="-b"/>
      <arg value="${andromda.project}/webservice/src/main/webapp/wsdl/bindings/${service}.xjb"/>
      <arg value="-d"/>
      <arg value="${andromda.project}/CXF/target/src/main/java"/>
      <!--arg value="-compile"/-->
      <arg value="-classdir"/>
      <arg value="${andromda.project}/CXF/src/main/webapp/WEB-INF/classes"/>
      <arg value="-all"/>
## Element ref with no substitutions should be allowed for wrapped wsdl/java
      <arg value="-allowElementReferences"/>
      <arg value="-verbose"/>
      <arg value="-exsh"/>
      <arg value="true"/>
      <!--arg value="-validate"/-->
      <arg value="-mark-generated"/>
#set ($cxf21=$cxfVersion.substring(0,3).compareTo("2.1")>0)
#if (!$cxf21)
      <arg value="-autoNameResolution"/>
      <!-- Bug: CXF StackOverflow if values are bidirectional -->
      <!--arg value="-defaultValues=org.apache.cxf.tools.wsdlto.core.RandomValueProvider"/-->
      <!--arg value="-sn"/>
      <arg value="$service.name"/-->
#end
#if ($stringUtils.isNotBlank($xjcArguments))
      <!-- Uncomment to add cxf and jaxb-commons options to client code generation in CXF project -->
      <!--arg value="-xjc$xjcArguments"/-->
#end
      <!-- Uncomment to use CXF servlet WSDL URL instead of generated wsdl - There are differences. -->
      <!--arg value="http://${webserviceHost}:${webservicePort}/$webContext/$servicesPath/${service}?wsdl"/-->
      <arg value="${andromda.project}/webservice/src/main/webapp/wsdl/${service}.wsdl"/>
      <classpath>
          <path refid="project1.classpath"/>
      </classpath>
      <!-- Java return code is not set properly unless system.exit is called from java class with return code -->
      <sysproperty key="exitOnFinish" value="yes"/>
      <sysproperty key="org.apache.cxf.Logger" value="org.apache.cxf.common.logging.Log4jLogger"/>
      <!-- Gives 'no appenders found' error even when log4j.xml is in the classpath -->
      <sysproperty key="log4j.configuration" value="file:/${andromda.project}/mda/log4j.xml"/>
    </java>
    <!-- CXF v2 v3 inconsistency: v3 generates ServiceImpl not ServiceSEIImpl, despite the jxb binding configuration -->
    <replace dir="${andromda.project}/CXF/target/src/main/java" token="${service}Impl" value="${service}SEIImpl"/>
    <!--echo message="move from=*${service}Impl.java to=*${service}SEIImpl.java"/-->
    <move toDir="${andromda.project}/CXF/target/src/main/java" includeemptydirs="false" verbose="true">
        <fileset dir="${andromda.project}/CXF/target/src/main/java">
          <include name="**/*"/>
        </fileset>
        <globmapper from="*${service}Impl.java" to="*${service}SEIImpl.java"/>
    </move>
#if (!$cxf21)
    <!-- Copy JAXB2 Adapter and package info classes to ValueObjects location. CXF/Jaxb2.1 allows customized adapter name -->
    <copy todir="${jaxb-gen}" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
        <include name="**/Adapter*.java"/>
      </fileset>
    </copy>
#end
  </target>
  <!-- Adapter, ${seiSuffix}Impl, and wrapper classes are required to run java2wsdl properly. -->
  <!-- CXF generated wsdl is used only to point out potential problems in java code. -->

  <!-- Generate WebService artifacts using CXF version ${cxfVersion}.
       http://cxf.apache.org/docs/java-to-ws.html -->
## CXF 2.1 uses java2ws, java2wsdl no longer exists.
#if (!$cxf21)
  <target name="wsgenwsdl" description="Generate WebService code artifacts using CXF java2wsdl utility.">
    <echo message="running java2wsdl for service ${service}"/>
    <java classname="org.apache.cxf.tools.java2wsdl.JavaToWSDL" fork="true" failonerror="true" append="true">
#else
  <target name="wsgenwsdl" description="Generate WebService code artifacts using CXF java2ws utility.">
    <echo message="running java2ws for service ${service}"/>
    <java classname="org.apache.cxf.tools.java2ws.JavaToWS" fork="true" failonerror="true" append="true">
        <arg value="-databinding"/>
        <arg value="jaxb"/>
        <arg value="-frontend"/>
        <arg value="jaxws"/>
        <arg value="-wsdl"/>
## Does not support custom jaxb databinding file, have to use wsdl2java to generate these artifacts
#end
        <arg value="-o"/>
        <arg value="${andromda.project}/CXF/src/main/webapp/WEB-INF/wsdl/${service}.wsdl"/>
        <arg value="-cp"/>
        <arg value="${andromda.project}/common/target/classes;${andromda.project}/core/target/classes;${andromda.project}/webservice/src/main/webapp/WEB-INF/classes;${andromda.project}/CXF/target/classes;${andromda.project}/CXF/src/main/webapp/WEB-INF/classes"/>
#if ($soapVersion.equals("1.2"))
        <arg value="-soap12"/>
#end
        <arg value="-t"/>
        <arg value="${namespace}"/>
        <arg value="-servicename"/>
        <arg value="${service}"/>
        <arg value="-verbose"/>
        <arg value="-s"/>
        <arg value="${andromda.project}/CXF/target/src/main/java"/>
        <arg value="-classdir"/>
        <arg value="${andromda.project}/CXF/src/main/webapp/WEB-INF/classes"/>
        <arg value="-portname"/>
        <arg value="${service}"/>
## java2ws does not add schemaLocation to xsd imports in schema files = namespace error
#if ($importedXSD && !$cxf21)
        <!-- bug: xsd schemas inport other references but do not provide schemaLocation -->
        <!--arg value="-createxsdimports"/-->
#end
        <arg value="-d"/>
        <arg value="${andromda.project}/CXF/target/src/main/java"/>
        <arg value="${package}.${service}${seiSuffix}"/>
        <classpath>
            <path refid="project1.classpath"/>
        </classpath>
        <!-- Java return code is not set properly unless system.exit is called from java class with return code -->
        <sysproperty key="exitOnFinish" value="yes"/>
        <sysproperty key="org.apache.cxf.Logger" value="org.apache.cxf.common.logging.Log4jLogger"/>
        <!-- Gives 'no appenders found' error even when log4j.xml is in the classpath -->
        <sysproperty key="log4j.configuration" value="file:/${andromda.project}/mda/log4j.xml"/>
    </java>
    <waitfor maxwait="20" maxwaitunit="second">
        <available file="${andromda.project}/CXF/src/main/webapp/WEB-INF/wsdl/${service}.wsdl"/>
    </waitfor>
  </target>

  <!-- Replace dummy WSDL URL with localhost working version, used for test/prod deployment wsdls. -->
  <target name="wsreplace" description="Replace default URL text with service value.">
    <!-- If we have a URL from UDDI, change here -->
    <replace dir="${andromda.project}/webservice/src/main/webapp/wsdl" value="http://$webserviceHost:$webservicePort/$webContext/$servicesPath/${class}"
        summary="true">
      <include name="${class}*.*"/>
      <replacetoken>REPLACE_WITH_ACTUAL_URL</replacetoken>
    </replace>
  </target>

  <target name="all" depends="init">
    <antcall target="wsgenall"/>
    <ant antfile="${andromda.project}/mda/build.xml" target="eclipse"/>
  </target>
</project>
