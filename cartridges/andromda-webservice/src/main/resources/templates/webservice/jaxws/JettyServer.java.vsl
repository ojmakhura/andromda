// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA, can be edited
 *
 * TEMPLATE: jaxws/JettyServer.java.vsl in andromda-webservices-cartridge
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
 * SERVICE:  $service.name
##foreach ($stereotype in $service.stereotypes)
## * STEREOTYPE:  $stereotype.name
##end
#end
#end
*/
##if ($stringUtils.isNotBlank($service.packageName))
##package ${service.packageName}.test;
##end

import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.Handler;
//import org.eclipse.jetty.server.HttpConfiguration;
//import org.eclipse.jetty.server.HttpConnectionFactory;
import org.eclipse.jetty.server.Server;
//import org.eclipse.jetty.server.ServerConnector;
//import org.eclipse.jetty.server.handler.ContextHandlerCollection;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerCollection;
import org.eclipse.jetty.webapp.WebAppContext;

/**
 * Simple class to start a web server with one simple class, to test web services
 * and web server configuration. Based on CXF Samples: java_first_spring_support
 */
public class JettyServer
{
    /**
     * @throws Exception
     */
    protected JettyServer() throws Exception
    {
        System.out.println("Starting Jetty Server");

        /** See http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty
         * Important: This code simply starts up a servlet container and adds
         * the web application in src/main/webapp to it. Normally you would be using
         * Jetty or Tomcat and have the webapp packaged as a WAR. This is simply
         * a convenience so you do not need to configure your servlet container to
         * see CXF in action or run integration tests!. For additional logging and debugging, add:
         * -Djava.util.logging.config.file=%CXF_HOME%/etc/logging.properties.
         * See https://cwiki.apache.org/confluence/display/CXF20DOC/Debugging+and+Logging
         * Or add mda/log4j.xml to the test classpath.
         */
        

#if ($stringUtils.isBlank($webservicePort))
        Server server = new Server(9090);
#else
        Server server = new Server($webservicePort);
#end
        // Jetty v9 changes in comments, in case they ever get the jetty.port configuration functionality working from maven
        /* HttpConfiguration http_config = new HttpConfiguration();
        //http_config.setSecureScheme("https");
        //http_config.setSecurePort(8443);
        //http_config.setOutputBufferSize(32768);
        //http_config.setRequestHeaderSize(8192);
        //http_config.setResponseHeaderSize(8192);
        //http_config.setSendServerVersion(true);
        //http_config.setSendDateHeader(false);

        ServerConnector http = new ServerConnector(server, new HttpConnectionFactory(http_config));
#if ($stringUtils.isBlank($webservicePort))
        http.setPort(9090);
#else
        http.setPort($webservicePort);
#end
        //http.setIdleTimeout(30000);
        server.addConnector(http); */

        WebAppContext webappcontext = new WebAppContext();
        webappcontext.setContextPath("/$webContext");

        webappcontext.setWar("src/main/webapp");

        HandlerCollection handlers = new HandlerCollection();
        /* ContextHandlerCollection contexts = new ContextHandlerCollection();
        handlers.setHandlers(new Handler[] { contexts, new DefaultHandler() });
        handlers.addHandler(webappcontext); */
        handlers.setHandlers(new Handler[] {webappcontext, new DefaultHandler()});

        //EventLogInInterceptor myInterceptor = new EventLogInInterceptor();
        //org.apache.cxf.endpoint.Server CXFserver = serverFactoryBean.create();
        //CXFserver.getEndpoint().getInInterceptors().add(myInterceptor);

        server.setHandler(handlers);
        server.start();
        System.out.println("Jetty Server running on port $webservicePort under context $webContext...");
        server.join();
    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String args[]) throws Exception
    {
        new JettyServer();
    }
}