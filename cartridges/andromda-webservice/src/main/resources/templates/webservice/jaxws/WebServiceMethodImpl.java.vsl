#if ($umlUtils.shouldOutput($service))
##if ($generateMethodImpl)
##if ($service.hasStereotype("WebService") || $operation.hasStereotype("WebServiceOperation"))
##// $operation.packageName $service.name $operation.operationName
##// $operation.service
##set ($service=$operation.service)
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA!
 *
 * TEMPLATE:    jaxws\WebServiceMethodImpl.vsl in andromda-webservices-cartridge
 * MODEL CLASS: $operation.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name on $service.name
#end
#foreach ($stereotype in $operation.stereotypes)
 * STEREOTYPE:  $stereotype.name on $operation.name
#end
#foreach ($constraint in $operation.constraints)
 * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
 * WebService Service Method Implementation for the $service.name
 * service $operation.
$operation.getDocumentation(" * ")
 */

#set ($className = "$stringUtils.capitalize(${operation.operationName})Impl")
public class $className
{
    /**
     * Constructor
     */
    public $className()
    {
        //Documented empty code block - avoid compiler warning
    }

    /**
     * Delegate for TestCase ${service.name}WSDelegateTest and ${service.name}${seiSuffix}ImplTest
     */
    public static void ${operation.name}SetUp()
    {
        // Insert your custom code here for additional required unit test case setup for service method
    }

    /**
     * Delegate for TestCase ${service.name}WSDelegateTest and ${service.name}${seiSuffix}ImplTest
     */
    public static void ${operation.name}TearDown()
    {
        // Insert your custom code here for additional required unit test case tear down for service method
    }

##set ($returnType = $operation.returnType.fullyQualifiedName)
   /**
    * Transforms the $operation.name service method parameters on ${service.name}.
$operation.getDocumentation("    * ")
#foreach ( $parameter in $operation.arguments)
    * @param $parameter.name ${parameter.type.packageName}.${parameter.type.name} multiplicity=${parameter.lower}..${parameter.upper}
##else
##    * @return ${operation.operationName}Response $returnType
#end
##    * @throws TransformationException?
##  * @throws RemoteException if ${service.name}.${operation.name} fails
#foreach ($constraint in $operation.constraints)
    * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
    * Replace void with transformed type, use target.set() values to create transformation
    */
## Make all these operations public, we are just filling in dummy data $operation.visibility
    public static void ${operation.name}TransformInput(
#set ($comma = "")
#if (!$operation.arguments.empty)
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
#foreach ($parameter in $operation.arguments)
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
#else
##        // $useArrayWrapper $parameter.many $parameter.upper
#set ($paramType=$parameter.getterSetterTypeName)
#end
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
        ${comma}final $paramType $parameter.name
#set ($comma = ", ")
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
#set ($serviceParameterName = $stringUtils.uncapitalize($serviceElementName))
#set ($serviceParamDirection = $service.findTaggedValue("andromda_header_direction"))
#if ($stringUtils.isBlank($serviceParamDirection))#set ($serviceParamDirection="IN")#end
#if ($serviceParamDirection.equals("IN") || $serviceParamDirection.equals("INOUT"))
        ${comma}$serviceClassName ${serviceParameterName}In
#set ($comma = ",")
#end
##        // $serviceParamDirection $service.findTaggedValue("andromda_header_direction")
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
#set ($securityParameterName = $stringUtils.uncapitalize($securityElementName))
#if ($stringUtils.isBlank($securityNamespace))#set ($securityNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd")#end
#set ($securityParamDirection = $service.findTaggedValue("andromda_security_header_direction"))
#if ($stringUtils.isBlank($securityParamDirection))#set ($securityParamDirection="IN")#end
#if ($securityParamDirection.equals("IN") || $securityParamDirection.equals("INOUT"))
        ${comma}$securityClassName ${securityParameterName}In
#set ($comma = ",")
#end
##        // $securityParamDirection $service.findTaggedValue("andromda_security_header_direction")
#end
#if ($service.hasStereotype("WSCustomHeader"))
#if ($serviceParamDirection.equals("OUT") || $serviceParamDirection.equals("INOUT"))
        ${comma}javax.xml.ws.Holder<$serviceClassName> ${serviceParameterName}Out
##        // $serviceParamDirection $service.findTaggedValue("andromda_header_direction")
#set ($comma = ",")
#end
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($securityParamDirection.equals("OUT") || $securityParamDirection.equals("INOUT"))
        ${comma}javax.xml.ws.Holder<$securityClassName> ${securityParameterName}Out
#end
##        // $securityParamDirection $service.findTaggedValue("andromda_security_header_direction")
#end
    )
##        throws TransformationException?)
    {
#if ($operation.arguments.empty)
        // Documented empty block - avoid compiler warning - no method parameters
#end
#set ($propertyNum=0)
#set ($property1Num=0)
#foreach ($parameter in $operation.arguments)
##        // parameter $parameter.name with $parameter.type.allProperties.size() properties:#foreach ($property in $parameter.type.allProperties) $property.name#end

##        // $parameter.type.fullyQualifiedName $parameter.name = ${webServiceUtils.createConstructor($parameter, false)};
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($tab="    ")
#set ($parameterName="${parameter.name}Element")
#set ($parameterType="$parameter.type.fullyQualifiedName")
##if ($parameter.type.primitive && $parameter.lower < 1)
## Must use the wrapped type instead of primitive type. TODO: Validate this condition does not exist.
##set ($parameterType="$parameter.type.fullyQualifiedName")
##end
        if (${parameter.name} != null && !${parameter.name}.isEmpty())
        {
            for ($parameter.type.fullyQualifiedName $parameterName : ${parameter.name})
            {
#else
#set ($tab="")
#set ($parameterName="${parameter.name}")
#if (!$parameter.type.primitive)
        if (${parameter.name} != null)
        {
#end
            // transform($parameter.type.fullyQualifiedName);
#end
## It tries to iterate through nonexistent day, month, year attributes on Calendar
##if (!$parameter.type.fullyQualifiedName.equals("java.util.Calendar"))
#foreach ($property in $parameter.type.allProperties)
$tab            // property $property.name with $property.type.allProperties.size() properties:#foreach ($property1 in $property.type.allProperties) $property1.name#end

#if (!$property.many)
#set ($propertyNum=$propertyNum+1)
$tab            ${property.type.fullyQualifiedName} ${property.name}$propertyNum = $parameterName.${property.getterName}();
#end
#if ($property.many)
#set ($tab1="    ")
$tab            ${property.getterSetterTypeName} ${property.name}${propertyNum}List = $parameterName.${property.getterName}();
$tab            if (${property.name}${propertyNum}List != null && !${property.name}${propertyNum}List.isEmpty())
$tab            {
$tab                for ($property.type.fullyQualifiedName ${property.name}$propertyNum : $parameterName.${property.getterName}())
$tab                {
#else
#set ($tab1="")
#if (!$property.type.primitive)
$tab            if (${property.name}$propertyNum != null)
$tab            {
#end
##$tab                ${property.type.fullyQualifiedName} ${property.name}$propertyNum = $parameterName.${property.getterName}();
#end
#if (!$property.type.allProperties.empty)
##if (!$property.type.allProperties.empty && !$property.type.fullyQualifiedName.equals("java.util.Calendar"))
## propertyNum prevents name conflicts between property attributes

#foreach ($property1 in $property.type.allProperties)
$tab$tab1                // property1 $property1.name with $property1.type.allProperties.size() properties:#foreach ($property2 in $property1.type.allProperties) $property2.name#end

#set ($property1Num=$property1Num+1)
#if ($property1.many)
##$tab$tab1                // isMany: property1=$property1.name $property1 property1.type=$property1.type property1.type=$property1.type.fullyQualifiedName

$tab$tab1                ${property1.getterSetterTypeName} ${property1.name}List${propertyNum}${property1Num} = ${property.name}$propertyNum.${property1.getterName}();
$tab$tab1                if (${property1.name}List${propertyNum}${property1Num} != null && !${property1.name}List${propertyNum}${property1Num}.isEmpty())
$tab$tab1                {
$tab$tab1                    for ($property1.type.fullyQualifiedName ${property1.name}${propertyNum}${property1Num} : ${property.name}$propertyNum.${property1.getterName}())
$tab$tab1                    {
#foreach ($property2 in $property1.type.allProperties)
$tab$tab1                        /* ${property2.getterSetterTypeName} ${property2.name}${propertyNum}${property1Num} = */ ${property1.name}${propertyNum}${property1Num}.${property2.getterName}();
#end
$tab$tab1                     }
$tab$tab1                }
##// property1 !${property1.name}.type.allProperties.empty=!$property1.type.allProperties.empty
##        // TODO: Iterate through properties in ${property1.type.fullyQualifiedName}
#else
##$tab$tab1                // property1=$property1.name property1.type=$property.type.fullyQualifiedName isMany=$property.many
$tab$tab1                ${property1.getterSetterTypeName} ${property1.name}${propertyNum}${property1Num} = ${property.name}$propertyNum.${property1.getterName}();
$tab$tab1                // TODO: Foreach property in ${property1.getterSetterTypeName} ${property1.name}${propertyNum}.setXXX(value) or getList().add(value)
#end
#end
##$tab$tab1            } // property !${property.name}.type.allProperties.empty=!$property.type.allProperties.empty
#end
#if ($property.many)
$tab                }
#end
#if (!$property.type.primitive)
$tab            }
##// property ${property.name}.many=$property.many ${property.name}$propertyNum != null
#end
#end
##end
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
            }
##// parameter ${parameter.name}.upper=$parameter.upper
#end
#if (!$parameter.type.primitive)
        }
#end
#end
    }

#if (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
   /**
    * Transforms input to an output response for $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
#if ($operation.returnTypePresent)
    * @return ${operation.operationName}Response $returnType
#end
##    * @throws TransformationException?
##  * @throws RemoteException if ${service.name}.${operation.name} fails
#foreach ($constraint in $operation.constraints)
    * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
    */
#set ($atom=false)
#if ($service.restCount>0 && $service.restProduces.contains("atom"))
#set ($atom=true)
#end
## Make all these operations public, we are just filling in dummy data $operation.visibility
    public static $returnType ${operation.name}TransformResponse(
#if ($atom)
        org.apache.abdera.model.Feed feed)
#else
        /* Domain response to be transformed to service response */)
#end
##if ($operation.exceptionsPresent)
        // throws TransformationException?
##end
    {
        // Dummy return value implementation with default values...
        // Iterate down through all complex types and create default dummy constructor and attribute values
#if ($operation.rest && ($returnType.equals("void") || $returnType.equals("Response") || $returnType.equals("javax.ws.rs.core.Response")))
        org.apache.cxf.jaxrs.impl.ResponseBuilderImpl builder = new org.apache.cxf.jaxrs.impl.ResponseBuilderImpl();
        builder.status(200); // TODO: handle specific response codes
        javax.ws.rs.core.Response rtn = builder.build();
#else
#if(!$returnType.equals("void"))
#set ($isMany = $operation.upper>1 || $operation.upper==-1)
#if ($isMany)
        $returnType rtnList = $webServiceUtils.createConstructor($operation.returnType, $isMany);
        $operation.returnType.fullyQualifiedName rtn = $webServiceUtils.createConstructor($operation.returnType, false);
#else
        $returnType rtn = $webServiceUtils.createConstructor($operation.returnType, $isMany);
#end
#end
#end
## Add number qualifier to prevent attribute name collision throughout the hierarchy
#set ($propertyNum=0)
##set ($property4Num=0)
## Calendar attempts to iterate through properties Month, Day, Year for some reason, don't know why.
#foreach ($property in $operation.returnType.allProperties)
#if (!$property.type.allProperties.empty)
## propertyNum prevents name conflicts between property attributes
#set ($property2Num=0)
#set ($propertyNum=$propertyNum+1)

        // Property ${property.name}#if ($property.many) isMany#end has $property.type.allProperties.size() properties:#foreach ($property1 in $property.type.allProperties) $property1.name#end

        ${property.type.fullyQualifiedName} $property.name = $webServiceUtils.createConstructor($property, false, $operation.returnType);
#foreach ($property1 in $property.type.allProperties)
##if ($property1.many)
##        // isMany: property1=$property1 property1.type=$property1.type
#if (!$property1.type.allProperties.empty)

##        ${property1.getterSetterTypeName} ${property1.name}${propertyNum} = ${webServiceUtils.createConstructor($property1, false, $operation.returnType)};
#set ($property3Num=0)
#set ($property2Num=$property2Num+1)
        ${property1.type.fullyQualifiedName} ${property1.name}${propertyNum} = $webServiceUtils.createConstructor($property1, false, $property.type);
#foreach ($property2 in $property1.type.allProperties)
#if (!$property2.type.allProperties.empty)
        // Property2 $property2.name#if ($property2.many) isMany#end has $property2.type.allProperties.size() properties:#foreach ($property3 in $property2.type.allProperties) $property3.name#end

#set ($property3Num=$property3Num+1)
        ${property2.type.fullyQualifiedName} ${property2.name}${propertyNum}${property2Num} = $webServiceUtils.createConstructor($property2, false, $property1.type);
#foreach ($property3 in $property2.type.allProperties)
#if (!$property3.type.allProperties.empty)

        // Property3 $property3.name#if ($property3.many) isMany#end has $property3.type.allProperties.size() properties:#foreach ($property4 in $property3.type.allProperties) $property4.name#end

        ${property3.type.fullyQualifiedName} ${property3.name}${propertyNum}${property2Num}${property3Num} = $webServiceUtils.createConstructor($property3, false, $property2.type);
        // TODO: Foreach property4 in ${property3.type.fullyQualifiedName} ${property3.name}${propertyNum}${property2Num}${property3Num}.setXXX(value) or getList().add(value)
#if ($property3.many)
        ${property2.name}${propertyNum}${property2Num}.${property3.getterName}().add(${property3.name}${propertyNum}${property2Num}${property3Num});
#else
        ${property2.name}${propertyNum}${property2Num}.${property3.setterName}(${property3.name}${propertyNum}${property2Num}${property3Num});
#end
#else

        // Property3 $property3.name#if ($property3.many) isMany#end has $property3.type.allProperties.size() properties $property3 $property3.type
#if ($property3.many)
        ${property2.name}${propertyNum}${property2Num}.${property3.getterName}().add($webServiceUtils.createConstructor($property3, false, $property2.type));
#else
        ${property2.name}${propertyNum}${property2Num}.${property3.setterName}($webServiceUtils.createConstructor($property3, false, $property2.type));
#end
#end
#end
#if ($property2.many)
        ${property1.name}${propertyNum}.${property2.getterName}().add(${property2.name}${propertyNum}${property2Num});
#else
        ${property1.name}${propertyNum}.${property2.setterName}(${property2.name}${propertyNum}${property2Num});
#end
#else

        // Property2 $property2.name#if ($property2.many) isMany#end has $property2.type.allProperties.size() properties $property2 $property2.type
#if ($property2.many)
        ${property1.name}${propertyNum}.${property2.getterName}().add($webServiceUtils.createConstructor($property2, false, $property1.type));
#else
        ${property1.name}${propertyNum}.${property2.setterName}($webServiceUtils.createConstructor($property2, false, $property1.type));
#end
#end
#end
#if ($property1.many)
        ${property.name}.${property1.getterName}().add(${property1.name}${propertyNum});
#else
        ${property.name}.${property1.setterName}(${property1.name}${propertyNum});
#end
#else
#if ($property1.many)
        ${property.name}.${property1.getterName}().add($webServiceUtils.createConstructor($property1, false, $property.type));
#else
        ${property.name}.${property1.setterName}($webServiceUtils.createConstructor($property1, false, $property.type));
#end
#end
#end
#if ($property.many)
        rtn.${property.getterName}().add($property.name);
#else
        rtn.${property.setterName}($property.name);
#end
#else
#if ($property.many)
        rtn.${property.getterName}().add($webServiceUtils.createConstructor($property, false, $operation.returnType));
#else
        rtn.${property.setterName}($webServiceUtils.createConstructor($property, false, $operation.returnType));
#end
#end
#end

#if(!$returnType.equals("void"))
#if ($isMany)
        rtnList.add(rtn);
        return rtnList;
#else
        return rtn;
#end
#end
    }

#set ($className = $stringUtils.capitalize(${operation.operationName}))
#set ($arguments = $operation.returnType.fullyQualifiedName)
#set ($returnType = "${service.packageName}.$stringUtils.capitalize($operation.operationName)")
    /*#if(!$operation.visibility.equals("private"))*#end Create input test data for ${service.name} ${operation.name}
     * Used by webservice WSClient (against service) and core service WSDelegateTest (against implementation).
     * Return wrapped parameters:
#foreach ($parameter in $operation.arguments)
     * $parameter.name: $parameter.type.fullyQualifiedName
#end
     * @return ${operation.operationName}Return $returnType WS Input parameter wrapper (assumes wrapped WSDL)
     *#if(!$operation.visibility.equals("private"))*/#end

    public static $returnType ${operation.name}CreateInput()
    {
        $returnType ${operation.operationName}Return = new $returnType();
##        $arguments = new ${operation.packageName}.$stringUtils.capitalize(${operation.operationName})RequestWrapper();
#set ($parameters="")
#set ($comma="")
#set ($paramNum=0)
#foreach ($parameter in $operation.arguments)

#set ($paramNum=$paramNum+1)
#set ($propertyNum=0)
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##Todo: Use Collection type from configuration. Add many and getFullyQualifiedType() to ParameterFacade.
#set ($parameterName = "${parameter.name}ElementParam$paramNum")
#else
#set ($parameterName = "${parameter.name}Param$paramNum")
#end
        // parameter$paramNum $parameterName with $parameter.type.allProperties.size() properties:#foreach ($property in $parameter.type.allProperties) $property.name#end

        $parameter.type.fullyQualifiedName $parameterName = ${webServiceUtils.createConstructor($parameter, false)};
#set ($parameters="${parameters}${comma}${parameter.name}")
#set ($comma=", ")
#foreach ($property in $parameter.type.allProperties)
#set ($property1Num=0)
#if (!$property.type.allProperties.empty)
## propertyNum prevents name conflicts between property attributes
#set ($propertyNum=$propertyNum+1)

        // $parameterName property$paramNum$propertyNum $property.name with $property.type.allProperties.size() properties:#foreach ($property1 in $property.type.allProperties) $property1.name#end

        ${property.type.fullyQualifiedName} $property.name$paramNum$propertyNum = ${webServiceUtils.createConstructor($property, false, $parameter.type)};
#end
#foreach ($property1 in $property.type.allProperties)
#if ($property1.many)
##        // isMany: property1=$property1 property1.type=$property1.type
#if (!$property1.type.allProperties.empty)
#set ($property1Num=$property1Num+1)

        // $property.name property1 $paramNum$propertyNum$property1Num $property1.name with $property1.type.allProperties.size() properties:#foreach ($property2 in $property1.type.allProperties) $property2.name#end

        ${property1.type.fullyQualifiedName} ${property1.name}$paramNum$propertyNum$property1Num = ${webServiceUtils.createConstructor($property1, false, $property.type)};
#foreach ($property2 in $property1.type.allProperties)
        // $property1.name property2 $property2.name with $property2.type.allProperties.size() properties:#foreach ($property3 in $property2.type.allProperties) $property3.name#end

#if ($property2.many)
        ${property1.name}$paramNum$propertyNum$property1Num.${property2.getterName}().add(${webServiceUtils.createConstructor($property2, false, $property1.type)});
#else
        ${property1.name}$paramNum$propertyNum$property1Num.${property2.setterName}(${webServiceUtils.createConstructor($property2, false, $property1.type)});
#end
#end
        ${property.name}$paramNum$propertyNum.${property1.getterName}().add(${property1.name}$paramNum$propertyNum$property1Num);
#else
        ${property.name}$paramNum$propertyNum.${property1.getterName}().add(${webServiceUtils.createConstructor($property1, false, $property.type)});
#end
#else
##        // property1=$property property1.type=$property.type isMany=$property.many
#if (!$property1.type.allProperties.empty)
#set ($property1Num=$property1Num+1)

        // $property.name property1 $paramNum$propertyNum$property1Num $property1.name with $property1.type.allProperties.size() properties:#foreach ($property2 in $property1.type.allProperties) $property2.name#end

        ${property1.getterSetterTypeName} ${property1.name}$paramNum$propertyNum$property1Num = ${webServiceUtils.createConstructor($property1, false, $property.type)};
#foreach ($property2 in $property1.type.allProperties)
#if (!$property2.type.allProperties.empty)
        // $property1.name property2 $property2.name with $property2.type.allProperties.size() properties:#foreach ($property3 in $property2.type.allProperties) $property3.name#end

#end
#if ($property2.many)
        ${property1.name}$paramNum$propertyNum$property1Num.${property2.getterName}().add(${webServiceUtils.createConstructor($property2, false, $property1.type)});
#else
        ${property1.name}$paramNum$propertyNum$property1Num.${property2.setterName}(${webServiceUtils.createConstructor($property2, false, $property1.type)});
#end
#end
        ${property.name}$paramNum$propertyNum.${property1.setterName}(${property1.name}$paramNum$propertyNum$property1Num);
#else
        ${property.name}$paramNum$propertyNum.${property1.setterName}(${webServiceUtils.createConstructor($property1, false, $property.type)});
#end
#end
#end
#if (!$property.type.allProperties.empty)
#if ($property.many)
        $parameterName.${property.getterName}().add($property.name$paramNum$propertyNum);
#else
        $parameterName.${property.setterName}($property.name$paramNum$propertyNum);
#end
#else
#if ($property.many)
        $parameterName.${property.getterName}().add(${webServiceUtils.createConstructor($property, false, $parameter.type)});
#else
        $parameterName.${property.setterName}(${webServiceUtils.createConstructor($property, false, $parameter.type)});
#end
#end
#end
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##Todo: Use Collection type from configuration. Add many and getFullyQualifiedType() to ParameterFacade.
#set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
        // $paramType $parameterName = ${webServiceUtils.createConstructor($parameter, true)};
        ${operation.operationName}Return.get$stringUtils.capitalize($parameter.name)().add($parameterName);
#else
        ${operation.operationName}Return.set$stringUtils.capitalize($parameter.name)($parameterName);
#end
#end

        return ${operation.operationName}Return;
    }
#if($operation.visibility.equals("private"))
    */
#end
}

##end
#end
