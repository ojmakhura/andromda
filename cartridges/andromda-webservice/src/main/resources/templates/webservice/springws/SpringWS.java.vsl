// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceName = "${service.name}WS")
#else
#set ( $serviceName = "${service.name}")
#end

#foreach($annotation in $service.additionalAnnotations)
@$annotation
#end
public abstract class ${serviceName} {

    protected static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(${serviceName}.class);

#if($isService)
    @org.springframework.beans.factory.annotation.Autowired
    protected ${service.fullyQualifiedName} $stringUtils.uncapitalize(${service.name});

#end
#foreach($attribute in $service.attributes)
#foreach($annotation in $attribute.additionalAnnotations)
    @$annotation
#end
    $attribute.visibility $attribute.type.fullyQualifiedName $attribute.name;
#end

#foreach ($operation in $service.allowedOperations)
#set ($handle = "handle")
    $operation.visibility $operation.getterSetterReturnTypeName ${operation.signature} {
        #if ($operation.getterSetterReturnTypeName != 'void')return #end${handle}$stringUtils.capitalize(${operation.name})($operation.argumentNames);
    }

    $operation.visibility abstract $operation.getterSetterReturnTypeName ${handle}$stringUtils.capitalize(${operation.signature});

#end
}