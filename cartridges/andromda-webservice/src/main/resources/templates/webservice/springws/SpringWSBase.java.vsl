// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceName = "${service.name}WS")
#else
#set ( $serviceName = "${service.name}")
#end

public abstract class ${serviceName}Base implements ${serviceName} { // $service.baseName

    protected org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(${serviceName}.class);
#if($isService)

    protected final ${service.fullyQualifiedName} $stringUtils.uncapitalize(${service.name});
#end
#foreach($ref in $service.allServiceReferences)
        protected final $ref.targetElement.fullyQualifiedName $ref.name;
#end
#foreach($ref in $service.entityReferences)
#set ($ent = $ref.targetElement)
        protected final ${ent.fullyQualifiedDaoName} $ref.daoName;
        protected final ${ent.fullyQualifiedName}Repository ${ref.name}Repository;
#end

    public ${serviceName}Base(
#if($isService)
        ${service.fullyQualifiedName} $stringUtils.uncapitalize(${service.name})#if($service.allServiceReferences.size() > 0 || $service.entityReferences.size() > 0),#end
#end
#set ($iter = $service.allServiceReferences.iterator())
#foreach($ref in $service.allServiceReferences)
#set($serviceRef = $iter.next())
        $ref.targetElement.fullyQualifiedName $ref.name#if($iter.hasNext() || $service.entityReferences.size() > 0),
#end
#end
#set ($iter = $service.entityReferences.iterator())
#foreach($ref in $service.entityReferences)
#set($entityRef = $iter.next())
#set ($ent = $ref.targetElement)
        ${ent.fullyQualifiedDaoName} $ref.name,
        ${ent.fullyQualifiedName}Repository ${ref.name}Repository#if($iter.hasNext()),
#end
#end
    ) {
#if($isService)
        this.$stringUtils.uncapitalize(${service.name}) = $stringUtils.uncapitalize(${service.name});
#end
#foreach($ref in $service.allServiceReferences)
        this.$ref.name = $ref.name;
#end
#set ($iter = $service.entityReferences.iterator())
#foreach($ref in $service.entityReferences)
        this.$serviceRef.name = $serviceRef.name;
        ${stringUtils.uncapitalize($ref.name)}Repository = ${stringUtils.uncapitalize($ref.name)}Repository;
#end         
    }

#foreach($attribute in $service.attributes)
#foreach($annotation in $attribute.additionalAnnotations)
    @$annotation
#end
#if($attribute.many)
    private java.util.Collection<$attribute.type.fullyQualifiedName> $attribute.name; 
#else
    private $attribute.type.fullyQualifiedName $attribute.name; 
#end

    $attribute.visibility #if($attribute.many)java.util.Collection<$attribute.type.fullyQualifiedName>#else$attribute.type.fullyQualifiedName#end ${attribute.getterName}() {
        return $attribute.name; 
    }

#end
#foreach ($operation in $service.allowedOperations)
#set ($handle = "handle")
#if($operation.returnTypePresent)
#set ($returnType = "#if($operation.returnType.primitive)$operation.returnType.wrapperName#else$operation.getterSetterReturnTypeName#end")
#set ($return = "org.springframework.http.ResponseEntity<?>")
#else
#set ($return = "void")
#end
    $operation.visibility $return ${operation.name}($operation.typedArgumentList) {
        #if ($operation.returnTypePresent)return #end${handle}$stringUtils.capitalize(${operation.name})($operation.argumentNames);
    }

    $operation.visibility abstract $return ${handle}$stringUtils.capitalize(${operation.signature});

#end
#foreach($serviceRef in $service.serviceReferences)
    /**
     * Gets the reference to <code>$serviceRef.daoName</code>.
     * @return ${serviceRef.name}
     */
    protected $serviceRef.targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        return this.$serviceRef.name;
    }

#end
#foreach($ref in $service.entityReferences)
#set ($ent = $ref.targetElement)
    public ${ent.fullyQualifiedDaoName} ${ref.daoGetterName}() {
        return $ref.daoName;
    }

    public ${ent.fullyQualifiedName}Repository get$stringUtils.capitalize(${ent.name})Repository() {
        return this.${ent.name}Repository;
    }

#end
}