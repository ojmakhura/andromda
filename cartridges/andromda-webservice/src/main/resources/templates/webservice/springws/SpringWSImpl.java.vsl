// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceImplName = "${service.name}WSImpl")
#else
#set ( $serviceImplName = "${service.name}Impl")
#end

@org.springframework.web.bind.annotation.RestController
@org.springframework.web.bind.annotation.RequestMapping(#if ($stringUtils.isNotBlank($service.restPath))"$service.restPath"#else"${service.name.toLowerCase()}sws"#end)
@org.springframework.web.bind.annotation.CrossOrigin()
#foreach($annotation in $service.additionalAnnotations)
@$annotation
#end
public class ${serviceImplName} extends ${service.name}#if($isService)WS#end {

#foreach ($operation in $service.allowedOperations)
#set ($responseStatus = $operation.restResponseStatus)
    $webServiceUtils.getRequestType(${operation.restRequestType})($webServiceUtils.getSpringOperationPath($operation))
#if (!$stringUtils.isBlank($responseStatus))
    $operation.restResponseStatus
#end
#if ($operation.returnTypePresent)
    @org.springframework.web.bind.annotation.ResponseBody
#end
    $operation.visibility $operation.getterSetterReturnTypeName handle$stringUtils.capitalize(${operation.name})(#getOperationArgs($operation)) {
#if($isService)
        #if ($operation.getterSetterReturnTypeName != 'void')return #end$stringUtils.uncapitalize(${service.name}).${operation.name}($operation.argumentNames);
#end
    }

#end
}