// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceImplName = "${service.name}WSImpl")
#else
#set ( $serviceImplName = "${service.name}Impl")
#end

@org.springframework.web.bind.annotation.RestController
@org.springframework.web.bind.annotation.RequestMapping(#if ($stringUtils.isNotBlank($service.restPath))"$service.restPath"#else"${service.name.toLowerCase()}sws"#end)
#foreach($annotation in $service.additionalAnnotations)
@$annotation
#end
public class ${serviceImplName} extends #if($isService)${service.name}WSBase#else${service.name}Base#end {
    
    public ${service.implementationName}(
#if($isService)
        ${service.fullyQualifiedName} $stringUtils.uncapitalize(${service.name})#if($service.allServiceReferences.size() > 0 || $service.entityReferences.size() > 0),#end
#end
#set ($iter = $service.allServiceReferences.iterator())
#foreach($ref in $service.allServiceReferences)
#set($serviceRef = $iter.next())
        $ref.targetElement.fullyQualifiedName $ref.name#if($iter.hasNext() || $service.entityReferences.size() > 0),#end
#end
#set ($iter = $service.entityReferences.iterator())
#foreach($ref in $service.entityReferences)
#set($entityRef = $iter.next())
#set ($ent = $ref.targetElement)
        ${ent.fullyQualifiedDaoName} $entityRef.daoName,
        ${ent.fullyQualifiedName}Repository ${stringUtils.uncapitalize($ref.name)}Repository#if($iter.hasNext()),#end
#end
    ) {
        super(
#if($isService)
            $stringUtils.uncapitalize(${service.name})#if($service.allServiceReferences.size() > 0 || $service.entityReferences.size() > 0),#end
#end
#set ($iter = $service.allServiceReferences.iterator())
#foreach($ref in $service.allServiceReferences)
#set($serviceRef = $iter.next())
            $ref.name#if($iter.hasNext() || $service.entityReferences.size() > 0),#end
#end
#set ($iter = $service.entityReferences.iterator())
#foreach($ref in $service.entityReferences)
#set($entityRef = $iter.next())
#set ($ent = $ref.targetElement)
            $ref.daoName,
            ${ent.name}Repository#if($iter.hasNext()),#end
#end
        );
    }

#foreach ($operation in $service.allowedOperations)

#if($operation.returnTypePresent)
#set ($returnType = "#if($operation.returnType.primitive)$operation.returnType.wrapperName#else$operation.getterSetterReturnTypeName#end")
#set ($return = "org.springframework.http.ResponseEntity<?>")
#else
#set ($return = "void")
#end
    @Override
    $operation.visibility $return handle$stringUtils.capitalize(${operation.signature}) {
#if($isService)
#set ($call = "$stringUtils.uncapitalize(${service.name}).${operation.name}($operation.argumentNames)")
#set ($optional = "java.util.Optional.of($call)")
#else
#set ($call = "// TODO: Add custom code here")
#set ($optional = "java.util.Optional.empty(); $call")
#end
#if ($operation.returnTypePresent)
        try {
            java.util.Optional<?> data = $optional;
            org.springframework.http.ResponseEntity<?> response;

            if(data.isPresent()) {
                response = org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.OK).body(data.get());
            } else {
                response = org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
#else
        $call;
#end
    }
#end
}