// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceImplName = "${service.name}WSImpl")
#else
#set ( $serviceImplName = "${service.name}Impl")
#end

@org.springframework.web.bind.annotation.RestController
@org.springframework.web.bind.annotation.RequestMapping(#if ($stringUtils.isNotBlank($service.restPath))"$service.restPath"#else"${service.name.toLowerCase()}sws"#end)
#foreach($annotation in $service.additionalAnnotations)
@$annotation
#end
public class ${serviceImplName} extends #if($isService)${service.name}WSBase#else${service.name}Base#end {

#foreach ($operation in $service.allowedOperations)

#if($operation.returnTypePresent)
#set ($returnType = "#if($operation.returnType.primitive)$operation.returnType.wrapperName#else$operation.getterSetterReturnTypeName#end")
#set ($return = "org.springframework.http.ResponseEntity<$returnType>")
#else
#set ($return = "void")
#end
    @Override
    $operation.visibility $return handle$stringUtils.capitalize(${operation.signature}) {
#if($isService)
#set ($call = "$stringUtils.uncapitalize(${service.name}).${operation.name}($operation.argumentNames)")
#set ($optional = "java.util.Optional.of($call)")
#else
#set ($call = "// TODO: Add custom code here")
#set ($optional = "java.util.Optional.empty(); $call")
#end
#if ($operation.returnTypePresent)
        java.util.Optional<$returnType> data = $optional;
        org.springframework.http.ResponseEntity<$returnType> response;

        if(data.isPresent()) {
            response = org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.OK).body(data.get());
        } else {
            response = org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.NOT_FOUND).build();
        }

        return response;
#else
        $call;
#end
    }
#end
}