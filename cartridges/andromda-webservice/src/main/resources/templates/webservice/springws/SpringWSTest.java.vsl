// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-webservice-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($generatedFile = "${service.implementationPackagePath}/${service.name}Test.${implementationLanguage}")
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.DisplayName;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;

import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;

@ExtendWith(MockitoExtension.class)
public class ${service.name}Test {
    
    @Autowired
    ApplicationContext context;

    @Autowired
    private JdbcTemplate jdbc;
    
    @Autowired
    private ${service.name} $stringUtils.uncapitalize($service.name);

#foreach($ref in $service.entityReferences)
    @Autowired
    private $ref.targetElement.fullyQualifiedDaoName $ref.daoName;

#set ($ent = $ref.targetElement)
    @Autowired
    private ${ent.fullyQualifiedName}Repository ${stringUtils.uncapitalize($ent.name)}Repository;

#end
#foreach ($operation in $service.allowedOperations)
    @Test
    @DisplayName("${operation.testDisplayName} Success")
    public void ${operation.testName}Success() {
        
    }

    @Test
    @DisplayName("${operation.testDisplayName} Fail")
    public void ${operation.testName}Fail() {
        
    }

#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
    @Test
    @DisplayName("${operation.testDisplayName} ${stringUtils.toPhrase(${argument.name})} Null")
    public void ${operation.testName}${stringUtils.capitalize(${argument.name})}Null() {
        
    }

#if (!$argument.many && !$argument.type.enumeration && !$argument.type.entityMetaType)
#foreach ($attribute in $argument.type.getAttributes(true))
    @Test
    @DisplayName("${operation.testDisplayName} ${stringUtils.toPhrase(${argument.name})} ${stringUtils.toPhrase(${attribute.name})} Null")
    public void ${operation.testName}${stringUtils.capitalize(${argument.name})}${stringUtils.capitalize(${attribute.name})}Null() {
        
    }

#end
#end
#end
#end
#end
#end
}