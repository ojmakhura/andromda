// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
package ${service.packageName};
#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ( $isService = $webServiceUtils.isService($service))
#if($isService)
#set ( $serviceTestName = "${service.name}WSTest")
#set ( $serviceName = "${service.name}WS")
#else
#set ( $serviceTestName = "${service.name}Test")
#set ( $serviceName = "${service.name}")
#end
import org.junit.ClassRule;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.testcontainers.containers.PostgreSQLContainer;

import ${applicationPackage}.${stringUtils.capitalize($applicationId)}TestContainer;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
public class ${serviceTestName} {

    @ClassRule
    public static PostgreSQLContainer postgreSQLContainer = ${stringUtils.capitalize($applicationId)}TestContainer.getInstance();

    private String path = #if ($stringUtils.isNotBlank($service.restPath))"$service.restPath"#else"${service.name.toLowerCase()}sws"#end;

    protected Logger logger = LoggerFactory.getLogger(${serviceTestName}.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ${serviceName} $stringUtils.uncapitalize(${serviceName});

#if($isService)
    @Autowired
    protected ${service.fullyQualifiedName} $stringUtils.uncapitalize(${service.name});

#end
#foreach($ref in $service.allServiceReferences)
    @Autowired
    protected $ref.targetElement.fullyQualifiedName $ref.name;

#end
#foreach($ref in $service.entityReferences)
#set ($ent = $ref.targetElement)
    @Autowired
    protected ${ent.fullyQualifiedDaoName} $ref.daoName;

    @Autowired
    protected ${ent.fullyQualifiedName}Repository ${ref.name}Repository;

#end
    @BeforeEach
    public void clean() {
    }

#foreach ($operation in $service.allowedOperations)
#if($secure)
    @WithMockUser(username = "testuser4", password = "testuser1")
#end
    @Test
    public void ${operation.name}() {

    }

#end
}