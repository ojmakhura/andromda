// license-header java merge-point
/* Autogenerated by AndroMDA - do not edit
 *
 * TEMPLATE:    SessionRemoteHome.vsl in andromda-ejb-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import java.rmi.RemoteException;
import jakarta.ejb.CreateException;
import jakarta.ejb.EJBHome;

/**
 * Remote home interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public interface ${service.name}Home
#if($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Home
#else
    extends EJBHome
#end
{
## Only expose constants and create methods on concrete EJBs.
#if (!$service.abstract)
    // -- accessors for environment entries and constants --
    /** Remote Component Name */
    // Interface fields are public static final unless declared differently
    String COMP_NAME="java:comp/env/${service.jndiName}/Remote";
    /** Remote JNDI Lookup Name */
    String JNDI_NAME="${service.jndiName}/Remote";

    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
#foreach ( $operation in $service.getCreateMethods(true))

    /**
$operation.getDocumentation("    * ")
     */
    public ${service.name} create($operation.typedArgumentList)
        throws CreateException, RemoteException;
#end
## Only expose the autogenerated create method with no arguments if it
## is not explicitly switched off.
#if ($service.syntheticCreateMethodAllowed && !$service.generalization )

    /**
     * Default create method.
     *
     * @return ${service.name} Service reference
     * @throws CreateException If the Creation fails
     * @throws RemoteException If the remote cannot be found
     */
    public ${service.name} create()
        throws CreateException, RemoteException;
#end
#end
}