// license-header java merge-point
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#if (!$entity.identifiers.empty)
#set ($identifier = $entity.identifiers.iterator().next())
#end
/**
 * Home interface for the $entity.name entity bean.
$entity.getDocumentation(" * ")
 */
public interface ${entity.name}LocalHome
#if ($entity.generalization)
    extends ${entity.generalization.fullyQualifiedName}LocalHome
#else
    extends jakarta.ejb.EJBLocalHome
#end
{
## Only expose JNDI names on concrete EJBs.
#if (!$entity.abstract)
    // -- accessors for environment entries and constants --
    public static final String COMP_NAME="java:comp/env/${entity.jndiName}/Local";
    public static final String JNDI_NAME="${entity.jndiName}/Local";
#end

#foreach($envEntry in $entity.getEnvironmentEntries(true))
#if($envEntry.visibility == "public")
    /**
     * Get the ${envEntry.name} environment entry
$envEntry.getDocumentation("     * ")
     */
    public $envEntry.type.fullyQualifiedName ${envEntry.getterName}();

#end
#end
    // -- accessors for constants --
#foreach($constant in $entity.constants)
## Only expose the method to the home interface if it is public.
#if($constant.visibility == "public")
    /**
     * Get the $attribute.name constant
$constant.getDocumentation("     * ")
     */
    public $constant.type.fullyQualifiedName ${constant.getterName}();

#end
#end
    // ---------------- home methods  ----------------------
#foreach ( $operation in $entity.businessOperations)
#set ($visibility = $operation.visibility.toString())
## Only expose public static methods (public nonstatic methods go on the
## component interface)
#if ($visibility == "public" && $operation.static)
   /**
$operation.getDocumentation("    * ")
    */
#set ($returnType = $operation.getterSetterReturnTypeName)
#if ($operation.exceptionsPresent)
    public $returnType $operation.signature throws $operation.exceptionList;
#else
    $visibility $returnType $operation.signature;
#end
#end
#end
## Only expose create and finder methods on concrete EJBs.
#if (!$entity.abstract)

    // ---------------- finder methods  ----------------------

    /**
     * Find this entity by its primary key
     * @param key the primary key;
     */
     public $entity.name findByPrimaryKey($identifier.type.fullyQualifiedName key)
            throws jakarta.ejb.FinderException;

#foreach ($finder in $entity.queryOperations)
   /**
$finder.getDocumentation("    * ")
    */
    public $finder.getterSetterReturnTypeName $finder.signature
           throws jakarta.ejb.FinderException;

#end
#end
    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
#foreach ( $operation in $entity.getCreateMethods(true))
    /**
$operation.getDocumentation("    * ")
     */
    public $entity.name create(${operation.typedArgumentList}) throws jakarta.ejb.CreateException;

#end

## Only expose the autogenerated create method with all attributes if it
## is not explicitly switched off.
#if ($entity.syntheticCreateMethodAllowed)
    /**
     * Create method with all CMP attribute values.
#set ($allAttributes = $transform.filterByVisibility($entity.allInstanceAttributes, "public"))
#foreach($attribute in $allAttributes)
     * @param $attribute.name Value for the $attribute.name property
#end
     */
    public $entity.name create(${transform.getAttributesAsList($allAttributes, true, true)})
           throws jakarta.ejb.CreateException;
#set ($relations = $entity.allEntityRelations)
#if (!$relations.empty)

    /**
     * Create method with all CMP attribute values and CMR relations.
#foreach($attribute in $allAttributes)
     * @param $attribute.name Value for the $attribute.name property
#end
#foreach ($relation in $relations)
     * @param $relation.otherEnd.name Value for the ${relation.otherEnd.name} relation role
#end
     */
    public $entity.name create(${transform.getAttributesAsList($allAttributes, true, true)}#if(!$allAttributes.empty), #end#foreach ($relation in $relations)${relation.relationType} $relation.otherEnd.name#if($velocityCount != $relations.size()), #end#end)
           throws jakarta.ejb.CreateException;

#end
#end
}