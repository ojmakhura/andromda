// license-header java merge-point
/* Autogenerated by AndroMDA (SessionRemote.vsl) - do not edit */
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import java.rmi.RemoteException;
import jakarta.ejb.EJBObject;

/**
 * Remote component interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public interface ${service.name}
#if ($service.generalization)
    extends $service.generalization.fullyQualifiedName
#else
    extends EJBObject
#end
{
    // -- accessors for environment entries --
#foreach($envEntry in $service.getEnvironmentEntries(true))
#if($visibility == "public")
    /**
     * Get the ${envEntry.name} environment entry
$envEntry.getDocumentation("     * ")
     * @return service fullyQualifiedName
     */
    $envEntry.type.fullyQualifiedName ${envEntry.getterName}();

#end
#end
    // -- accessors for constants --
#foreach($constant in $service.constants)
## Only expose the method to the home interface if it is public.
#if($constant.visibility == "public")
    /**
     * Get the $attribute.name constant
$constant.getDocumentation("     * ")
     * @return $constant fullyQualifiedName
     */
    $constant.type.fullyQualifiedName ${constant.getterName}();

#end
#end
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.instanceAttributes)
    /**
     * Get the ${attribute.name} property
$attribute.getDocumentation("     * ")
     * @return ${attribute.name} fullyQualifiedName
     */
    $attribute.type.fullyQualifiedName ${attribute.getterName}()
        throws RemoteException;

#if(!$attribute.readOnly)
    /**
     * Set the $attribute.name property
     * @param value the new value
     * @throws RemoteException
     */
    void ${attribute.setterName}($attribute.type.fullyQualifiedName value)
        throws RemoteException;
#end
#end

    // ---------------- business methods  ----------------------
#foreach ( $operation in $service.businessOperations)
## Only expose public methods
#if ($operation.visibility == "public")

#set ($returnType = $operation.getterSetterReturnTypeName)
   /**
$operation.getDocumentation("    * ")
#foreach ($argument in $operation.arguments)
    * @param $argument.name
#end
#if ($operation.returnTypePresent)
    * @return $returnType
#end
    * @throws RemoteException
#foreach ($exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
    */
#if ($operation.exceptionsPresent)
    $returnType $operation.signature
        throws $operation.getExceptionList('java.rmi.RemoteException');
#else
    $returnType $operation.signature
        throws RemoteException;
#end
#end
#end
}