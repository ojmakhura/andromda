// license-header java merge-point
/* Autogenerated by AndroMDA (SessionLocal.vsl) - do not edit */
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
 * Local component interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public interface ${service.name}Local
#if($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Local
#else
    extends jakarta.ejb.EJBLocalObject
#end
{
    // -- accessors for environment entries --
#foreach($envEntry in $service.getEnvironmentEntries(true))
#if($envEntry.visibility == "public")
    /**
     * Get the ${envEntry.name} environment entry
$envEntry.getDocumentation("     * ")
     */
    public $envEntry.type.fullyQualifiedName get$AttName();

#end
#end
    // -- accessors for constants --
#foreach($attribute in $service.staticAttributes)
#if(!$attribute.hasStereotype("EnvEntry"))
#set ($visibility = $attribute.visibility)
## Only expose the method to the home interface if it is public.
#if($visibility == "public")
#set($attType = $attribute.type.fullyQualifiedName)
#set($AttName = $stringUtils.capitalize($attribute.name))
    /**
     * Get the $attribute.name constant
$attribute.getDocumentation("     * ")
     */
    public $attType get$AttName();

#end
#end
#end
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.instanceAttributes)
#set ($visibility = $attribute.visibility)
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
    /**
     * Get the ${attribute.name} property
$attribute.getDocumentation("     * ")
     */
    public $attribute.type.fullyQualifiedName ${attribute.getterName}();

#if(!$attribute.readOnly)
    /**
     * Set the ${attribute.name} property
     * @param value the new value
     */
    public void ${attribute.setterName}($attribute.type.fullyQualifiedName value);
#end
#end
#end

    // ---------------- business methods  ----------------------
#foreach ( $operation in $service.businessOperations)
#set ($visibility = $operation.visibility)
## Only expose public methods
#if ($visibility == "public")

   /**
$operation.getDocumentation("    * ")
    */
#set ($returnType = $operation.getterSetterReturnTypeName)
#if ($operation.exceptionsPresent)
    public $returnType $operation.signature
    throws $operation.exceptionList;
#else
    $visibility $returnType $operation.signature;
#end
#end
#end
}