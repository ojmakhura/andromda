// license-header java merge-point
/* Autogenerated by AndroMDA, but you can edit this impl class
 *
 * TEMPLATE:    SessionBeanImpl.vsl in andromda-ejb-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
 * @see ${service.fullyQualifiedName}Bean
 */
public class ${service.name}BeanImpl
    extends ${service.name}Bean
{
    /** serialVersionUID = 1L, increment each time signatures change */
    private static final long serialVersionUID = 1L;

#foreach ($operation in $service.operations)
#set ($returnType = $operation.getterSetterReturnTypeName)
#set ($signature = $operation.signature)
#set ($visibility = $operation.visibility)
## Public static methods are exposed on the home
## interface instead of the component interface and must
## be prepended with "ejbHome"
#if ($visibility == "public" && $operation.static)
#set ($signature = "ejbHome${stringUtils.capitalize($signature)}")
#end
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $returnType
#end
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     * @see ${service.fullyQualifiedName}${esc.hash}${operation.getSignature(false)}
     */
    $visibility $returnType $signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        try
        {
            //this.createApplicationContext();
            Object parms = new Object[] { ${operation.argumentNames} };
            //TODO: put your implementation here.
#if ($operation.returnTypePresent)
            // Dummy return value, just that the file compiles
            return $operation.returnType.javaNullString;
#end
        }
        catch (Exception e)
        {
            throw new jakarta.ejb.EJBException("Error trying to process: ${operation.name}($operation.argumentNames)", e);
        }
    }

#end
}
