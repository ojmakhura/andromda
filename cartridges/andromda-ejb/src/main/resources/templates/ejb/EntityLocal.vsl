// license-header java merge-point
/* Autogenerated by AndroMDA (EntityLocal.vsl) - do not edit */
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

/**
 * Local component interface for the $entity.name entity bean.
$entity.getDocumentation(" * ")
 */
public interface $entity.name
#if ($entity.generalization)
    extends $entity.generalization.fullyQualifiedName
#else
    extends jakarta.ejb.EJBLocalObject
#end
{
    // -- accessors for environment entries --
#foreach($envEntry in $entity.getEnvironmentEntries(true))
#if($envEntry.visibility == "public")
    /**
     * Get the ${envEntry.name} environment entry
$envEntry.getDocumentation("     * ")
     */
    public $envEntry.type.fullyQualifiedName ${envEntry.type.getterName}();

#end
#end
    // -- accessors for constants --
#foreach($constant in $entity.constants)
## Only expose the method to the home interface if it is public.
#if($constant.visibility == "public")
    /**
     * Get the $constant.name constant
$constant.getDocumentation("     * ")
     */
    public $constant.type.fullyQualifiedName ${constant.getterName}();

#end
#end

    // ------------- attributes ----------------
#foreach ( $attribute in $entity.instanceAttributes)
#set ($visibility = $attribute.visibility)
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
    /**
     * Get the ${attribute.name} property
$attribute.getDocumentation("     * ")
     */
    public $attribute.type.fullyQualifiedName ${attribute.getterName}();

#if(!$attribute.readOnly)
    /**
     * Set the ${attribute.name} property
     * @param value the new value
     */
    public void ${attribute.setterName}($attribute.type.fullyQualifiedName value);

#end
#end
#end
    // ------------- relations ------------------

#foreach ( $relation in $entity.entityRelations)
#set ($target = $relation.otherEnd)
#set ($targetTypeName = $relation.relationType)

   /**
    * Get the ${relation.otherEnd.name}
$relation.otherEnd.getDocumentation("    * ")
    */
    public $targetTypeName ${target.getterName}();

   /**
    * Set the $relation.otherEnd.name
    */
    public void ${target.setterName}($targetTypeName $relation.otherEnd.name);
#end ## foreach

    // ---------------- business methods  ----------------------

#foreach ( $operation in $entity.businessOperations)
#set ($visibility = $operation.visibility)
## Only expose public, nonstatic methods (public static methods go on the home
## interface)
#if ($visibility == "public" && !$operation.static)
    /**
$operation.getDocumentation("    * ")
     */
#if ($operation.exceptionsPresent)
    public $operation.getterSetterReturnTypeName $operation.signature
        throws $operation.exceptionList;
#else
    $visibility $operation.getterSetterReturnTypeName $operation.signature;
#end
#end
#end

#foreach ($valueRef in $entity.valueDependencies)
#set ($reference = $valueRef.targetElement)
    /**
     * Interface accessor for ValueObject ${reference.name}
     */
     public ${reference.fullyQualifiedName} get${reference.name}();

    /**
     * Interface accessor for ValueObject ${reference.name}
     */
     public void set${reference.name}(${reference.fullyQualifiedName} valueObject);

#end
}