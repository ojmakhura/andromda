// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\UseCasePhaseListener.java.vsl) DO NOT EDIT!
package $managedBeansPackage;

public class UseCasePhaseListener implements ${jakartaNamespace}.faces.event.PhaseListener {

    private static final long serialVersionUID = 1879387492374102L;

    @Override
    public void beforePhase(${jakartaNamespace}.faces.event.PhaseEvent event) {
        if(event.getPhaseId().equals(${jakartaNamespace}.faces.event.PhaseId.RESTORE_VIEW))
        {
            //Sometimes the useCaseScope is in the Flash but not in the request...
            final ${jakartaNamespace}.faces.context.ExternalContext externalContext=event.getFacesContext().getExternalContext();
            final java.util.Map<String, Object> requestMap = externalContext.getRequestMap();
            if(!requestMap.containsKey(ControllerBase.USE_CASE_SCOPE_KEY))
            {
                final ${jakartaNamespace}.faces.context.Flash flash = externalContext.getFlash();
                if(flash.containsKey(ControllerBase.USE_CASE_SCOPE_KEY))
                {
                    externalContext.getRequestMap().put(ControllerBase.USE_CASE_SCOPE_KEY,externalContext.getFlash().get(ControllerBase.USE_CASE_SCOPE_KEY));
                }
            }
        }
        else if(event.getPhaseId().equals(PhaseId.RENDER_RESPONSE))
        {
            //forward to the same usecase
            final ${jakartaNamespace}.faces.context.FacesContext facesContext=event.getFacesContext();
            final java.util.Map<String, Object> requestMap = facesContext.getExternalContext().getRequestMap();
            final java.util.Map<String, Object> viewScope = facesContext.getViewRoot().getViewMap();
            //Response: if the current view does not have the scope key but the request has, new view - forward
            if(!viewScope.containsKey(ControllerBase.USE_CASE_SCOPE_KEY) && 
                requestMap.containsKey(ControllerBase.USE_CASE_SCOPE_KEY))
            {
                //copy the scope key
                viewScope.put(ControllerBase.USE_CASE_SCOPE_KEY,requestMap.get(ControllerBase.USE_CASE_SCOPE_KEY));
            }
        }
    }

    @Override
    public void afterPhase(${jakartaNamespace}.faces.event.PhaseEvent event) {
        if(event.getPhaseId().equals(${jakartaNamespace}.faces.event.PhaseId.RESTORE_VIEW))
        {
            final ${jakartaNamespace}.faces.context.FacesContext facesContext=event.getFacesContext();
            final ${jakartaNamespace}.faces.context.ExternalContext externalContext=facesContext.getExternalContext();
            
            final java.util.Map<String, Object> requestMap = externalContext.getRequestMap();
            final java.util.Map<String, Object> viewScope = facesContext.getViewRoot().getViewMap();
            if (viewScope.containsKey(ControllerBase.USE_CASE_SCOPE_KEY)) 
            {
                //try to get the value from the viewscope when possible, because in some cases the flash scope fails (many windows/tabs) 
                requestMap.put(ControllerBase.USE_CASE_SCOPE_KEY,viewScope.get(ControllerBase.USE_CASE_SCOPE_KEY));
            }
            else if(requestMap.containsKey(ControllerBase.USE_CASE_SCOPE_KEY))
            {
                //put it in the viewscope too.
                viewScope.put(ControllerBase.USE_CASE_SCOPE_KEY,requestMap.get(ControllerBase.USE_CASE_SCOPE_KEY));
            }
        } 
        else if(event.getPhaseId().equals(${jakartaNamespace}.faces.event.PhaseId.RENDER_RESPONSE))
        {
            // keep the useCaseScope alive in the next request
            event.getFacesContext().getExternalContext().getFlash().keep(ControllerBase.USE_CASE_SCOPE_KEY);
        }
    }

    @Override
    public ${jakartaNamespace}.faces.event.PhaseId getPhaseId() {
        return ${jakartaNamespace}.faces.event.PhaseId.ANY_PHASE;
    }
}