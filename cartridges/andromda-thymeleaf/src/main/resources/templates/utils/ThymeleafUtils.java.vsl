// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\ThymeleafUtils.java.vsl) DO NOT EDIT!
package $managedBeansPackage;

import org.apache.commons.lang3.StringUtils;

/**
 * Utilities used within the JSF Cartridge
 *
 * @author Chad Brandon
 * @author Walter Mourao
 */
@${jakartaNamespace}.inject.Named("jakartaUtils")
@${jakartaNamespace}.enterprise.context.SessionScoped
public class ThymeleafUtils implements java.io.Serializable
{

    /**
     * Returns the current FacesContext
     *
     * @return the current FacesContext
     */
    public static ${jakartaNamespace}.faces.context.FacesContext getFacesContext()
    {
        return ${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance();
    }
    
    /**
     * Returns the requestMap
     *
     * @return the requestMap
     */
    public static java.util.Map<String,Object> getRequestMap()
    {
        return getFacesContext().getExternalContext().getRequestMap();
    }
    
    /**
     * Returns the value in requestMap
     *
     * @ return the value in requestMap
     */
    public static Object getValueInRequestMap(String key)
    {
        return getRequestMap().get(key);
    }
    
    /**
     * Returns the the current flash scope.
     *
     * @return Map<String,Object>
     */
    public static ${jakartaNamespace}.faces.context.Flash getFlash()
    {
        return getFacesContext().getExternalContext().getFlash();
    }
    
    /**
     * A helper method that gets the current request from the faces
     * context.
     *
     * @return the current request instance.
     */
    public static ${jakartaNamespace}.servlet.http.HttpServletRequest getRequest()
    {
        return (${jakartaNamespace}.servlet.http.HttpServletRequest)getFacesContext().getExternalContext().getRequest();
    }

    /**
     * A helper method that gets the current reponse from the faces
     * context.
     *
     * @return the current response instance.
     */
    public static ${jakartaNamespace}.servlet.http.HttpServletResponse getResponse()
    {
        return (${jakartaNamespace}.servlet.http.HttpServletResponse)getFacesContext().getExternalContext().getResponse();
    }

#if($trinidad)    
    /**
     * A helper method that gets the current pageFlowScope
     *
     * @return the current pageFlowScope.
     */
    public static Map<String, Object> getPageFlowScope(){
        return org.apache.myfaces.trinidad.context.RequestContext.getCurrentInstance().getPageFlowScope();
    }

#end
    /**
     * A helper method that gets the current session from the faces
     * context.
     *
     * @param create If the create parameter is true, create (if necessary) and return a
     *        session instance associated with the current request. If the create
     *        parameter is false return any existing session instance associated with the
     *        current request, or return null if there is no such session.
     * @return the current session instance.
     */
    public static ${jakartaNamespace}.servlet.http.HttpSession getSession(final boolean create)
    {
        return (${jakartaNamespace}.servlet.http.HttpSession)getFacesContext().getExternalContext().getSession(create);
    }

    /**
     * A helper method that gets the current session from the faces
     * context.
     *
     * @return the current session instance.
     */
    public static ${jakartaNamespace}.servlet.http.HttpSession getSession()
    {
        return (${jakartaNamespace}.servlet.http.HttpSession)getFacesContext().getExternalContext().getSession(false);
    }
    
    /**
     * Attempts to resolve the variable, given, the <code>name</code> of
     * the variable using the faces context variable resolver instance.
     *
     * @param name
     * @return the resolved variable or null if not found.
     */
    public static Object resolveVariable(final String name)
    {
        return getFacesContext().getApplication().getELResolver().getValue(getFacesContext().getELContext(), null, (Object)name);
    }

#if($trinidad)
    /**
     * Adds a javascript to be executed in the browser
     *
     * @param script the script
     */
    public void addPPRScript(String script){
        ${jakartaNamespace}.faces.context.FacesContext facesContext = getFacesContext();
        final org.apache.myfaces.trinidad.render.ExtendedRenderKitService service = (org.apache.myfaces.trinidad.render.ExtendedRenderKitService)org.apache.myfaces.trinidad.util.Service.getRenderKitService(facesContext, org.apache.myfaces.trinidad.render.ExtendedRenderKitService.class);
        service.addScript(facesContext, script);
    }

#end    
    /**
     * Sets the value of a request attribute
     *
     * @param name the request attribute name
     * @param object the request attribute value
     */
    public static void setRequestAttribute(final String name, final Object object)
    {
        getRequest().setAttribute(name, object);
    }

    /**
     * Gets the value of a request attribute
     *
     * @param name the request attribute name
     * @return RequestAttribute
     */
    public static Object getRequestAttribute(final String name)
    {
        return getRequest().getAttribute(name);
    }

    /**
     * Sets the value of a session attribute
     *
     * @param name the session attribute name
     * @param object the session attribute value
     */
    public static void setSessionAttribute(final String name, final Object object)
    {
        getSession().setAttribute(name, object);
    }

    /**
     * Finds the root cause of the given <code>throwable</code> and
     * adds the message taken from that cause to the faces context messages.
     *
     * @param throwable the exception information to add.
     */
    public static final void addExceptionMessage(
        Throwable throwable)
    {
        String message = null;
        final Throwable rootCause = org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(throwable);
        if (rootCause != null)
        {
            message = rootCause.toString();
        }
        if (message == null || message.trim().length() == 0)
        {
            message = throwable.toString();
        }
        addErrorMessage(message);
    }

    /**
     * Adds the given error <code>message</code> to the current faces context.
     *
     * @param clientId the component client id.
     * @param message the message to add.
     */
    public static void addErrorMessage(final String clientId, final String message)
    {
        addMessage(clientId,${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_ERROR, message);
    }

    /**
     * Adds the given error <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    public static void addErrorMessage(final String message)
    {
        addMessage(${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_ERROR, message);
    }

    /**
     * Adds the given warning <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    public static void addWarningMessage(final String message)
    {
        addMessage(${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_WARN, message);
    }

    /**
     * Adds the given error <code>message</code> to the current faces context.
     *
     * @param clientId the component client id.
     * @param message the message to add.
     */
    public static void addWarningMessage(final String clientId, final String message)
    {
        addMessage(clientId,${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_WARN, message);
    }

    /**
     * Adds the given info <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    public static void addInfoMessage(final String message)
    {
        addMessage(${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_INFO, message);
    }

    /**
     * Adds the given fatal <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    public static void addFatalMessage(final String message)
    {
        addMessage(${jakartaNamespace}.faces.application.FacesMessage.SEVERITY_FATAL, message);
    }

    /**
     * Adds a message to the faces context (which will show up on your view when using the
     * lt;h:messages/gt; tag).
     *
     * @param clientId the clientId of the component
     * @param severity the severity of the message
     * @param message the message to add.
     */
    public static void addMessage(final String clientId, final ${jakartaNamespace}.faces.application.FacesMessage.Severity severity, final String message)
    {
        getFacesContext().addMessage(clientId, new FacesMessage(severity, message, null));
    }

    /**
     * Adds a message to the faces context (which will show up on your view when using the
     * lt;h:messages/gt; tag).
     *
     * @param severity the severity of the message
     * @param message the message to add.
     */
    public static void addMessage(final ${jakartaNamespace}.faces.application.FacesMessage.Severity severity, final String message)
    {
        addMessage(null, severity, message);
    }

    /**
     * Gets the value of a session attribute
     *
     * @param name the session attribute name
     * @return SessionAttribute
     */
    public static Object getSessionAttribute(final String name)
    {
        return getSession().getAttribute(name);
    }

    /**
     * Returns an FacesEvent parameter value, from its name
     *
     * @param parameterName the name of the parameter.
     * @param event the FacesEvent holding the parameter.
     * @return ParameterValue
     */
    public static Object getParameterValue(String parameterName, ${jakartaNamespace}.faces.event.FacesEvent event)
    {
        for(Object uiObject : event.getComponent().getChildren()){
            if(uiObject instanceof ${jakartaNamespace}.faces.component.UIParameter){
                final ${jakartaNamespace}.faces.component.UIParameter param = (${jakartaNamespace}.faces.component.UIParameter)uiObject;
                if(param.getName().equals(parameterName)) {
                    return param.getValue();
                }
            }
        }
        return null;
    }

    /**
     * Returns an UIComponent from the current view root
     *
     * @param id the id of the component.
     * @return ParameterValue
     */
    public static ${jakartaNamespace}.faces.component.UIComponent getComponent(String id) { 
        return ${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance().getViewRoot().findComponent(id) ; 
    }
    
    /**
     * Force the component to get its value from the backing bean before rendering
     *
     * @param uic the parent UIComponent.
     */
    public static void resetEditableComponentsValues(${jakartaNamespace}.faces.component.UIComponent uic)
    {
        if(uic instanceof ${jakartaNamespace}.faces.component.EditableValueHolder)
        {
            final ${jakartaNamespace}.faces.component.EditableValueHolder evh=(${jakartaNamespace}.faces.component.EditableValueHolder)uic;
            evh.setValue(null);
            evh.setSubmittedValue(null);
            evh.setLocalValueSet(false);
            evh.setValid(true);
        }
        for(Object component: uic.getChildren())
        {
            resetEditableComponentsValues((${jakartaNamespace}.faces.component.UIComponent)component);
        }
    }

    /**
     * Force all the editable components to get its values from the backing bean before rendering
     */
    public static void resetAllEditableComponentsValues()
    {
        final ${jakartaNamespace}.faces.component.UIComponent viewRoot=getFacesContext().getViewRoot();
        if(viewRoot != null)
        {
            resetEditableComponentsValues(getFacesContext().getViewRoot());
        }
    }

    /**
     * Returns the converter identified by converterId
     *
     * @param converterId the id of the converter to be used
     * @return the Converter instance
     */
    public static ${jakartaNamespace}.faces.convert.Converter getConverter(
            final String converterId)
    {
        if(org.apache.commons.lang3.StringUtils.isEmpty(converterId))
        {
            return null;
        }
        final ${jakartaNamespace}.faces.context.FacesContext facesContext=${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance();
        return facesContext.getApplication().createConverter(converterId);
    }

    /**
     * Uses the converter identified by converterId to convert the value to a String.
     *
     * @param value the value to be converted
     * @param converterId the id of the converter to be used
     * @param componentId the id of the component being rendered
     * @return the String representation of the value.
     */
    public static String valueFromConverter(
            final Object value,
            final String converterId,
            final String componentId)
    {
        final ${jakartaNamespace}.faces.context.FacesContext facesContext=${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance();
        final ${jakartaNamespace}.faces.convert.Converter converter = facesContext.getApplication().createConverter(converterId);
        return converter.getAsString(facesContext,
                org.apache.commons.lang3.StringUtils.isEmpty(componentId)?null:facesContext.getViewRoot().findComponent(componentId),
                value);
    }

    /**
     * Uses the converter identified by converterId to convert the value to a String.
     *
     * @param value the value to be converted
     * @param converterId the id of the converter to be used
     * @param componentId the id of the component being rendered
     * @param escapeEcmascript flag to escape javascript
     * @return the String representation of the value.
     */
    public static String valueFromConverter(
            final Object value,
            final String converterId,
            final String componentId,
            final Boolean escapeEcmascript)
    {
        final String result = valueFromConverter(value,converterId,componentId);
        return escapeEcmascript?org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(result):result;
    }    

    /**
     * Uses the converter identified by converterId to convert the value to a String.
     *
     * @param value the value to be converted
     * @param converterId the id of the converter to be used
     * @return the String representation of the value.
     */
    public static String valueFromConverter(
            final Object value,
            final String converterId)
    {
        final ${jakartaNamespace}.faces.context.FacesContext facesContext=${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance();
        final ${jakartaNamespace}.faces.convert.Converter converter = facesContext.getApplication().createConverter(converterId);
        return converter.getAsString(facesContext,null,value);
    }

    /**
     * Uses the converter identified by converterId to convert the value to a String.
     *
     * @param value the value to be converted
     * @param converterId the id of the converter to be used
     * @param escapeEcmascript flag to escape javascript
     * @return the String representation of the value.
     */
    public static String valueFromConverter(
            final Object value,
            final String converterId,
            final Boolean escapeEcmascript)
    {
        final String result = valueFromConverter(value,converterId);
        return escapeEcmascript?org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(result):result;
    }    

    /**
     * Returns an ${jakartaNamespace}.faces.event.ActionEvent parameter value, from its name
     *
     * @param parameterName the parameter name
     * @param event ActionEvent containing the parameter
     * @return the parameter value.
     */
    public static Object getParameterValue(String parameterName, ${jakartaNamespace}.faces.event.ActionEvent event)
    {
        for(Object uiObject : event.getComponent().getChildren())
        {
            if(uiObject instanceof ${jakartaNamespace}.faces.component.UIParameter)
            {
                final ${jakartaNamespace}.faces.component.UIParameter param = (${jakartaNamespace}.faces.component.UIParameter)uiObject;
                if(param.getName().equals(parameterName))
                {
                    return param.getValue();
                }
            }
        }
        throw new RuntimeException("Parameter "+parameterName+" not found");
    }

    /**
     * Returns an array of SelectItem from the values/names of the enumeration
     *
     * @param prefix a String prefix to be used to load the name from the messages
     * @param enumClassName the enumeration class name
     * @return the array of SelectItem
     */
    @SuppressWarnings("rawtypes")
    public static ${jakartaNamespace}.faces.model.SelectItem[] getEnumSelectItems(final String prefix, final String enumClassName)
    {
        try
        {
            final ${jakartaNamespace}.faces.model.SelectItem[] result;
            final Class<?> enumClass=ThymeleafUtils.class.getClassLoader().loadClass(enumClassName);
            if(enumClass.isEnum())
            {
                final Enum[] values=(Enum[])enumClass.getMethod("values", (Class<?>[])null).invoke(null, (Object[])null);
                result=new ${jakartaNamespace}.faces.model.SelectItem[values.length];
                int i=0;
                for(final Enum value:values)
                {
                    result[i]=new ${jakartaNamespace}.faces.model.SelectItem(value,Messages.get(prefix+value.name()));
                    i++;
                }
            }
            else
            {
                final java.util.List values=(java.util.List)enumClass.getMethod("values", (Class<?>[])null).invoke(null, (Object[])null);
                final int sz=values.size();
                final java.util.List names=(java.util.List)enumClass.getMethod("names", (Class<?>[])null).invoke(null, (Object[])null);
                result=new ${jakartaNamespace}.faces.model.SelectItem[sz];
                for(int i=0; i<sz; i++)
                {
                    result[i]=new ${jakartaNamespace}.faces.model.SelectItem(values.get(i),Messages.get(prefix+names.get(i)));
                }
            }

            return result;
        }
        catch (Exception e)
        {
            throw new RuntimeException(enumClassName+" is not an Andromda generated enumeration.",e);
        }
    }

    /**
     * Returns the messages.properties message of the enumeration value
     *
     * @param prefix a String prefix to be used to load the name from the messages
     * @param enumValue the value
     * @return the String from the messages.properties
     */
    @SuppressWarnings("rawtypes")
    public static String getEnumMessage(final String prefix, final Object enumValue)
    {
        if(enumValue == null)
        {
            return org.apache.commons.lang3.StringUtils.EMPTY;
        }
        final Class<?> enumClass=enumValue.getClass();
        if(enumClass.isEnum())
        {
            return Messages.get(prefix+((Enum)enumValue).name());
        }
        try
        {
            final java.util.List values=(java.util.List)enumClass.getMethod("values", (Class<?>[])null).invoke(null, (Object[])null);
            final int sz=values.size();
            final java.util.List names=(java.util.List)enumClass.getMethod("names", (Class<?>[])null).invoke(null, (Object[])null);
            for(int i=0; i<sz; i++)
            {
                if(values.get(i).equals(enumValue))
                {
                    return Messages.get(prefix+names.get(i));
                }
            }
        }
        catch (Exception e)
        {
            throw new RuntimeException(enumValue.getClass().getCanonicalName()+" is not an Andromda generated enumeration.",e);
        }
        return null;
    }

    /**
     * Returns the array without the entries with zero (using to avoid the null to zero 
     * issue of EL)
     *
     * @param intArray an array filled with Integer
     * @return the array with the entries with zero and null removed
     */
    public static Integer[] removeZeros(Integer[] intArray)
    {
        if(intArray == null)
        {
            return null;
        }
        final java.util.Collection<Integer> result=new java.util.ArrayList<Integer>(intArray.length);
        for(Integer intValue: intArray)
        {
            if(intValue != null && intValue.intValue() != 0)
            {
                result.add(intValue);
            }
        }
        return result.toArray(new Integer[0]);
    }

    /**
     * Returns the array without the entries with zero (using to avoid the null to zero 
     * issue of EL)
     *
     * @param longArray an array filled with Integer
     * @return the array with the entries with zero and null removed
     */
    public static Long[] removeZeros(Long[] longArray)
    {
        if(longArray == null)
        {
            return null;
        }
        final java.util.Collection<Long> result=new java.util.ArrayList<Long>(longArray.length);
        for(Long longValue: longArray)
        {
            if(longValue != null && longValue.longValue() != 0)
            {
                result.add(longValue);
            }
        }
        return result.toArray(new Long[0]);
    }

    /**
     * Returns the current ViewRoot
     * @return the current Faces ViewRoot
     */
    public static ${jakartaNamespace}.faces.component.UIViewRoot getViewRoot() {
        return ${jakartaNamespace}.faces.context.FacesContext.getCurrentInstance().getViewRoot();
    }
    
    /**
     * Recursively locates a component in the view tree
     * @param id
     * @return
     */
    public static ${jakartaNamespace}.faces.component.UIComponent findComponentInRoot(String scopedId) {
        return getViewRoot().findComponent(scopedId);
    }
    
#if($trinidad)    
    /**
     * Guarantees the partial triggers is a String[].
     *
     * @param partialTriggers the partialTriggers attribute.
     * @return the original partialTriggers if it is a String[] or the partialTriggers splitted if it was a String.
     */
    public static String[] splitPartialTriggers(Object partialTriggers)
    {
        if(partialTriggers instanceof String)
        {
            final String thePartialTriggers=partialTriggers.toString().trim();
            if(thePartialTriggers.length() > 0){
                return thePartialTriggers.split(" ");
            }
            return null;
        }
        else if(partialTriggers instanceof String[])
        {
            return (String[])partialTriggers;
        }
        return null;
    }
    
    /*
     * Inclui o componente no PPR
     */
    static public void addComponentToPPR(String id){
        final ${jakartaNamespace}.faces.component.UIComponent component=findComponentInRoot(id);
        addComponentToPPR(component);
    }

    /*
     * Inclui o componente no PPR
     */
    static public void addComponentToPPR(String id, boolean resetValue){
        final ${jakartaNamespace}.faces.component.UIComponent component=findComponentInRoot(id);
        addComponentToPPR(component, resetValue);
    }

    static public org.apache.myfaces.trinidad.context.RequestContext getRequestContext(){
        return org.apache.myfaces.trinidad.context.RequestContext.getCurrentInstance();
    }
    /*
     * Inclui todos os componentes do viewRoot no PPR
     */
    static public void addComponentToPPR(${jakartaNamespace}.faces.component.UIComponent component, boolean recursive, boolean resetValue){
        if(component instanceof org.apache.myfaces.trinidad.component.UIXComponent){
            getRequestContext().addPartialTarget(component);
            if(resetValue && component instanceof org.apache.myfaces.trinidad.component.UIXEditableValue){
                ((UIXEditableValue)component).resetValue();
            }
        }
        if(recursive){
            for(Object uic: component.getChildren()){
                addComponentToPPR((${jakartaNamespace}.faces.component.UIComponent)uic,true,resetValue);
            }
        }
    }

    /*
     * Inclui o componente no PPR
     */
    static public void addComponentToPPR(${jakartaNamespace}.faces.component.UIComponent component, boolean resetValue){
        addComponentToPPR(component,false,resetValue);
    }

    /*
     * Inclui o componente no PPR
     */
    static public void addComponentToPPR(${jakartaNamespace}.faces.component.UIComponent component){
        addComponentToPPR(component,false,false);
    }

    private static void addChildrenToPPR(org.apache.myfaces.trinidad.context.RequestContext rc, ${jakartaNamespace}.faces.component.UIComponent component, boolean resetValue){
        rc.addPartialTarget(component);
        if(resetValue && component instanceof UIXEditableValue){
            ((org.apache.myfaces.trinidad.component.UIXEditableValue)component).resetValue();
        }
        for(Object obj: component.getChildren()){
            addChildrenToPPR(rc,(${jakartaNamespace}.faces.component.UIComponent)obj, resetValue);
        }
    }

    public static void addComponentAndChildrenToPPR(String clientId, boolean resetValue){
        ${jakartaNamespace}.faces.component.UIComponent component=getFacesContext().getViewRoot().findComponent(clientId);
        if(component != null){
            org.apache.myfaces.trinidad.context.RequestContext rc = RequestContext.getCurrentInstance();
            addChildrenToPPR(rc,component, resetValue);
            addComponentToPPR(component, resetValue);
        }
    }

    public static void addComponentAndChildrenToPPR(String clientId){
        addComponentAndChildrenToPPR(clientId, false);
    }
#end
}    
