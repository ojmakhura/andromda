// license-header java merge-point
// Generated by andromda-jakarta cartridge (flow\ActionForward.java.vsl) DO NOT EDIT!
#if ($stringUtils.isNotBlank($action.packageName))
package $action.packageName;
#end
#set($initialAction = $action.activityGraph.initialAction)
#set ($restPath = $jakartaUtils.toWebResourceName(${initialAction.triggerName}))
#if($initialAction.useCase && $initialAction.useCase.viewHasNameOfUseCase)
#set ($restPath = $restPath + "uc")
#end
/**
 * This servlet is used to allow controller operation execution through
 * a URL call.
 */
## @${jakartaNamespace}.servlet.annotation.WebServlet("${action.path}.${facesServletExtension}")
@${jakartaNamespace}.mvc.Controller
@${jakartaNamespace}.enterprise.context.RequestScoped
@${jakartaNamespace}.ws.rs.Path("${action.path}")
public class $action.actionClassName implements java.io.Serializable
##      extends ${jakartaNamespace}.servlet.http.HttpServlet
{
// 
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    @${jakartaNamespace}.inject.Inject
    private $action.controller.fullyQualifiedImplementationName $action.controller.beanName;

    @${jakartaNamespace}.ws.rs.GET
    public String start() throws Throwable {

        return ${action.controller.beanName}.startUseCase();
    }
##
##    /**
##     * @see ${jakartaNamespace}.servlet.http.HttpServlet#hash()doGet(${jakartaNamespace}.servlet.http.HttpServletRequest, ${jakartaNamespace}.servlet.http.HttpServletResponse)
##     */
##    @Override
##    public void doGet(
##        final ${jakartaNamespace}.servlet.http.HttpServletRequest request,
##        final ${jakartaNamespace}.servlet.http.HttpServletResponse response)
##        throws ${jakartaNamespace}.servlet.ServletException, java.io.IOException
##    {
##        // - we need to resolve the controller differently since we're outside of the faces servlet
## #set ($facesContextUtilsFullyQualifiedName = "FacesContextUtils")
## #if ($stringUtils.isNotBlank($managedBeansPackage))
## #set($facesContextUtilsFullyQualifiedName = "${managedBeansPackage}.${facesContextUtilsFullyQualifiedName}")
## #end
## #set ($controller = $action.controller)
## TODO UMLMETA-106 uml22 StateVertex outgoing FinalState target returns null/unknown for Exception transition.
##        // action=$action
##        // activityGraph=$action.activityGraph
##foreach ($state in $action.activityGraph.states)
##        // state=$state transition=$state.transition
##end
## Returns null in UML2 model
##        // controller=$action.activityGraph.controller
##        
##        final String forwardPath;
##        try
##        {
##            forwardPath = ${controller.beanName}.startUseCase();
##        }
##        catch(Throwable t)
##        {
##            throw new ${jakartaNamespace}.servlet.ServletException(t);
##        }
##        
##        if(forwardPath != null){
##            request.getRequestDispatcher(forwardPath).forward(request, response);
##        }
##    }
##
##    /**
##     * @see ${jakartaNamespace}.servlet.http.HttpServlet#hash()doPost(${jakartaNamespace}.servlet.http.HttpServletRequest, ${jakartaNamespace}.servlet.http.HttpServletResponse)
##     */
##    @Override
##    public void doPost(
##        final ${jakartaNamespace}.servlet.http.HttpServletRequest request,
##        final ${jakartaNamespace}.servlet.http.HttpServletResponse response)
##        throws ${jakartaNamespace}.servlet.ServletException, java.io.IOException
##    {
##        this.doGet(request, response);
##    }
}
