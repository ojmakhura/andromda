#set ($generatedFile = "${controller.fullyQualifiedNamePath}Base.java")
#set ($controllers = [])
// license-header java merge-point
// Generated by andromda-thymeleaf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package $controller.packageName;

import java.util.Map;
import java.util.HashMap;

#set($viewPopulator = "${controller.useCase.actionClassName}ViewPopulator")##should go to the controller metafacade
/**
$controller.getDocumentation(" * ")
 */
@org.springframework.stereotype.Controller
#foreach($annotation in $controller.additionalAnnotations)
@$annotation
#end
public abstract class ${controller.name}Base extends ${managedBeansPackage}.ControllerBase
    implements java.io.Serializable, ${controller.name} {

#foreach ($service in $controller.allServices)
	protected final $service.fullyQualifiedName $service.beanName;
    
#end
#set ($iter = $controller.allServices.iterator())
    public ${controller.name}Base(#foreach($ref in $controller.allServices)#set($serviceRef = $iter.next())$ref.fullyQualifiedName $ref.beanName#if($iter.hasNext() || $controller.entityReferences.size() > 0),#end#end) {
#foreach($ref in $controller.allServices)
        this.$ref.beanName = $ref.beanName;
#end
#set ($iter = $controller.entityReferences.iterator())
#foreach($ref in $controller.entityReferences)
        this.$serviceRef.name = $serviceRef.name;
        ${stringUtils.uncapitalize($ref.name)}Repository = ${stringUtils.uncapitalize($ref.name)}Repository;
#end         
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws java.lang.reflect.InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, java.lang.reflect.InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final java.util.Map<String,Object> pageVariables=this.getPageVariables(forward);
#set($showElse=false)
#foreach ($view in $controller.useCase.views)
#if ($view.populatorRequired)
#if($showElse)
        else
#end
#set ($viewPath = "${view.path}.html")
        if("${viewPath}".equals(forward))
        {
#foreach ($viewAction in $view.formActions)
            //${viewPopulator}.populateForm(sourceForm, this.get${view.pageObjectClassName}Form());
#end
#if(!$view.variables.empty)
            //${viewPopulator}.populate$stringUtils.upperCamelCaseName($view.name)PageVariables(sourceForm,pageVariables);
#end
        }
#set($showElse=true)
#if($velocityCount < $controller.useCase.views.size() && $showElse)
#set($showElse=true)
#end
#end
#end
        //this.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }

#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     *
     * @param form the associated form
     * @throws Throwable
     */
    $operation.formSignature
        throws Throwable;

#end
// actions
#foreach ($action in $controller.useCase.actions)

#if (!$action.formFields.empty)
    /**
     * Retrieves the {@link $action.fullyQualifiedFormImplementationName} form instance 
     *
     * @return $action.fullyQualifiedFormImplementationName
     */
    protected $action.fullyQualifiedFormImplementationName $action.formImplementationGetter
    {
        return new ${action.fullyQualifiedFormImplementationName}();
    }

#end
#set ($formPopulationOperationRequired = !$action.formFields.empty)
#set ($callParams = "")
#if(${action.exitingView})
#set($callParams = "${action.source.fullyQualifiedPageObjectClassName}Form form, ")
#else
#foreach($field in $action.parameters)
#set($callParams = "${callParams}$field.type.fullyQualifiedName $field.name, ")
#end
#end
    protected void ${action.triggerMethodName}(#if($formPopulationOperationRequired)$action.fullyQualifiedFormImplementationName form, #{end}org.springframework.ui.Model model)
    {
        //this method can be overridden
    }

#if($action.exitingInitialState)
#set ( $d = '"')
#set ( $useCaseParams = '')
#set ( $fieldPath = '')
#set ( $required = '')
#foreach($field in $action.parameters)
#if($field.required)
#if($required.length() > 0)
#set ($required = "$required/$field.name/{$field.name}")
#end
#end
#if($useCaseParams.length() > 0)
#set ($useCaseParams = "$useCaseParams#if($useCaseParams.length()), #end")
#end
#if(!$field.complex)
#set ($useCaseParams = "$useCaseParams @org.springframework.web.bind.annotation.PathVariable(name = $d$field.name$d, required=$field.required) $field.type.fullyQualifiedName $field.name")
#else
#set ($useCaseParams = "$useCaseParams $field.type.fullyQualifiedName $field.name")
#end
#set ($fieldPath = "$fieldPath/$field.name/{$field.name}")
#end
    @org.springframework.web.bind.annotation.GetMapping(#if($action.parameters.size() > 0){$d$required$d, $d$fieldPath$d}#else$d$d#end) 
    @Override
    public String startUseCase(${useCaseParams}, org.springframework.ui.Model model) throws Throwable
#end
#if($action.exitingView)
    @org.springframework.web.bind.annotation.#if ($action.parameters.empty)Get#{else}Post#{end}Mapping({"${action.source.restPath}${action.restPath}"})
    @Override
    public String ${action.triggerName}(#if (!$action.parameters.empty)@org.springframework.web.bind.annotation.ModelAttribute ${action.source.fullyQualifiedPageObjectClassName}Form _form, #{end}org.springframework.ui.Model model) throws Throwable
#end
    {

        String forward=null;
#if ($action.finalStateTarget)
#if ($formPopulationOperationRequired)
        this.${action.formImplementationGetter}.copyTo(getUseCaseParameters());
#end
#set($targetController = $action.target.targetControllerFullyQualifiedName)
#set($targetControllerBeanName = $action.target.targetControllerBeanName)
        forward=#if($targetController)(($targetController)${managedBeansPackage}.ThymeleafUtils.resolveVariable("$targetControllerBeanName")).startUseCase()#else closeDialog()#end;
        
#else
#if ($formPopulationOperationRequired)
        final $action.fullyQualifiedFormImplementationName form =
            this.$action.formImplementationGetter;
            
        //copy parameters form caller use case
#foreach($field in $action.parameters)
#if($action.exitingInitialState)
#set($callParams = "${callParams}$field.type.fullyQualifiedName $field.name, ")
        form.set${stringUtils.capitalize($field.name)}($field.name);
#else
        form.set${stringUtils.capitalize($field.name)}(_form.get${stringUtils.capitalize($field.name)}());
#end      
#end
#end
        //trigger method execution
        ${action.triggerMethodName}(#if($formPopulationOperationRequired)form, #{end}model);

        forward = #processTransition($action)
#saveMessages($action "        ")
#if ($formPopulationOperationRequired)
        populateActionFormsAndPageVariables(#if($action.exitingInitialState)null#else"${action.source.path}.html"#end,forward,form);
#if(!$action.exitingInitialState && !$action.enteringFinalState)

        if(forward != null)
        {
            if(forward.startsWith("${action.source.path}.html"))
            {
                forward = get$stringUtils.capitalize($stringUtils.deleteWhitespace(${action.source.name}))(model); //the destination form is the same, stay on the current view
                return forward;
            }
        }

#end
#end
#end
#if($action.exitingInitialState)
#foreach ($view in $controller.useCase.views)
#set ($viewPath = "${action.controller.restPath}${view.restPath}")
        if(forward != null && forward.startsWith("${viewPath}")) {
            return "${view.path}.html";
        }
       
#end
#end
        if(forward != null && !forward.endsWith(".html")) {
            forward = "redirect:" + forward;
        }

        if(forward == null) {
            forward = "${action.source.path}.html";
        }

        return forward;
    }
#foreach ($decisionTransition in $action.decisionTransitions)
    /**
$decisionTransition.getDocumentation("     * ")
     *
     * @return a transition
     */
    protected String __${decisionTransition.operationCall.name}(#if (!$action.formFields.empty)final ${action.source.fullyQualifiedPageObjectClassName}Form form, #{end}org.springframework.ui.Model model)
        throws Throwable
    {
        // $decisionTransition.operationCall
        final String value = String.valueOf($decisionTransition.operationCall.formCall);
        String forward = null;
#set($outgoings = $decisionTransition.target.outgoings)
#foreach ($outcome in $outgoings)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guard.name"))
        {
            forward = #processTransition($outcome)
#saveMessages($outcome "            ")
        }
#end
        if (forward == null)
        {
            // throw exception in case we have an invalid return value from the controller
            throw new RuntimeException("Runtime model error: no valid path selected. Selected path="+value);
        }
        else
        {
            return forward;
        }
    }

#end
#foreach ($actionState in $action.actionStates)
    /**
$actionState.getDocumentation("     * ")
     *
#if (!$action.formFields.empty)
     * @param form the associated form
#end
     * @return the forward view
     * @throws Throwable
     */
    protected String ${actionState.actionMethodName}(#if (!$action.formFields.empty)final $action.fullyQualifiedFormImplementationName form, #{end}org.springframework.ui.Model model)
        throws Throwable
    {
        String forward = null;
#if ($actionState.controllerCalls.empty && $actionState.serviceCalls.empty)
## TODO UMLMETA-106 uml22 StateVertex outgoing FinalState target returns null/unknown for Exception transition.
##        // actionState=$actionState controllerCalls=$actionState.controllerCalls.size()
##foreach ($outgoing in $actionState.outgoings)
##        // outgoing=$outgoing target=$outgoing.target
##end
##        // forward=$actionState.forward name=$actionState.name
        forward = #processTransition($actionState.forward)
#saveMessages($actionState.forward "        ")
#else
#set($exceptions = $actionState.exceptions)
#if($exceptions.empty)
#set($ident="")
#else
#set($ident="    ")
        try
        {
#end
#foreach ($serviceCall in $actionState.serviceCalls)
##TODO add validation service params -> action params/form fields
${ident}        this.get${serviceCall.owner.name}().${serviceCall.name}(#foreach($args in $serviceCall.arguments)form.${args.getterName}()#end);
#end
#foreach ($controllerCall in $actionState.controllerCalls)
    
#if (!$action.actionFormFields.empty)
${ident}        ${controllerCall.name}(#if (!$controllerCall.formFields.empty)form, #{end}model);
#else
${ident}        // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
${ident}        // cartridge would have issued a model validation error
${ident}        ${controllerCall.name}(new ${controllerCall.interfaceName}(), model);
#end

#if($actionState.forward.enteringView)
#set ($vw = $actionState.forward.target)
${ident}        ${vw.pageObjectClassName}Form ${vw.pageObjectBeanName}Form = get${vw.pageObjectClassName}Form();
#foreach($var in $vw.variables)
#if($var.table)
${ident}        model.addAttribute("$var.name", form.get${stringUtils.capitalize(${var.name})}());
#else
${ident}        ${vw.pageObjectBeanName}Form.set${stringUtils.capitalize(${var.name})}(form.get${stringUtils.capitalize(${var.name})}());
#end
#end
${ident}        model.addAttribute("${vw.pageObjectBeanName}Form", ${vw.pageObjectBeanName}Form);
#end

#end
${ident}        forward = #processTransition($actionState.forward)
#saveMessages($actionState.forward "${ident}        ")
#if(!$exceptions.empty)
        }
        catch(Throwable t)
        {
#* *##if($exceptions.size() == 1 && $stringUtils.isBlank($exceptions.iterator().next().exceptionType))
            forward = "${actionState.exceptions.iterator().next().target.path}.html";
#* *##else
            forward = null;
#*  *##set($exceptionCount=0)
#*  *##foreach($exception in $exceptions)
#*   *##if($stringUtils.isNotBlank($exception.exceptionType))
            if(#if($exceptionCount > 0)forward == null && #end t instanceof ${exception.exceptionType})
            {
                forward = "${exception.target.path}.html";
            }
#*    *##set($exceptionCount=$exceptionCount+1)
#*   *##end
#*   *##foreach($exception in $exceptions)
#*    *##if($stringUtils.isBlank($exception.exceptionType))
            if(forward == null)
            {
                forward = "${exception.target.path}.html";
            }
#*    *##end
#*   *##end
#*  *##end

            if(forward == null)
            {
                //no match, throw the exception
                throw t;
            }
#* *##end
        }
#end
#end
        return forward;
    }

#end
#end
#foreach ($view in $controller.useCase.views)
    @org.springframework.web.bind.annotation.GetMapping("${view.restPath}")
    public String get$stringUtils.capitalize($stringUtils.deleteWhitespace(${view.name}))(org.springframework.ui.Model model) {

        ${view.pageObjectClassName}Form form = get${view.pageObjectClassName}Form();
        model.addAttribute("${view.pageObjectBeanName}Form", form);
        
        return "${view.path}.html";
    }

    protected ${view.fullyQualifiedPageObjectClassName}Form ${view.pageObjectBeanName}Form;

    public ${view.fullyQualifiedPageObjectClassName}Form get${view.pageObjectClassName}Form() {
        if(${view.pageObjectBeanName}Form == null) {
            ${view.pageObjectBeanName}Form = new ${view.fullyQualifiedPageObjectClassName}Form();
        }

        return ${view.pageObjectBeanName}Form;
    }

#end
#foreach ($sessionObjectRef in $controller.sessionObjectReferences)
#set ($targetElement = $sessionObjectRef.targetElement)

    /**
     * Returns the current $targetElement.name from the session found in the argument request.
     * <p/>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p/>
     * If there is no session, it will be created; if the session does not contain the session-object
     * the object will be instantiated and subsequently stored in the session.
     *
     * @return read description
     */
    protected $targetElement.fullyQualifiedName ${sessionObjectRef.getterName}()
    {
        $targetElement.fullyQualifiedName object = null;
        final $thymeleafUtils.sessionClassName session = ${managedBeansPackage}.ThymeleafUtils.getSession(true);

        Object attribute = session.getAttribute("$sessionObjectRef.name");
        if (attribute instanceof $targetElement.fullyQualifiedName)
        {
            object = ($targetElement.fullyQualifiedName)attribute;
        }
        else if (attribute == null)
        {
            object = new ${targetElement.fullyQualifiedName}();
            ${sessionObjectRef.setterName}(object);
        }
        return object;
    }

    /**
     * Set the argument $targetElement .name object in the session corresponding with the argument request.
     * If the session does not exist it will be created.
     *
     * @param object the object
     */
    protected void ${sessionObjectRef.setterName}(final $targetElement.fullyQualifiedName object)
    {
        this.${sessionObjectRef.setterName}(object, true);
    }

    /**
     * Set the argument $targetElement.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param object the object
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
    protected void ${sessionObjectRef.setterName}($targetElement.fullyQualifiedName object, boolean createSession)
    {
        final $thymeleafUtils.sessionClassName session = ${managedBeansPackage}.ThymeleafUtils.getSession(createSession);
        if (session != null)
        {
            session.setAttribute("$sessionObjectRef.name", object);
        }
    }

    /**
     * Removes the argument $targetElement.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $targetElement.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
    protected void remove${stringUtils.capitalize($sessionObjectRef.name)}()
    {
        final $thymeleafUtils.sessionClassName session = ${managedBeansPackage}.ThymeleafUtils.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute("$sessionObjectRef.name");
            if (attribute instanceof $targetElement.fullyQualifiedName)
            {
                session.removeAttribute("$sessionObjectRef.name");
            }
        }
    }

#end
}