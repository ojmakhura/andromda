#set ($generatedFile = "${manageable.controllerFullPath}.java")
// license-header java merge-point
// Generated by andromda-thymeleaf cartridge (controllers\crud\Controller.java.vsl) DO NOT EDIT!
package $manageable.manageablePackageName;

#if ($manageable.compositeIdentifier)
#set($identifierIsPrimitive = false)
#set($identifierIsIntegerType = false)
#set($identifierIsLongType = false)
#set($identifierIsStringType = false)
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#else
#set($theIdentifierType = $manageable.identifiers.iterator().next().type)
#set($identifierIsPrimitive = $theIdentifierType.primitive)
#set($identifierIsIntegerType = $theIdentifierType.integerType)
#set($identifierIsLongType = $theIdentifierType.longType)
#set($identifierIsStringType = $theIdentifierType.stringType)
#if($identifierIsPrimitive)
#set($identifierType = $theIdentifierType.wrapperName)
#else
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#end
#end

/**
 * Java Server Faces Controller of the ${manageable.name} CRUD management.
 */
//@org.springframework.web.bind.annotation.RestController
//@org.springframework.web.bind.annotation.RequestMapping("$thymeleafUtils.toWebResourceName($manageable.controllerBeanName)")
public interface ${manageable.controllerName}
{

    /**
     * Initializes the controller, calling the doInit method
     *
     * @return the controller view path.
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.GetMapping("search-view")
    public String search(org.springframework.ui.Model model)
        throws Throwable;

    /**
     * Retrieves the edit view
     *
     * @return the controller view path.
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.GetMapping({"", "/{${manageable.identifierName}}"})
    public String edit(@org.springframework.web.bind.annotation.PathVariable(value = "${manageable.identifierName}", required = false) ${identifierType} ${manageable.identifierName}, org.springframework.ui.Model model)
        throws Throwable;


    /**
     * The instance load action.
     *
     * @param ${manageable.identifierName} the identifier
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.GetMapping({"load", "load/${manageable.identifierName}"})
    public String load(@org.springframework.web.bind.annotation.PathVariable(value = "${manageable.identifierName}", required = false) ${identifierType} ${manageable.identifierName}, org.springframework.ui.Model model)
        throws Throwable;

    /**
     * The cancel edit action
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.GetMapping("cancel")
    public String cancel(org.springframework.ui.Model model)
        throws Throwable;

#if ($manageable.create)
    /**
     * The new instance action.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping("new")
    public String startNew(org.springframework.ui.Model model)
        throws Throwable;

#end
#if ($manageable.create || $manageable.update)


    /**
     * The save and select instance action.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping("save-and-select")
    public String saveAndSelect(@org.springframework.web.bind.annotation.ModelAttribute ${manageable.formBeanType} $manageable.formBeanName, org.springframework.ui.Model model)
        throws Throwable;

    /**
     * The save instance action.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping()
    public String save(@org.springframework.web.bind.annotation.ModelAttribute ${manageable.formBeanType} $manageable.formBeanName, org.springframework.ui.Model model)
        throws Throwable;

    /**
     * Save and keep editing.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping("save-and-edit")
    public String saveAndKeepEditing(@org.springframework.web.bind.annotation.ModelAttribute ${manageable.formBeanType} $manageable.formBeanName, org.springframework.ui.Model model)
        throws Throwable;
    
#end
#if ($manageable.create)
    /**
     * The save and new instance action.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping("save-and-new")
    public String saveAndNew(@org.springframework.web.bind.annotation.ModelAttribute ${manageable.formBeanType} $manageable.formBeanName, org.springframework.ui.Model model)
        throws Throwable;
#end

    /**
     * The search action.
     *
     * @return null
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.PostMapping("search")
    public String search(@org.springframework.web.bind.annotation.ModelAttribute ${manageable.formBeanType} $manageable.formBeanName, org.springframework.ui.Model model)
        throws Throwable;



#if ($manageable.delete)
    /**
     * The delete action.
     *
     * @param ${manageable.identifierName} the identifier
     * @throws Throwable
     */
    @org.springframework.web.bind.annotation.DeleteMapping({"", "/${${manageable.identifierName}}"})
    public String delete(@org.springframework.web.bind.annotation.PathVariable("${manageable.identifierName}") ${identifierType} ${manageable.identifierName}, org.springframework.ui.Model model)
        throws Throwable;


#end

    // crud-controller merge-point
}
