#set ($generatedFile = "${controller.fullyQualifiedImplementationPath}.java")
// license-header java merge-point
// Generated by andromda-thymeleaf cartridge (controllers\ControllerImpl.java.vsl)
package $controller.packageName;

/**
 * @see $controller.fullyQualifiedName
 */
@org.springframework.stereotype.Controller
#foreach($annotation in $controller.additionalAnnotations)
@$annotation
#end
#if(!$stringUtils.isBlank($controller.restPath))
@org.springframework.web.bind.annotation.RequestMapping("$controller.restPath")
#else
@org.springframework.web.bind.annotation.RequestMapping("/")
#end
public class $controller.implementationName
    extends ${controller.name}Base
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${controller.controllerSerialVersionUID}L;

#foreach ($operation in $controller.operations)
    /**
     * @see $controller.fullyQualifiedName#hash()$operation.signature
     */
    @Override
    $operation.handleFormSignatureImplementation
    {
#set($allowDummyData = $dummyData.equalsIgnoreCase("true"))
#if ($allowDummyData)
#if (!$operation.formFields.empty)
#foreach ($field in $operation.formFields)
#set ($tableActionFound = false)
#foreach ($action in $operation.deferringActions)
#if($action.tableAction)
#foreach($parameter in $action.parameters)
#if($parameter.name == $field.name)
#set($tableActionFound = true)
#end
#end
#end
#end
#if ($field.table || !$field.attributes.empty)
#if ($field.table)
        // populating the table with a dummy list
#else
        // populating value with dummy instance
        $field.type.fullyQualifiedName $field.name = new ${field.type.fullyQualifiedName}();
#foreach ($attribute in $field.attributes)
        ${field.name}.${attribute.setterName}($attribute.dummyValue#if($attribute.type.longType)l#end);
#end
#end
        form.${field.setterName}($field.name);
#elseif ($tableActionFound)
        // we don't set row selection parameters such as ${field.name}RowSelection
#end
#if (!$field.complex || $field.type.enumeration)
#if ($field.selectable)
#if ($field.type.enumeration)
#set ($valueList = "${field.type.fullyQualifiedName}.literals().toArray(new Object[0])")
#set ($labelList = "${field.type.fullyQualifiedName}.names().toArray(new Object[0])")
#else
#set ($valueList = $field.valueListDummyValue)
#set ($labelList = $valueList)
#end
#set($backingListName=$field.backingListName)
        final java.util.Collection<${managedBeansPackage}.SelectItem> ${backingListName}=new java.util.ArrayList<${managedBeansPackage}.SelectItem>();
        for(int i=0; i<${valueList}.length; i++)
        {
            ${field.backingListName}.add(new ${managedBeansPackage}.SelectItem(${valueList}[i],${labelList}[i]));
        }
        form.set${stringUtils.capitalize($backingListName)}($backingListName);

#end
#else
#foreach ($attribute in $field.attributes)
#if ($attribute.isSelectable($field))
#if ($attribute.type.enumeration)
#set ($valueList = "${attribute.type.fullyQualifiedName}.literals().toArray(new Object[0])")
#set ($labelList = "${attribute.type.fullyQualifiedName}.names().toArray(new Object[0])")
#else
#set ($valueList = $attribute.valueListDummyValue)
#set ($labelList = $valueList)
#end
#set($backingListName=${attribute.getBackingListName($field)})
        final java.util.Collection<${managedBeansPackage}.SelectItem> ${backingListName}=new java.util.ArrayList<${managedBeansPackage}.SelectItem>();
        for(int i=0; i<${valueList}.length; i++)
        {
            ${field.backingListName}.add(new ${managedBeansPackage}.SelectItem(${valueList}[i],${labelList}[i]));
        }
        form.set${stringUtils.capitalize($backingListName)}($backingListName);
        
#end
#end
#end
#end
#end
#end
#if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#end
    }

#end
#if ($allowDummyData)
## here we populate tabular data with dummy values
#set ($quote = '"')
#foreach ($field in $controller.useCase.viewVariables)
#if ($field.table)
    /**
     * This dummy variable is used to populate the "$field.name" table.
     * You may delete it when you add you own code in this controller.
     */
#if ($field.type.collectionType)
    private static final java.util.Collection ${field.name} =
        java.util.Arrays.asList(new Object[] {
#set ($count = 0)
#foreach ($itemSeparator in [",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ""])
#set ($count = $count + 1)
#set ($constructor = '')
#set ($paramSeparator = '')
#if (!$field.tableColumnNames.empty)
#foreach ($columnName in $field.tableColumnNames)
#set ($constructor = "$constructor$paramSeparator$quote${columnName}-$count$quote")
#set ($paramSeparator = ', ')
#end
            new $stringUtils.capitalize($field.name)($constructor)$itemSeparator
#else
            ${quote}value-$count$quote$itemSeparator
#end
#end
        });

    /**
     * This inner class is used in the dummy implementation in order to get the web application
     * running without any manual programming.
     * You may delete this class when you add you own code in this controller.
     */
    public static final class $stringUtils.capitalize($field.name) implements java.io.Serializable
    {
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
        private String $columnName = null;
#set ($constructor = "$constructor${paramSeparator}String ${columnName}")
#set ($paramSeparator = ', ')
#end

        public $stringUtils.capitalize($field.name)($constructor)
        {
#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
            this.$columnName = $columnName;
#end
        }

#foreach ($columnName in $field.tableColumnNames)
#set ($columnName = $stringUtils.lowerCamelCaseName($columnName))
        public void set$stringUtils.capitalize($columnName)(String $columnName)
        {
            this.$columnName = $columnName;
        }

        public String get$stringUtils.capitalize($columnName)()
        {
            return this.$columnName;
        }

#end
    }
#else
    private static final $field.type.fullyQualifiedName[] $field.name =
        new $field.type.fullyQualifiedName[]
        {
#set ($dummyItemType = $field.type.nonArray.fullyQualifiedName)
#foreach ($itemSeparator in [",", ",", ",", ",", ""])
#set ($count = $velocityCount)
            new ${dummyItemType}(## no newline
#set ($comma = "")
#foreach ($attribute in $field.type.nonArray.attributes)
#if ($attribute.type.booleanType)
#set ($dummyValue = false)
#elseif ($attribute.type.primitive)
#set ($dummyValue = $velocityCount)
#elseif ($attribute.type.stringType)
#set ($dummyValue = "${quote}${attribute.name}-${count}${quote}")
#elseif ($attribute.type.dateType)
#set ($dummyValue = "new java.util.Date()")
#else
#set ($dummyValue = "null")
#end
${comma}${dummyValue}#set ($comma = ", ")
#end
)$itemSeparator
#end
        };
#end
#end
#end
#end
}