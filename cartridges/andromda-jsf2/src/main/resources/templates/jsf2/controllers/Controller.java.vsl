#set ($generatedFile = "${controller.fullyQualifiedNamePath}.java")
// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package $controller.packageName;

#set($viewPopulator = "${controller.useCase.actionClassName}ViewPopulator")##should go to the controller metafacade
/**
$controller.getDocumentation(" * ")
 */
public abstract class $controller.name
    extends ${managedBeansPackage}.ControllerBase
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns an instance from the JSF context
     *
     */
    public static $controller.name instance()
    {
        return ($controller.name)${managedBeansPackage}.JsfUtils.resolveVariable("${controller.beanName}");
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws java.lang.reflect.InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, java.lang.reflect.InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final java.util.Map<String,Object> pageVariables=this.getPageVariables(forward);
#set($showElse=false)
#foreach ($view in $controller.useCase.views)
#if ($view.populatorRequired)
#if($showElse)
        else
#end
        if("${view.path}.${facesServletExtension}".equals(forward))
        {
#foreach ($viewAction in $view.formActions)
            ${viewPopulator}.populateForm(sourceForm,this.${viewAction.formImplementationGetter});
#end
#if(!$view.variables.empty)
            ${viewPopulator}.populate$stringUtils.upperCamelCaseName($view.name)PageVariables(sourceForm,pageVariables);
#end
        }
#set($showElse=true)
#if($velocityCount < $controller.useCase.views.size() && $showElse)
#set($showElse=true)
#end
#end
#end
        ${managedBeansPackage}.ControllerBase.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }
    
#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     *
     * @param form the associated form
     * @throws Throwable
     */
    $operation.formSignature
        throws Throwable;

#end

#foreach ($action in $controller.useCase.actions)
#if (!$action.formFields.empty)
    /**
     * Retrieves the {@link $action.fullyQualifiedFormImplementationName} form instance 
     *
     * @return $action.fullyQualifiedFormImplementationName
     */
    protected $action.fullyQualifiedFormImplementationName $action.formImplementationGetter
    {
        return ($action.fullyQualifiedFormImplementationName)${managedBeansPackage}.JsfUtils.resolveVariable("$action.formBeanName");
    }

#end
#set ($formPopulationOperationRequired = !$action.formFields.empty)
    /**
#if($action.exitingInitialState)
     * This method is called when the use case '${controller.useCase.name}' starts.
#else
$action.trigger.getDocumentation("     * ")
     * This method is called when '${action.trigger.name}' is triggered in the view '${action.source.name}'.
#end
     * It can be safely overridden in descendant classes.
#if($formPopulationOperationRequired)
     *
     * @param form the associated form
#end
     */
    protected void ${action.triggerMethodName}(#if($formPopulationOperationRequired)$action.fullyQualifiedFormImplementationName form#end)
    {
        //this method can be overridden
    }

    /**
#if($action.exitingInitialState)     
     * Retrieves the internal start use case
#else
     * Retrieves ${action.triggerName}()
#end
     *    
     * @return ${action.triggerName}
     * @throws Throwable
     */
#if($action.exitingInitialState)     
    protected String internalStartUseCase(java.util.Map<String,Object> useCaseParameters)
#else
    public String ${action.triggerName}()
#end
        throws Throwable
    {
        this.setLastPostedFormClientId("${action.formBeanName}");
        
        String forward=null;
#if ($action.finalStateTarget)
#if ($formPopulationOperationRequired)
        this.${action.formImplementationGetter}.copyTo(getUseCaseParameters());
    
#end
#set($targetController = $action.target.targetControllerFullyQualifiedName)
#set($targetControllerBeanName = $action.target.targetControllerBeanName)
        forward=#if($targetController)(($targetController)${managedBeansPackage}.JsfUtils.resolveVariable("$targetControllerBeanName")).startUseCase()#else closeDialog()#end;
        
#else
#if ($formPopulationOperationRequired)
        final $action.fullyQualifiedFormImplementationName form =
            this.$action.formImplementationGetter;
            
#if($action.exitingInitialState)
        //copy parameters form caller use case
        form.copyFrom(useCaseParameters);
        
#end
#end
        //trigger method execution
        ${action.triggerMethodName}(#if($formPopulationOperationRequired)form#end);

        forward = #processTransition($action)
#saveMessages($action "        ")
#if ($formPopulationOperationRequired)
        populateActionFormsAndPageVariables(#if($action.exitingInitialState)null#else"${action.source.path}.${facesServletExtension}"#end,forward,form);
#if(!$action.exitingInitialState && !$action.enteringFinalState)
        if(forward != null)
        {
            if("${action.source.path}.${facesServletExtension}".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
#end
#end
#end
        return forward;
    }

#foreach ($actionState in $action.actionStates)
    /**
$actionState.getDocumentation("     * ")
     *
#if (!$action.formFields.empty)
     * @param form the associated form
#end
     * @return the forward view
     * @throws Throwable
     */
    protected String ${actionState.actionMethodName}(#if (!$action.formFields.empty)final $action.fullyQualifiedFormImplementationName form#end)
        throws Throwable
    {
        String forward = null;
#if ($actionState.controllerCalls.empty && $actionState.serviceCalls.empty)
## TODO UMLMETA-106 uml22 StateVertex outgoing FinalState target returns null/unknown for Exception transition.
##        // actionState=$actionState controllerCalls=$actionState.controllerCalls.size()
##foreach ($outgoing in $actionState.outgoings)
##        // outgoing=$outgoing target=$outgoing.target
##end
##        // forward=$actionState.forward name=$actionState.name
        forward = #processTransition($actionState.forward)
#saveMessages($actionState.forward "        ")
#else
#set($exceptions = $actionState.exceptions)
#if($exceptions.empty)
#set($ident="")
#else
#set($ident="    ")
        try
        {
#end
#foreach ($serviceCall in $actionState.serviceCalls)
##TODO add validation service params -> action params/form fields
${ident}        this.get${serviceCall.owner.name}().${serviceCall.name}(#foreach($args in $serviceCall.arguments)form.${args.getterName}()#end);
#end
#foreach ($controllerCall in $actionState.controllerCalls)
    
#if (!$action.actionFormFields.empty)
${ident}        $controllerCall.formCall;
#else
${ident}        // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
${ident}        // cartridge would have issued a model validation error
${ident}        ${controllerCall.name}(new ${controllerCall.interfaceName}());
#end
#end
${ident}        forward = #processTransition($actionState.forward)
#saveMessages($actionState.forward "${ident}        ")
#if(!$exceptions.empty)
        }
        catch(Throwable t)
        {
#* *##if($exceptions.size() == 1 && $stringUtils.isBlank($exceptions.iterator().next().exceptionType))
            forward = "${actionState.exceptions.iterator().next().target.path}.${facesServletExtension}";
#* *##else
            forward = null;
#*  *##set($exceptionCount=0)
#*  *##foreach($exception in $exceptions)
#*   *##if($stringUtils.isNotBlank($exception.exceptionType))
            if(#if($exceptionCount > 0)forward == null && #end t instanceof ${exception.exceptionType})
            {
                forward = "${exception.target.path}.${facesServletExtension}";
            }
#*    *##set($exceptionCount=$exceptionCount+1)
#*   *##end
#*   *##foreach($exception in $exceptions)
#*    *##if($stringUtils.isBlank($exception.exceptionType))
            if(forward == null)
            {
                forward = "${exception.target.path}.${facesServletExtension}";
            }
#*    *##end
#*   *##end
#*  *##end

            if(forward == null)
            {
                //no match, throw the exception
                throw t;
            }
#* *##end
        }
#end
#end
        return forward;
    }

#end
#foreach ($decisionTransition in $action.decisionTransitions)
    /**
$decisionTransition.getDocumentation("     * ")
     *
     * @return a transition
     */
    protected String __${decisionTransition.operationCall.name}(#if (!$action.formFields.empty)final $action.fullyQualifiedFormImplementationName form#end)
        throws Throwable
    {
        final String value = String.valueOf($decisionTransition.operationCall.formCall);
        String forward = null;
#set($outgoings = $decisionTransition.target.outgoings)
#foreach ($outcome in $outgoings)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guard.name"))
        {
            forward = #processTransition($outcome)
#saveMessages($outcome "            ")
        }
#end
        if (forward == null)
        {
            // throw exception in case we have an invalid return value from the controller
            throw new RuntimeException("Runtime model error: no valid path selected. Selected path="+value);
        }
        else
        {
            return forward;
        }
    }

#end
#end
#foreach ($service in $controller.allServices)
    /**
     * Returns a reference to the $service.name back-end service.
     *
     * @return $service.accessorImplementation
     */
    protected final $service.fullyQualifiedName get${service.name}()
    {
        try
        {
            return $service.accessorImplementation;
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }

#end

#foreach ($sessionObjectRef in $controller.sessionObjectReferences)
#set ($targetElement = $sessionObjectRef.targetElement)

    /**
     * Returns the current $targetElement.name from the session found in the argument request.
     * <p/>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p/>
     * If there is no session, it will be created; if the session does not contain the session-object
     * the object will be instantiated and subsequently stored in the session.
     *
     * @return read description
     */
    protected final $targetElement.fullyQualifiedName ${sessionObjectRef.getterName}()
    {
        $targetElement.fullyQualifiedName object = null;
        final $jsfUtils.sessionClassName session = ${managedBeansPackage}.JsfUtils.getSession(true);

        Object attribute = session.getAttribute("$sessionObjectRef.name");
        if (attribute instanceof $targetElement.fullyQualifiedName)
        {
            object = ($targetElement.fullyQualifiedName)attribute;
        }
        else if (attribute == null)
        {
            object = new ${targetElement.fullyQualifiedName}();
            ${sessionObjectRef.setterName}(object);
        }
        return object;
    }

    /**
     * Set the argument $targetElement .name object in the session corresponding with the argument request.
     * If the session does not exist it will be created.
     *
     * @param object the object
     */
    protected final void ${sessionObjectRef.setterName}(final $targetElement.fullyQualifiedName object)
    {
        this.${sessionObjectRef.setterName}(object, true);
    }

    /**
     * Set the argument $targetElement.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param object the object
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
    protected final void ${sessionObjectRef.setterName}($targetElement.fullyQualifiedName object, boolean createSession)
    {
        final $jsfUtils.sessionClassName session = ${managedBeansPackage}.JsfUtils.getSession(createSession);
        if (session != null)
        {
            session.setAttribute("$sessionObjectRef.name", object);
        }
    }

    /**
     * Removes the argument $targetElement.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $targetElement.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
    protected final void remove${stringUtils.capitalize($sessionObjectRef.name)}()
    {
        final $jsfUtils.sessionClassName session = ${managedBeansPackage}.JsfUtils.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute("$sessionObjectRef.name");
            if (attribute instanceof $targetElement.fullyQualifiedName)
            {
                session.removeAttribute("$sessionObjectRef.name");
            }
        }
    }

#end
}