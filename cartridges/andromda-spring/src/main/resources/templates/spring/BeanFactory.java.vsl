// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by BeanFactory.java.vsl in andromda-spring-cartridge on 05/08/2018 20:25:45+0100. Do not modify by hand!.
//
#set ($generatedFile = "BeanFactory.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.tomcat.dbcp.dbcp2.BasicDataSource;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
public class BeanFactory {
	
	@Bean
	public LocalSessionFactoryBean sessionFactory()
	{
		LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
		sessionFactory.setDataSource(dataSource());
		
		java.util.ArrayList<Class<?>> annotatedList = new java.util.ArrayList<Class<?>>();
#foreach($entity in $entities)
		annotatedList.add(${entity.packageName}.${entity.entityName}.class);
#end
		Class<?>[] annotatedArr = new Class<?>[annotatedList.size()];		
		sessionFactory.setAnnotatedClasses(annotatedList.toArray(annotatedArr));
		sessionFactory.setHibernateProperties(hibernateProperties());
				
		return sessionFactory;
	}
	
	@Bean
	public DataSource dataSource()
	{
		BasicDataSource dataSource = new BasicDataSource();
        dataSource.setDriverClassName("$driver");
        dataSource.setUrl("$connectionUrl");
        dataSource.setUsername("$username");
        dataSource.setPassword("$password");
		return dataSource;
	}
	
	@Bean
	public PlatformTransactionManager hibernateTransactionManager()
	{
		return new HibernateTransactionManager(sessionFactory().getObject());
	}
	
	@Bean
	public Properties hibernateProperties()
	{
		Properties hibernateProperties = new Properties();
#if ($stringUtils.isNotBlank($hibernatePoolSize))
		hibernateProperties.setProperty("hibernate.pool.size", "$hibernatePoolSize");
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerStrategy))
		hibernateProperties.setProperty("hibernate.transaction.manager.strategy", "$hibernateTransactionManagerStrategy");
#end
#if ($stringUtils.isNotBlank($hibernateUserTransactionName))
		hibernateProperties.setProperty("hibernate.jta.UserTransaction", "$hibernateUserTransactionName");
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookup))
		hibernateProperties.setProperty("hibernate.transaction.manager_lookup_class", "$hibernateTransactionManagerLookup");
#end
#if ($stringUtils.isNotBlank($hibernateUseOuterJoin))
		hibernateProperties.setProperty("hibernate.use_outer_join", "$hibernateUseOuterJoin");
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
		hibernateProperties.setProperty("hibernate.show_sql", "$hibernateShowSql");
#end
#if ($stringUtils.isNotBlank($hibernateJndiName))
		hibernateProperties.setProperty("hibernate.session_factory_name", "$hibernateJndiName");
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
		hibernateProperties.setProperty("hibernate.dialect", "$hibernateDialect");
#end
#if ($stringUtils.isNotBlank($hibernateDefaultSchema))
		hibernateProperties.setProperty("hibernate.default_schema", "$hibernateDefaultSchema");
#end
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
		hibernateProperties.setProperty("hibernate.max_fetch_depth", "$hibernateMaxFetchDepth");
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
		hibernateProperties.setProperty("hibernate.jdbc.fetch_size", "$hibernateJdbcFetchSize");
#end
#if ($stringUtils.isNotBlank($hibernateDefaultBatchFetchSize))
		hibernateProperties.setProperty("hibernate.default_batch_fetch_size", "$hibernateDefaultBatchFetchSize");
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
		hibernateProperties.setProperty("hibernate.jdbc.batch_size", "$hibernateJdbcBatchSize");
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
		hibernateProperties.setProperty("hibernate.jdbc.use_scrollable_resultset", "$hibernateJdbcUseScrollableResultSet");
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
		hibernateProperties.setProperty("hibernate.use_streams_for_binary", "$hibernateJdbcUseStreamsForBinary");
#end
#if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
#if ($hibernateHbm2DDLAuto == "auto")
		hibernateProperties.setProperty("hibernate.hbm2ddl.auto", "update");
#else
		hibernateProperties.setProperty("hibernate.hbm2ddl.auto", "update");
#end
#end
#if ($stringUtils.isNotBlank($hibernateQuerySubstitutions))
		hibernateProperties.setProperty("hibernate.query.substitutions", "$hibernateQuerySubstitutions");
#end
#if ($enableCaching)
        // prop key="hibernate.cache.use_query_cache">$enableCaching</prop>
		hibernateProperties.setProperty("hibernate.cache.use_second_level_cache", "true");
#else
		hibernateProperties.setProperty("hibernate.cache.use_second_level_cache", "false");
#end
#if ($stringUtils.isNotBlank($hibernateCacheProvider))
		//hibernateProperties.setProperty("hibernate.cache.provider_class", "$hibernateCacheProvider");
#end
#if ($stringUtils.isNotBlank($hibernateQueryCacheFactory))
		//hibernateProperties.setProperty("hibernate.cache.query_cache_factory", "$hibernateQueryCacheFactory");
#end
#if ($stringUtils.isNotBlank($hibernateConnectionReleaseMode))
		hibernateProperties.setProperty("hibernate.connection.release_mode", "$hibernateConnectionReleaseMode");
#end
#if ($stringUtils.isNotBlank($hibernateTransactionFactoryClass))
		hibernateProperties.setProperty("transaction.factory_class", "$hibernateTransactionFactoryClass");
#end
		//applicationContext hibernateProperties merge-point
		hibernateProperties.setProperty("hibernate.jdbc.lob.non_contextual_creation", "true");
		
		return hibernateProperties;
	}
	
	@Bean
	public MessageSource messageSource()
	{
		ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
		messageSource.setBasename("classpath:messages");
		messageSource.setDefaultEncoding("UTF-8");
		return messageSource;
	}
}
