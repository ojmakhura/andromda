#set ($generatedFile = "${manageable.manageableServiceBaseFullPath}.java")
// license-header java merge-point
// Generated by crud/SpringCrudServiceBase.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
##
package $manageable.manageablePackageName;

/**
$manageable.getDocumentation(" *")
 */
public abstract class $manageable.manageableServiceBaseName
    implements $manageable.manageableServiceName
{
    private $manageable.fullyQualifiedManageableDaoName dao;

    /**
     * @param daoIn
     */
    public void setDao($manageable.fullyQualifiedManageableDaoName daoIn)
    {
        this.dao = daoIn;
    }

    /**
     * @return dao
     */
    protected $manageable.fullyQualifiedManageableDaoName getDao()
    {
        return this.dao;
    }

    /*
     * Temporary method, to be removed with the deprecated methods
     */
    @Deprecated
    private ${manageable.fullyQualifiedManageableValueObjectName} newValueObject($memberList){

        final ${manageable.fullyQualifiedManageableValueObjectName} valueObject=new ${manageable.fullyQualifiedManageableValueObjectName}();
#foreach ($member in $manageable.manageableMembers)
        valueObject.${member.setterName}(${member.name});
#end

        return valueObject;
    }

#set($searchExampleClassName=$manageable.fullyQualifiedManageableSearchExampleName)
    /*
     * Temporary method, to be removed with the deprecated methods
     */
    @Deprecated
    private $searchExampleClassName newSearchExample(${manageable.listManageableMembersWithWrapperTypes()}){

        final $searchExampleClassName searchExample=new $searchExampleClassName();
#foreach ($member in $manageable.manageableMembers)
#if (!$member.inputFile && !$member.needsFileUpload)
        searchExample.${member.setterName}(${member.name});
#end
#end

        return searchExample;
    }

#if ($manageable.create)
    /**
     * @param valueObject ${manageable.fullyQualifiedManageableValueObjectName}
     * @return ${manageable.fullyQualifiedManageableValueObjectName}
     * @throws Exception
     * @see ${manageable.fullyQualifiedManageableDaoName}#create
     */
    @Override
    public ${manageable.fullyQualifiedManageableValueObjectName} create(${manageable.fullyQualifiedManageableValueObjectName} valueObject)
        throws Exception
    {
        return (${manageable.fullyQualifiedManageableValueObjectName}) this.dao.create(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT, this.dao.valueObjectToEntity(valueObject));
    }

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return $manageable.fullyQualifiedManageableValueObjectName
     * @throws Exception
     * @see ${manageable.fullyQualifiedDaoName}${esc.hash}create
     */
    @Override
    @Deprecated
    public $manageable.fullyQualifiedManageableValueObjectName create($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return this.create(this.newValueObject($memberListArguments));
    }

#end
#if ($manageable.read)
    /**
     * @param $manageable.identifierName
     * @return $manageable.fullyQualifiedManageableValueObjectName
     * @throws Exception
     * @see ${manageable.manageableServiceName}${esc.hash}readById(${manageable.fullyQualifiedIdentifierTypeName})
     */
    @Override
    public $manageable.fullyQualifiedManageableValueObjectName readById(${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return ($manageable.fullyQualifiedManageableValueObjectName)this.dao.load(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT,$manageable.identifierName);
    }

    @SuppressWarnings("unchecked")
    @Override
    public java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName> searchByExample($searchExampleClassName example)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return (java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName>)this.dao.searchByExample(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT, example);
    }

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return toValueObjects(this.dao.read())
     * @throws Exception
     * @see ${manageable.manageableServiceName}${esc.hash}read
     */
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
    @Override
    @Deprecated
#else
    @SuppressWarnings("deprecation")
#end
    public java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName> read(${manageable.listManageableMembersWithWrapperTypes()})
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return this.searchByExample(this.newSearchExample($memberListArguments));
    }

    /**
     * @return toValueObjects(this.dao.readAll())
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    @Override
    public java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName> readAll()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return (java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName>)this.dao.loadAll(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT);
    }

#end
#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)
    /**
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end
    {
        return this.dao.load($manageable.identifierName).${member.getterName}();
    }

#end
#end
#if ($manageable.update)
    @Override
    public $manageable.fullyQualifiedManageableValueObjectName update($manageable.fullyQualifiedManageableValueObjectName valueObject)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        this.dao.update(this.dao.valueObjectToEntity(valueObject));
        return ($manageable.fullyQualifiedManageableValueObjectName)this.dao.load(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT, valueObject.${manageable.identifierGetterName}());
    }

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return toValueObject(this.dao.update($memberListArguments))
     * @throws Exception
     * @see ${manageable.fullyQualifiedManageableDaoName}${esc.hash}update
     */
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
    @Override
    @Deprecated
#else
    @SuppressWarnings("deprecation")
#end
    public $manageable.fullyQualifiedManageableValueObjectName update($memberList#if($manageable.compositeIdentifier), ${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName#end)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return this.update(newValueObject($memberListArguments));
    }

#end
#if ($manageable.delete)
    /**
     * @param ids
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     * @see ${manageable.manageableServiceName}${esc.hash}delete(${manageable.fullyQualifiedIdentifierTypeName}[])
     */
    @Override
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids) - 'ids' can not be null");
        }

        for(${manageable.fullyQualifiedIdentifierTypeName} id: ids)
        {
            this.dao.remove(id);
        }
    }

    /**
     * @param ids
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     * @see ${manageable.manageableServiceName}${esc.hash}delete(${manageable.fullyQualifiedIdentifierTypeName}[])
     */
    @Override
    public void delete(java.util.Collection<${manageable.fullyQualifiedIdentifierTypeName}> ids)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids) - 'ids' can not be null");
        }

        for(${manageable.fullyQualifiedIdentifierTypeName} id: ids)
        {
            this.dao.remove(id);
        }
    }

#end
#set ($attributes = $manageable.getAttributes(true, $manageable.usingAssignedIdentifier))
#foreach ($attribute in $attributes)
#if ($attribute.unique)
#set ($attributeNameCapitalized = $stringUtils.capitalize($attribute.name))

    /**
     * Searches for a single instance of ${manageable.fullyQualifiedEntityName}.
     * @param ${attribute.name} the unique ${attribute.name} to be used in the search.'
     * @return ${manageable.fullyQualifiedManageableValueObjectName}.
     */
    @Override
    public ${manageable.fullyQualifiedManageableValueObjectName} searchUnique$attributeNameCapitalized(final ${attribute.type.fullyQualifiedName} ${attribute.name})
    {
        return (${manageable.fullyQualifiedManageableValueObjectName})this.dao.searchUnique$attributeNameCapitalized(${manageable.fullyQualifiedManageableDaoName}.TRANSFORM_VALUEOBJECT, ${attribute.name});
    }
#end
#end
#foreach ($operation in $manageable.manageableDaoBusinessOperations)

#if ($operation.returnType.dataType)
#set ($returnType = $operation.getterSetterReturnTypeName)
#elseif ($manageable.isCollection($operation))
#set ($isCollection = true)
#set ($returnType = "java.util.Collection<${manageable.fullyQualifiedManageableValueObjectName}>")
#else
#set ($isCollection = false)
#set ($returnType = "${manageable.fullyQualifiedManageableValueObjectName}")
#end
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
    @Override
#if ($operation.exceptionsPresent)
    public $returnType $operation.signature
        throws $operation.exceptionList
#else
    public $returnType $operation.signature
#end
    {
#if ($operation.returnType.dataType)
       #if($returnType != "void") return#end this.dao.${operation.call};
#elseif ($isCollection)
        return this.dao.toValueObjectCollection(this.dao.${operation.call});
#else
        return this.dao.toValueObject(this.dao.${operation.call});
#end
    }
#end

    // spring-crud-service-base merge-point
}
