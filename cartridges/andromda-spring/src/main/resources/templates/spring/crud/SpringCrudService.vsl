#set ($generatedFile = "${manageable.manageableServiceFullPath}.java")
// license-header java merge-point
// Generated by crud/SpringCrudService.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
##
#set ($memberList = $manageable.listManageableMembers(true))
##
package $manageable.manageablePackageName;

/**
$manageable.getDocumentation(" * ")
 */
public interface $manageable.manageableServiceName
{
#if ($manageable.create)
    /**
     * @param valueObject
     * @return ${manageable.fullyQualifiedManageableValueObjectName}
     * @throws Exception
     */
    public ${manageable.fullyQualifiedManageableValueObjectName} create(${manageable.fullyQualifiedManageableValueObjectName} valueObject) throws Exception;

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return create
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    @Deprecated
    public $manageable.fullyQualifiedManageableValueObjectName create($memberList)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#if ($manageable.read)
    /**
     * @param example
     * @return Collection<${manageable.fullyQualifiedManageableValueObjectName}>
     * @throws Exception
     */
    public java.util.Collection<${manageable.fullyQualifiedManageableValueObjectName}> searchByExample($manageable.fullyQualifiedManageableSearchExampleName example) throws Exception;

    /**
     * @param $manageable.identifierName The manageable identifier name
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $manageable.fullyQualifiedManageableValueObjectName readById(${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    @Deprecated
    public java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName> read(${manageable.listManageableMembersWithWrapperTypes()})
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

    /**
     * @return all manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public java.util.Collection<$manageable.fullyQualifiedManageableValueObjectName> readAll()
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)
    /**
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#end
#end
#if ($manageable.update)
    /**
     * @param valueObject
     * @return ${manageable.fullyQualifiedManageableValueObjectName}
     * @throws Exception
     */
    public ${manageable.fullyQualifiedManageableValueObjectName} update(${manageable.fullyQualifiedManageableValueObjectName} valueObject) throws Exception;

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
#if($manageable.compositeIdentifier)
     * @param $manageable.identifierName ${manageable.fullyQualifiedIdentifierTypeName}
#end
     * @return update
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    @Deprecated
    public $manageable.fullyQualifiedManageableValueObjectName update($memberList#if($manageable.compositeIdentifier), ${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName#end)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#if ($manageable.delete)
    /**
     * @param ids Collection<${manageable.fullyQualifiedIdentifierTypeName}>
     * @throws Exception
     */
    public void delete(java.util.Collection<${manageable.fullyQualifiedIdentifierTypeName}> ids) throws Exception;

    /**
     * @param ids The array of IDs to be deleted
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#set ($attributes = $manageable.getAttributes(true, $manageable.usingAssignedIdentifier))
#foreach ($attribute in $attributes)
#if ($attribute.unique)
#set ($attributeNameCapitalized = $stringUtils.capitalize($attribute.name))

    /**
     * Searches for a single instance of ${manageable.fullyQualifiedEntityName}.
     * @param ${attribute.name} the unique ${attribute.name} to be used in the search.'
     * @return ${manageable.fullyQualifiedManageableValueObjectName}.
     */
    public ${manageable.fullyQualifiedManageableValueObjectName} searchUnique$attributeNameCapitalized(final ${attribute.type.fullyQualifiedName} ${attribute.name});
#end
#end
#foreach ($operation in $manageable.manageableDaoBusinessOperations)

#if ($operation.returnType.dataType)
#set ($returnType = $operation.getterSetterReturnTypeName)
#elseif ($manageable.isCollection($operation))
#set ($returnType = "java.util.Collection<${manageable.fullyQualifiedManageableValueObjectName}>")
#else
#set ($returnType = "${manageable.fullyQualifiedManageableValueObjectName}")
#end
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    public $returnType $operation.signature
        throws $operation.exceptionList;
#else
    public $returnType $operation.signature;
#end

#end

    // spring-crud-service merge-point
}
