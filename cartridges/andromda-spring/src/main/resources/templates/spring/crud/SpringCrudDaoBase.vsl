#set ($generatedFile = "${manageable.manageableDaoBaseFullPath}.java")
// license-header java merge-point
// Generated by crud/SpringCrudDaoBase.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
#if ($hibernateVersion.startsWith("4") || $hibernateVersion.startsWith("5"))
#set ($hibernate4or5=true)
#else
#set ($hibernate4or5=false)
#end
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
##
package $manageable.manageablePackageName;

#if ($manageable.read || $manageable.delete)
import ${hibernateUtils.basePackage}.Session;
import ${hibernateUtils.basePackage}.Criteria;
import ${hibernateUtils.criterionPackage}.MatchMode;
import ${hibernateUtils.criterionPackage}.Restrictions;

#end
/**
$manageable.getDocumentation(" * ")
 */
@org.springframework.stereotype.Repository("$stringUtils.uncapitalize($manageable.manageableDaoName)")
public class $manageable.manageableDaoBaseName
    extends $manageable.fullyQualifiedDaoImplementationName
    implements $manageable.manageableDaoName
{
#set ($repositoryBeanName = "$stringUtils.uncapitalize(${manageable.entityName})Repository")

    @org.springframework.beans.factory.annotation.Autowired
    protected ${manageable.packageName}.${manageable.name}Repository $repositoryBeanName;

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($repositoryBeanName_ = "$stringUtils.uncapitalize(${member.type.entityName})Repository")
    @org.springframework.beans.factory.annotation.Autowired
    protected ${member.type.packageName}.${member.type.name}Repository $repositoryBeanName_;

#set ($entity = $member.type)
#set ($entityBeanName = $stringUtils.uncapitalize(${entity.entityName}))
#set ($entityDaoName = $stringUtils.uncapitalize(${entity.manageableDaoName}))

    private $entity.fullyQualifiedManageableDaoName $entityDaoName;

    /**
     * @param ${entityDaoName}In
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void set${entity.manageableDaoName}(@org.springframework.context.annotation.Lazy $entity.fullyQualifiedManageableDaoName ${entityDaoName}In)
    {
        this.$entityDaoName = ${entityDaoName}In;
    }

    /**
     * @return dao $entity.fullyQualifiedManageableDaoName
     */
    public $entity.fullyQualifiedManageableDaoName get${entity.manageableDaoName}()
    {
        return this.$entityDaoName;
    }

#end
#if ($enableAnnotations)
    @Override
#end
    public Object transformEntity(final int transform, final ${manageable.fullyQualifiedEntityName} entity)
    {
        if(transform == ${manageable.manageableDaoName}.TRANSFORM_VALUEOBJECT)
        {
            return toValueObject(entity);
        }
        return super.transformEntity(transform, entity);
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${manageable.fullyQualifiedManageableValueObjectName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer VALUEOBJECT_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations)
            @Override
#end
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof ${manageable.fullyQualifiedEntityName})
                {
                    result = toValueObject((${manageable.fullyQualifiedEntityName})input);
                }
                else if (input instanceof Object[])
                {
                    result = toValueObject((Object[])input);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void transformEntities(final int transform, final java.util.Collection<?> entities)
    {
        if(transform == ${manageable.manageableDaoName}.TRANSFORM_VALUEOBJECT)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, this.VALUEOBJECT_TRANSFORMER);
        }
        else
        {
            super.transformEntities(transform, entities);
        }
    }

    /**
     * {@inheritDoc}
     * @param row
     * @return ${manageable.fullyQualifiedManageableValueObjectName}
     */
    protected ${manageable.fullyQualifiedManageableValueObjectName} toValueObject(Object[] row)
    {
        return this.toValueObject(this.toEntity(row));
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if($enableTemplating)
    @SuppressWarnings("unchecked")
#end
    public java.util.Collection<${manageable.fullyQualifiedManageableValueObjectName}> toValueObjectCollection(java.util.Collection<${manageable.fullyQualifiedEntityName}> entities)
    {
        if (entities == null)
        {
            return null;
        }
#if($enableTemplating)
        @SuppressWarnings("rawtypes")
#end
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections.CollectionUtils.transform(result, this.VALUEOBJECT_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public final void valueObjectToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof ${manageable.fullyQualifiedManageableValueObjectName}))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, this.ValueObjectToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer ValueObjectToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations)
            @Override
#end
            public Object transform(Object input)
            {
                return valueObjectToEntity((${manageable.fullyQualifiedManageableValueObjectName})input);
            }
        };


    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void toValueObject(
        ${manageable.fullyQualifiedEntityName} source,
        ${manageable.fullyQualifiedManageableValueObjectName} target)
    {
#foreach ($member in $manageable.manageableAttributes)
        target.${member.setterName}(source.${member.getterName}());
#end

#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
        final java.util.Collection<$member.type.fullyQualifiedName> ${member.name} = source.${member.getterName}();
        if (${member.name} == null || ${member.name}.isEmpty())
        {
            target.${member.setterName}(null);
        }
        else
        {
            final ${member.type.fullyQualifiedIdentifierTypeName}[] values = new ${member.type.fullyQualifiedIdentifierTypeName}[${member.name}.size()];
            int counter = 0;
            for (final ${member.type.fullyQualifiedName} element: ${member.name})
            {
                values[counter++] = element.${member.type.identifierGetterName}();
            }
            target.${member.setterName}(values);
        }
#else
#if ($member.type.compositeIdentifier)
        target.${member.setterName}(source.${member.getterName}() == null? null: source.${member.getterName}().${member.type.identifierGetterName}());
#else
        final $member.type.fullyQualifiedName $member.name = source.${member.getterName}();
#if (!$member.type.primitive)
        if ($member.name != null)
#end
        {
            target.${member.setterName}(${member.name}.${member.type.identifierGetterName}());
        }
#end
#end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public ${manageable.fullyQualifiedManageableValueObjectName} toValueObject(final ${manageable.fullyQualifiedEntityName} entity)
    {
        ${manageable.fullyQualifiedManageableValueObjectName} target = null;
        if (entity != null)
        {
            target = new ${manageable.fullyQualifiedManageableValueObjectName}();
            this.toValueObject(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void valueObjectToEntity(
        ${manageable.fullyQualifiedManageableValueObjectName} source,
        ${manageable.fullyQualifiedEntityName} target)
    {
#foreach ($member in $manageable.manageableAttributes)
        target.${member.setterName}(source.${member.getterName}());
#end

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($repositoryBeanName_ = "$stringUtils.uncapitalize(${member.type.entityName})Repository")
#if ($member.many)
        final ${member.type.fullyQualifiedIdentifierTypeName}[] ${member.name} = source.${member.getterName}();
        if (${member.name} == null || ${member.name}.length == 0)
        {
            target.${member.setterName}(null);
        }
        else
        {
            final java.util.Collection<$member.type.fullyQualifiedName> values = new java.util.ArrayList<$member.type.fullyQualifiedName>();
            for (final ${member.type.fullyQualifiedIdentifierTypeName} element: ${member.name})
            {
                java.util.Optional<$member.type.fullyQualifiedName> entity = ${repositoryBeanName_}.findById(element);
                if(entity.isPresent())
                {
                    values.add(entity.get());
                }
            }
            target.${member.setterName}(values);
        }
#else
        if(source.${member.getterName}() == null) {
            target.${member.setterName}(null);
        } else {
            java.util.Optional<$member.type.fullyQualifiedName> entity = ${repositoryBeanName_}.findById(source.${member.getterName}());
            if(entity.isPresent())
            {
                target.${member.setterName}(entity.get());
            }
        }
#end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public ${manageable.fullyQualifiedEntityName} valueObjectToEntity(${manageable.fullyQualifiedManageableValueObjectName} source)
    {
        final ${manageable.fullyQualifiedEntityName} entity;
        if(source.${manageable.identifierGetterName}() == null)
        {
#if($manageable.abstract)
            throw new RuntimeException("${manageable.fullyQualifiedEntityName} is abstract.");
#else
            entity = ${manageable.fullyQualifiedEntityName}.Factory.newInstance();
#end
        }
        else
        {
            entity = this.load(source.${manageable.identifierGetterName}());
        }
        valueObjectToEntity(source, entity);
        return entity;
    }

#if($manageableSearchMatchMode == 'anywhere')
#set($matchMode = 'MatchMode.ANYWHERE')
#else
#set($matchMode = 'MatchMode.START')
#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection<${manageable.fullyQualifiedEntityName}> searchByExample($manageable.fullyQualifiedManageableSearchExampleName example)
    {
        /*javax.persistence.criteria.CriteriaBuilder builder = entityManager.getCriteriaBuilder();
        javax.persistence.criteria.CriteriaQuery<${manageable.fullyQualifiedEntityName}> criteria = builder.createQuery(${manageable.fullyQualifiedEntityName}.class);
        javax.persistence.criteria.Root<${manageable.fullyQualifiedEntityName}> root = criteria.from(${manageable.fullyQualifiedEntityName}.class);
		java.util.List<javax.persistence.criteria.Predicate> predicates = new java.util.ArrayList<javax.persistence.criteria.Predicate>();

        if(example != null)
        {
#foreach ($member in $manageable.manageableAttributes)
#if (!$member.inputFile && !$member.needsFileUpload)
            if (#if($member.type.stringType) org.apache.commons.lang3.StringUtils.isNotEmpty(example.${member.getterName}())#else example.${member.getterName}() != null#end)
#if ($member.type.stringType)
            {
                predicates.add(builder.like(root.<String>get("$member.name"), ${matchMode}.toMatchString(example.${member.getterName}())));
            }
#elseif ($member.type.dateType && $member.type.timeType)
            {
                // we check whether or not the user supplied time information within this particular date argument
                // if he/she didn't we assume he/she wishes to search in the scope of the entire day
                final java.util.Calendar calendar = new java.util.GregorianCalendar();
                calendar.setTime(example.${member.getterName}());
                if ( calendar.get(java.util.Calendar.HOUR) != 0
                     || calendar.get(java.util.Calendar.MINUTE) != 0
                    || calendar.get(java.util.Calendar.SECOND) != 0
                    || calendar.get(java.util.Calendar.MILLISECOND) != 0 )
                {
                    predicates.add(builder.equal(root.<java.util.Date>get("$member.name"), example.${member.getterName}()));
                }
                else
                {
                    calendar.add(java.util.Calendar.DATE, 1);
                    calendar.add(java.util.Calendar.MILLISECOND, -1);
                    predicates.add(builder.equal(root.<java.util.Date>get("$member.name"), example.${member.getterName}(), calendar.getTime()));
                }
            }
#elseif ($member.type.booleanType)
            {
##                criteria.add(Restrictions.eq("$member.name", example.${member.getterName}().booleanValue()));
                predicates.add(builder.equal(root.<java.util.Date>get("$member.name"), example.${member.getterName}()));
            }
#else
            {
##                criteria.add(Restrictions.eq("$member.name", example.${member.getterName}()));
                predicates.add(builder.equal(root.<java.util.Date>get("$member.name"), example.${member.getterName}()));
            }
#end
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
            if (example.${member.getterName}() != null && example.${member.getterName}().length > 0)
            {
##                criteria.createCriteria("$member.name").add(Restrictions.in("$member.type.identifierName", example.${member.getterName}()));
##                predicates.add(builder.in(root.<$member.type.fullyQualifiedName>get("$member.name"), example.${member.getterName}()));
#if($member.type.attributes.size() > 0)
//                predicates.add(root.join(${member.type.fullyQualifiedName}_.$member.name).in(example.${member.getterName}()));
#else
                predicates.add(builder.in(root.<$member.type.fullyQualifiedName>get("$member.name"), example.${member.getterName}()));
#end
            }
#else
            if (example.${member.getterName}() != null)
            {
##                criteria.createCriteria("$member.name").add(Restrictions.eq("$member.type.identifierName", example.${member.getterName}()));
                predicates.add(builder.equal(root.<$member.type.fullyQualifiedName>get("$member.name"), example.${member.getterName}()));
            }
#end
#end
        }
		
		if(!predicates.isEmpty()) {
			criteria.where();
	        javax.persistence.criteria.Predicate[] pr = new javax.persistence.criteria.Predicate[predicates.size()];
	        predicates.toArray(pr);
	        criteria.where(pr); 
		}

##        criteria.setResultTransformer(org.hibernate.criterion.CriteriaSpecification.DISTINCT_ROOT_ENTITY);
##        criteria.setCacheable(true);
        
        criteria.orderBy(builder.asc(root.get("${manageable.displayAttribute.name}")));
		javax.persistence.TypedQuery<${manageable.fullyQualifiedEntityName}> typedQuery = entityManager.createQuery(criteria);
#if ($manageable.maximumListSize > 0)
        typedQuery = typedQuery.setMaxResults($manageable.maximumListSize);

#end
		return typedQuery.getResultList();
        */

        return this.${stringUtils.uncapitalize(${manageable.entityName})}Repository.searchByExample(
#set ($i = 1)
#foreach ($member in $manageable.manageableAttributes)
            #if($i > 1),#end example.get${stringUtils.capitalize($member.name)}()
#set ($i = $i + 1)
#end

        );
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection<?> searchByExample(int transform, $manageable.fullyQualifiedManageableSearchExampleName example)
    {
        final java.util.Collection<?> result=this.searchByExample(example);
        transformEntities(transform, result);
        return result;
    }

    // spring-crud-dao-base merge-point
}