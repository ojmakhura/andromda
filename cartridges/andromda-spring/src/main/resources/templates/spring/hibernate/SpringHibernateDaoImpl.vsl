#if(!$entity.embeddableSuperclass)
#if ($recordType.equalsIgnoreCase("dao"))
#set ($generatedFile = "${entity.packagePath}/${entity.daoImplementationName}")
// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end.
#if ($entity.daoImplementationRequired)
#set ($generatedFile = "${generatedFile}.${implementationLanguage}")
// license-header ${implementationLanguage} merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
#else
#set ($generatedFile = "${generatedFile}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
//
#end
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
##
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
##
/**
 * @see $entity.fullyQualifiedName
 */
@org.springframework.stereotype.Repository("$stringUtils.uncapitalize($entity.daoName)")
#foreach($annotation in $service.additionalAnnotations)
@$annotation
#end
public class $entity.daoImplementationName
    extends $entity.fullyQualifiedDaoBaseName
{
    
    public ${entity.daoImplementationName}(
#foreach($entityRef in $entity.entityReferences)  
#set($refRepositoryName = "${stringUtils.uncapitalize(${entityRef.targetElement.entityName})}Repository")
#set($refRepositoryType = "${entityRef.targetElement.fullyQualifiedName}Repository")  
        ${refRepositoryType} $refRepositoryName,
#end
#set($repositoryName = "${stringUtils.uncapitalize(${entity.entityName})}Repository")
#set($repositoryType = "${entity.fullyQualifiedName}Repository")
        ${repositoryType} ${repositoryName}
    ) {

        super(
#foreach($entityRef in $entity.entityReferences) 
#set($refRepositoryName = "${stringUtils.uncapitalize(${entityRef.targetElement.entityName})}Repository")
            $refRepositoryName,
#end
            $repositoryName
        );
    }

#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnObject = "returnValue")
#set ($signature = $operation.implementationSignature)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    protected $operation.getterSetterReturnTypeName $signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        // ${toDoTag} implement $operation.visibility $operation.getterSetterReturnTypeName $signature
#if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#else
        throw new UnsupportedOperationException("${entity.fullyQualifiedName}.${signature} Not implemented!");
#end
    }

#end
#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        super.${valueObjectRef.transformationMethodName}(source, target);
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#foreach ($entityProp in $entity.allProperties)
#if ($property.name == $entityProp.name)
#set ($getVal = false)
#set ($getVal = $converter.typeConvert($entityProp.type.fullyQualifiedName, "source.${entityProp.getterName}()", $property.type.fullyQualifiedName) )
#if (!$getVal)
        // WARNING! No conversion for target.${property.name} (can't convert source.${entityProp.getterName}():${entityProp.type.fullyQualifiedName} to $property.type.fullyQualifiedName
#end
#end
#end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        return super.${valueObjectRef.transformationMethodName}(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private $entity.fullyQualifiedEntityName load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} implement load${entity.name}From${valueObjectRef.targetElement.name}
        throw new UnsupportedOperationException("${entity.packageName}.load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName) not yet implemented.");

        /* A typical implementation looks like this:
        if (${stringUtils.uncapitalize($valueObjectRef.name)}.getId() == null)
        {
            return  ${entity.fullyQualifiedEntityName}.Factory.newInstance();
        }
        else
        {
            return this.load(${stringUtils.uncapitalize($valueObjectRef.name)}.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        $entity.fullyQualifiedEntityName entity = this.load${entity.name}From${valueObjectRef.targetElement.name}($stringUtils.uncapitalize($valueObjectRef.name));
        this.${valueObjectRef.transformationToEntityMethodName}($stringUtils.uncapitalize($valueObjectRef.name), entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        super.${valueObjectRef.transformationToEntityMethodName}(source, target, copyIfNull);
#set ($attributes = $entity.getAttributes(true,false))
#foreach ($attribute in $attributes)
#foreach ($voProperty in $valueObjectRef.targetElement.allProperties)
#if ($attribute.name == $voProperty.name)
#set ($getVal = false)
#set ($getVal = $converter.typeConvert($voProperty.type.fullyQualifiedName, "source.${voProperty.getterName}()", $attribute.type.fullyQualifiedName) )
#if (!$getVal)
        // No conversion for target.${attribute.name} (can't convert source.${voProperty.getterName}():${voProperty.type.fullyQualifiedName} to $attribute.type.fullyQualifiedName
#end
#end
#end
#end
    }
#end
}
#end
#end