// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringBeanLocator.java.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($className = "BeanLocator")
#set ($generatedFile = "${className}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Provides lookup for Spring beans
 */
public class $className
{
    private ${className}()
    {
        // shouldn't be instantiated
    }

    /**
     * The prefix used for all bean ids.
     */
    public static final String BEAN_PREFIX = "${beanNamePrefix}";

    /**
     * The shared instance of this $className.
     */
    private static final $className instance = new ${className}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared bean locator instance.
     */
    public static final $className instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from the default settings.
     */
    public synchronized void init()
    {
        this.getContext();
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the beanRefFactory reference.
     * @param beanRefFactoryReferenceIdIn the id of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocationIn, final String beanRefFactoryReferenceIdIn)
    {
        // - initialize the context
        this.getContext();
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocationIn)
    {
        this.getContext();
    }

    /**
     * The default bean reference factory location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "$beanRefFactory";

    /**
     * The default bean reference factory ID.
     */
    private final String DEFAULT_BEAN_REFERENCE_ID = "$beanRefFactoryId";

    /**
     * Gets the Spring ApplicationContext.
     * @return beanFactoryReference.getFactory()
     */
    public synchronized org.springframework.context.ApplicationContext getContext()
    {
        return null;//ApplicationContextProvider.getApplicationContext();
    }

    /**
     * Shuts down the $className and releases any used resources.
     */
    public synchronized void shutdown()
    {
        
    }

    /**
     * Retrieve the bean with the given <code>name</code>.
     * @param name
     * @return getContext().getBean(BEAN_PREFIX + name)
     */
    public Object getBean(final String name)
    {
        return this.getContext().getBean(BEAN_PREFIX + name);
    }
}