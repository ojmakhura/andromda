// license-header ${implementationLanguage} merge-point
#set ($generatedFile = "${service.implementationPackagePath}/${service.implementationName}.${implementationLanguage}")
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 * TEMPLATE:    SpringServiceImpl.vsl in andromda-spring cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
 */
#if ($stringUtils.isNotBlank($service.implementationPackageName))
package $service.implementationPackageName;
#end

/**
 * @see $service.fullyQualifiedName
 */
 @org.springframework.transaction.annotation.Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRED, readOnly=false)
@org.springframework.stereotype.Service("$stringUtils.uncapitalize($service.name)")
public#if($service.abstract) abstract#end class $service.implementationName
    extends $service.fullyQualifiedBaseName
{

#foreach ($operation in $service.implementationOperations)
    /**
     * @see ${service.fullyQualifiedName}${esc.hash}${operation.getSignature(false)}
     */
    @Override
#set ($abstract = $service.abstract && $operation.abstract)
    protected#if ($abstract) abstract#end  $operation.implementationReturnTypeName $operation.implementationSignature
#if ($abstract)
        throws Exception;
#else
        throws Exception
    {
        // ${toDoTag} implement protected  $operation.implementationReturnTypeName $operation.implementationSignature
        throw new UnsupportedOperationException("${service.fullyQualifiedName}.${operation.implementationSignature} Not implemented!");
    }

#end
#end
}