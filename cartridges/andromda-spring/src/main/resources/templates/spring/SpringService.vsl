// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringService.vsl in andromda-spring cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
 */
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
$service.getDocumentation(" * ")
 */
public interface $service.name // 99999
#if ($service.generalization)
    extends $service.generalization.fullyQualifiedName
#if (!$service.interfaceAbstractions.empty)
        , $service.implementedInterfaceList
#end
#else
#if (!$service.interfaceAbstractions.empty)
    extends ${service.implementedInterfaceList}
#end
#end
{
#foreach ($attribute in $service.attributes)
#set ($typeName = $attribute.getterSetterTypeName)
#if(!$attribute.visibility.equalsIgnoreCase("private") && !$attribute.visibility.equalsIgnoreCase("protected"))
    /**
$attribute.getDocumentation("     * ")
     * Getter for $attribute.name
     * @return Value of $attribute.name
     */
    $attribute.visibility $typeName ${attribute.getterName}();

    /**
$attribute.getDocumentation("     * ")
     * Setter for $attribute.name
     * @param ${attribute.name}In New value for $attribute.name
     */
    $attribute.visibility void ${attribute.setterName}(${typeName} ${attribute.name}In);

#end
#end
##do generate operation declarations for all implemented service interfaces as well
##when spring transactions are enabled
##(workaround for spring MethodMapTransactionAttributeSource, which does no map inherited interface methods)
#if ($enableSpringTransactionsWhenEjbsEnabled.equalsIgnoreCase("true") || !$ejbsEnabled)
#set ($serviceOperations = $service.implementationOperations)
#else
#set ($serviceOperations = $service.operations)
#end
#foreach ($operation in $serviceOperations)
#if(!$operation.visibility.equalsIgnoreCase("private") && !$operation.visibility.equalsIgnoreCase("protected"))
    /** 
$operation.getDocumentation("     * ")
#foreach($parameter in $operation.arguments)
     * @param $parameter.name $parameter.getDocumentation("")
#end
     * @return $operation.returnParameter.name $operation.getterSetterReturnTypeName
#foreach($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
    #if($enableTemplating && !$operation.templateParameters.empty)$umlMetafacadeUtils.getGenericTemplate($operation, $enableTemplating) #end$operation.getterSetterReturnTypeName $operation.signature#if ($operation.exceptionsPresent) $operation.throwsClause#end;

#end
#end
}
