#if ($recordType.equalsIgnoreCase("dao"))
#set ($generatedFile = "${entity.packagePath}/${entity.daoName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#if ($entity.generalization)
#set ($superclass = $entity.generalization)
#set ($daoInheritance = $superclass && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#else
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#end
#else
#set ($daoInheritance = false)
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#end
##get entity collection type
#if ($enableTemplating)
#if ($daoInheritance)
#set ($entityCollectionType = "java.util.Collection<? extends ${rootEntityType}>")
#else
#set ($entityCollectionType = "java.util.Collection<${rootEntityType}>")
#end
#else
#set ($entityCollectionType = "java.util.Collection")
#end
/**
$stringUtils.stripEnd($entity.getDocumentation(" * "),null)
 * @see $entity.fullyQualifiedEntityName
 */
public interface $entity.daoName
#if ($daoInheritance)
    extends $superclass.fullyQualifiedDaoName
#end
{
#if (!$daoInheritance)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int $entity.daoNoTransformationConstantName = 0;

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * A transformation flag constant that denotes a transformation into a dom4j XML document tree should occur.
     */
    public static final int TRANSFORM_XML = 1;

#end
#end

    /**
     * Transforms the given results to a collection of {@link $rootEntityType}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final java.util.Collection#if($enableTemplating)<?>#end results);

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public static final int $valueObjectRef.transformationConstantName = $valueObjectRef.transformationConstantValue;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * ${valueObjectRef.transformationMethodName}(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target);

    /**
     * Converts this DAO's entity to an object of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     * @param entity
     * @return $valueObjectRef.targetElement.fullyQualifiedName
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     * @param entities
     * @return Collection#if($enableTemplating)<${valueObjectRef.targetElement.fullyQualifiedName}>#end

     */
    public Collection#if($enableTemplating)<${valueObjectRef.targetElement.fullyQualifiedName}>#end ${valueObjectRef.transformationToCollectionMethodName}($entityCollectionType entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     * @param entities
     * @return ${valueObjectRef.targetElement.fullyQualifiedName}[]
     */
    public ${valueObjectRef.targetElement.fullyQualifiedName}[] ${valueObjectRef.transformationToArrayMethodName}(java.util.Collection#if($enableTemplating)<?>#end entities);

    /**
     * Copies the fields of {@link $valueObjectRef.targetElement.fullyQualifiedName} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this DAO's entity.
     * @param $stringUtils.uncapitalize($valueObjectRef.name)
     * @return $entity.fullyQualifiedEntityName
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name));

    /**
     * Converts a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this
     * DAO's entity.
     * @param instances
     */
    public void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection#if($enableTemplating)<?>#end instances);

#end
#set($identifierTypeName="${entity.fullyQualifiedIdentifierTypeName}")
#set($identifierName="${entity.identifierName}")
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * Gets an instance of $entity.fullyQualifiedEntityName from the persistent store.
     * @param $identifierName
     * @return $rootEntityType
     */
    public $rootEntityType get($identifierTypeName $identifierName);

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}get($identifierTypeName)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param $identifierName the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, $identifierTypeName $identifierName);

    /**
     * Loads an instance of ${entity.fullyQualifiedEntityName} from the persistent store.
     * @param $identifierName
     * @return $rootEntityType
     */
    public $rootEntityType load($identifierTypeName $identifierName);

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}load(${identifierTypeName})} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param $identifierName the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, $identifierTypeName $identifierName);

    /**
     * Loads all entities of type {@link ${entity.fullyQualifiedEntityName}}.
     *
     * @return the loaded entities.
     */
    public $entityCollectionType loadAll();

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform, final int pageNumber, final int pageSize);

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     * @param $argumentName
     * @return $rootEntityType
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Creates an instance of ${entity.fullyQualifiedEntityName} using XML defined in <code>$argumentName</code>
     * and adds it to the persistent store.
     * @param $argumentName
     * @return $rootEntityType
     */
    public $rootEntityType create(org.dom4j.Element $argumentName);

    /**
     * Creates an instance of ${entity.fullyQualifiedEntityName} using XML defined in <code>$argumentName</code>
     * and adds it to the persistent store.
     * @param transform
     * @param $argumentName
     * @return Object
     */
    public Object create(int transform, org.dom4j.Element $argumentName);

#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}create(${entity.fullyQualifiedEntityName})} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param $argumentName
     * @return Object
     */
    public Object create(int transform, $entity.fullyQualifiedEntityName $argumentName);

    /**
     * Creates a new instance of ${entity.fullyQualifiedEntityName} and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of $entity.fullyQualifiedEntityName
     * instances to create.
     *
     * @return the created instances.
     */
    public $entityCollectionType create($entityCollectionType entities);

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}create($entity.fullyQualifiedEntityName)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public java.util.Collection#if($enableTemplating)<?>#end create(int transform, $entityCollectionType entities);

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#if (!$attributes.empty)
    /**
     * <p>
     * Creates a new <code>$entity.fullyQualifiedEntityName</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
#foreach($attribute in $attributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
     * @return $rootEntityType
     */
    public $rootEntityType create(
#foreach($attribute in $attributes)
        $attribute.getterSetterTypeName $attribute.name#if($velocityHasNext),#else);#end

#end

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}create($entity.getAttributeTypeList(true,false))} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
#foreach($attribute in $attributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
     * @return $rootEntityType
     */
    public Object create(
        int transform,
#foreach($attribute in $attributes)
        $attribute.getterSetterTypeName $attribute.name#if($velocityHasNext),#else);#end

#end

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * <p>
     * Creates a new <code>$entity.fullyQualifiedEntityName</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
#foreach($property in $requiredProperties)
     * @param $property.name
#end
     * @return $rootEntityType
     */
    public $rootEntityType create(
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityHasNext),#else);#end

#end

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}create($entity.getRequiredAttributeTypeList(true,false))} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
#foreach($property in $requiredProperties)
     * @param $property.name
#end
     * @return Object
     */
    public Object create(
        int transform,
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityHasNext),#else);#end

#end
#end

#end
#end
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     */
    public void update($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     */
    public void update(org.dom4j.Element $argumentName);

#end
    /**
     * Create or Update the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     * @return $entity.fullyQualifiedEntityName
     */
    public $entity.fullyQualifiedEntityName createOrUpdate($entity.fullyQualifiedEntityName $argumentName);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update($entityCollectionType entities);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
     * @param $argumentName
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Removes the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     */
    public void remove(org.dom4j.Element $argumentName);

#end
    /**
     * Removes the instance of $entity.fullyQualifiedEntityName having the given
     * <code>identifier</code> from the persistent store.
     * @param $identifierName
     */
    public void remove($identifierTypeName $identifierName);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove($entityCollectionType entities);

#foreach ($operation in $entity.queryOperations)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($enableTemplating && $operation.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#if(!$operation.criteriaFinder)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link ${esc.hash}${operation.getSignature(false)}}.
     * </p>
     * @param queryString
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
#if($enableTemplating)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($operation.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#if ($operation.returnType.collectionType)
#if($enableTemplating)
#set ($returnType = "${operation.getterSetterReturnTypeName}<?>")
#end
#elseif ($operation.many)
#set ($returnType = "$operation.getterSetterReturnTypeName.substring(0,$operation.getterSetterReturnTypeName.indexOf('<'))<?>")
#end

#else
#set ($returnType = "Object")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)}.
     * </p>
     * @param transform
     * @param queryString
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int, String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#end
#else
#if ($operation.returnType.collectionType)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($enableTemplating)<?>#end")
#elseif ($operation.many)
#set ($returnType = "$operation.getterSetterReturnTypeName.substring(0,$operation.getterSetterReturnTypeName.indexOf('<'))<?>")
#else
#set ($returnType = "Object")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);

#end
#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int, String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility org.springframework.data.domain.Page<$entity.name> ${operation.name}(final org.springframework.data.domain.Pageable pageable#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility org.springframework.data.domain.Page<$entity.name> ${operation.name}(final org.springframework.data.domain.Pageable pageable#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);
#end

#end
#end
#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = "$operation.getterSetterReturnTypeName")
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#end
#set ($fullyQualifiedPagingResultName = $cartridgeSpringUtils.getFullyQualifiedClassName($springCommonTypesPackage, "PaginationResult"))
#set ($fullyQualifiedSearchClassName = $cartridgeSpringUtils.getFullyQualifiedClassName($springTypesPackage, "Search"))

##     /**
##      * Does the same thing as {@link ${esc.hash}search(int, ${fullyQualifiedSearchClassName})} but with an
##      * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
##      * limit your data to a specified page number and size.
##      *
##      * @param transform the transformation flag.
##      * @param pageNumber the page number in the data to retrieve
##      * @param pageSize the size of the page to retrieve.
##      * @param search the search object which provides the search parameters and pagination specification.
##      * @return any found results from the search wrapped in a {@link $fullyQualifiedPagingResultName} instance.
##      */
##     public $fullyQualifiedPagingResultName search(final int transform, final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search);
##
##     /**
##      * Does the same thing as {@link ${esc.hash}search(${fullyQualifiedSearchClassName})} but with an
##      * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
##      * limit your data to a specified page number and size.
##      *
##      * @param pageNumber the page number in the data to retrieve
##      * @param pageSize the size of the page to retrieve.
##      * @param search the search object which provides the search parameters and pagination specification.
##      * @return any found results from the search wrapped in a {@link $fullyQualifiedPagingResultName} instance.
##      */
##     public $fullyQualifiedPagingResultName search(final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search);

##     /**
##      * Does the same thing as {@link ${esc.hash}search(${fullyQualifiedSearchClassName})} but with an
##      * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
##      * finder results will <strong>NOT</strong> be transformed during retrieval.
##      * If this flag is any of the other constants defined here
##      * then results <strong>WILL BE</strong> passed through an operation which can optionally
##      * transform the entities (into value objects for example). By default, transformation does
##      * not occur.
##      *
##      * @param transform the transformation flag.
##      * @param search the search object which provides the search parameters and pagination specification.
##      * @return any found results from the search.
##      */
##     public java.util.Collection#if($enableTemplating)<?>#end search(final int transform, final $fullyQualifiedSearchClassName search);

##     /**
##      * Performs a search using the parameters specified in the given <code>search</code> object.
##      *
##      * @param search the search object which provides the search parameters and pagination specification.
##      * @return any found results from the search.
##      */
##     public java.util.Collection#if($enableTemplating)<#if($daoInheritance)? extends #end${rootEntityType}>#end search(final $fullyQualifiedSearchClassName search);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
     * that the {@link ${esc.hash}$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$entity.valueObjectReferences.empty)
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link $entity.fullyQualifiedName} - {@link ${esc.hash}$entity.daoNoTransformationConstantName}</li>
#foreach ($valueObjectRef in $entity.valueObjectReferences)
#set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${esc.hash}${valueObjectRef.transformationConstantName}}</li>
#end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link ${esc.hash}${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see ${esc.hash}transformEntities(int,java.util.Collection)
     */
    public Object transformEntity(final int transform, final $entity.fullyQualifiedName entity);

    /**
     * Transforms a collection of entities using the
     * {@link ${esc.hash}transformEntity(int,$entity.fullyQualifiedName)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>$entity.fullyQualifiedDaoName</code>
     * @param entities the collection of entities to transform
     * @see ${esc.hash}transformEntity(int,$entity.fullyQualifiedName)
     */
    public void transformEntities(final int transform, final java.util.Collection#if($enableTemplating)<?>#end entities);

#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#foreach ($attribute in $attributes)
#if ($attribute.unique)
#set ($searchUniqueMethod = "searchUnique${stringUtils.capitalize($attribute.name)}")
    /**
     * Searches for a single instance of ${entity.fullyQualifiedEntityName}.
     * @param ${attribute.name} the unique ${attribute.name} to be used in the search.'
     * @return a single instance of ${entity.fullyQualifiedEntityName}.
     */
    public ${entity.fullyQualifiedEntityName} $searchUniqueMethod(final ${attribute.type.fullyQualifiedName} ${attribute.name});

    /**
     * Searches for a single instance of ${entity.fullyQualifiedEntityName}.
     * @param transform the transformation flag.
     * @param ${attribute.name} the unique ${attribute.name} to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object $searchUniqueMethod(final int transform, final ${attribute.type.fullyQualifiedName} ${attribute.name});

#end
#end

    // spring-dao merge-point
}
#end