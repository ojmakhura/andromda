#set ($generatedFile = "${service.implementationPackagePath}/${service.baseName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
 */
#if ($stringUtils.isNotBlank($service.implementationPackageName))
package $service.implementationPackageName;
#end

/**
 * <p>
 * Spring Service base class for <code>$service.fullyQualifiedName</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see $service.fullyQualifiedName
 */
public abstract class $service.baseName
#if($service.generalization)
    extends $service.generalization.fullyQualifiedImplementationName
#end
    implements $service.fullyQualifiedName
{
    protected org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(${service.baseName}.class);
#foreach ($attribute in $service.attributes)
#set ($typeName = $attribute.getterSetterTypeName)
    /**
$attribute.getDocumentation("     * ")
     */
    private $typeName $attribute.name#if ($attribute.defaultValuePresent) = $attribute.defaultValue#end;

    /**
     * Getter for $attribute.name
     * @return Value of $attribute.name
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }
    /**
     * Setter for $attribute.name
     * @param ${attribute.name}In New value for $attribute.name
     */
    $attribute.visibility void ${attribute.setterName}(${typeName} ${attribute.name}In)
    {
        this.${attribute.name} = ${attribute.name}In;
    }

#end
#foreach($serviceRef in $service.serviceReferences)
#set ($targetElement = $serviceRef.targetElement)
    private $targetElement.fullyQualifiedName $serviceRef.name;

    /**
     * Sets the reference to <code>$serviceRef.name</code>.
     * @param ${serviceRef.name}In
     */
    public void ${serviceRef.setterName}(${targetElement.fullyQualifiedName} ${serviceRef.name}In)
    {
        this.$serviceRef.name = ${serviceRef.name}In;
    }

    /**
     * Gets the reference to <code>$serviceRef.name</code>.
     * @return $serviceRef.name
     */
    protected $targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        return this.$serviceRef.name;
    }

#end
#foreach($entityRef in $service.entityReferences)
	@org.springframework.beans.factory.annotation.Autowired
    private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

    /**
     * Sets the reference to <code>$entityRef.name</code>'s DAO.
     * @param ${entityRef.daoName}In
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoName}In)
    {
        this.$entityRef.daoName = ${entityRef.daoName}In;
    }

    /**
     * Gets the reference to <code>$entityRef.name</code>'s DAO.
     * @return $entityRef.daoName
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#foreach($destination in $service.messagingDestinations)
    private org.springframework.jms.core.JmsOperations $destination.templateBeanName;

    /**
     * Sets the JMS template for the $destination.name JMS destination.
     * @param $destination.templateBeanName
     */
    public void ${destination.templateSetterName}(org.springframework.jms.core.JmsOperations $destination.templateBeanName)
    {
        this.$destination.templateBeanName = $destination.templateBeanName;
    }

    /**
     * Gets the JMS template for the $destination.name JMS destination.
     * @return $destination.templateBeanName
     */
    protected org.springframework.jms.core.JmsOperations ${destination.templateGetterName}()
    {
        return this.$destination.templateBeanName;
    }

#end
#foreach ($operation in $service.operations)
#if ($operation.incomingMessageOperation)
    private $jmsMessageListenerContainerImplementation $operation.messageListenerContainerReferenceName;

    /**
     * Sets the incoming message listener container for {@link ${esc.hash}${operation.getSignature(false)})
     * @param $operation.messageListenerContainerReferenceName
     */
    public void set$stringUtils.capitalize($operation.messageListenerContainerReferenceName)($jmsMessageListenerContainerImplementation $operation.messageListenerContainerReferenceName)
    {
        this.$operation.messageListenerContainerReferenceName = $operation.messageListenerContainerReferenceName;
    }

    /**
     * Gets the incoming message listener container for {@link ${esc.hash}${operation.getSignature(false)})
     * @return $operation.messageListenerContainerReferenceName
     */
    protected $jmsMessageListenerContainerImplementation get$stringUtils.capitalize($operation.messageListenerContainerReferenceName)()
    {
        return this.$operation.messageListenerContainerReferenceName;
    }

#end
#end
#foreach ($operation in $service.implementationOperations)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations && $operation.visibility != "private" && $operation.visibility != "protected")
    @Override
#end
	@org.springframework.transaction.annotation.Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRED)
    $operation.visibility $operation.getterSetterReturnTypeName $operation.getSignature("final")
#if ($operation.exceptionsPresent)
        $operation.throwsClause
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
#if (!$argument.type.stringType || $argument.many)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '${argument.name}' can not be null");
        }
#else
        if ($argument.name == null || ${argument.name}.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '${argument.name}' can not be null or empty");
        }
#end
#if (!$argument.many && !$argument.type.enumeration && !$argument.type.entityMetaType)
#foreach ($attribute in $argument.type.getAttributes(true))
#if ($attribute.required && !$attribute.type.primitive && !$attribute.static)
#if (!$attribute.type.stringType || $attribute.many)
        if (${argument.name}.${attribute.getterName}() == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '$argument.name.$attribute.name' can not be null");
        }
#else
        if (${argument.name}.${attribute.getterName}() == null || ${argument.name}.${attribute.getterName}().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '$argument.name.$attribute.name' can not be null or empty");
        }
#end
#end
#end
#end
#end
#end
#end
#if ($operation.constraintsPresent)
        this.$operation.preconditionCall;
#end
        try
        {
#if (!$operation.messageOperation)
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
#elseif ($operation.outgoingMessageOperation)
            this.${operation.outgoingDestination.templateBeanName}.send(new org.springframework.jms.core.MessageCreator() {
                public javax.jms.Message createMessage(javax.jms.Session session) throws javax.jms.JMSException
                {
                    try
                    {
                        return ${service.baseName}.this.${operation.outgoingMessageImplementationCall};
                    }
                    catch (Exception ex)
                    {
                        throw new ${service.fullyQualifiedDefaultExceptionName}(
                            "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + ex,
                            ex);
                    }
                }
            });
#elseif ($operation.incomingMessageOperation)
#if ($operation.arguments.empty)
            if (message == null)
            {
                message = ${operation.incomingDestination.templateBeanName}.receive();
            }
#end
#if ($operation.returnTypePresent)
            return this.${operation.incomingMessageImplementationCall};
#else
            this.${operation.incomingMessageImplementationCall};
#end
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new ${service.fullyQualifiedDefaultExceptionName}(
                "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + th,
                th);
        }
    }

#if ($operation.constraintsPresent)
    /**
     * Performs any precondition checks for {@link ${esc.hash}${operation.call}}.
#foreach ($constraint in $operation.preconditions)
     * PRECONDITION:  $constraint.name: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
     */
    private void $operation.preconditionSignature
    {
#renderPreconditions($operation)
    }

#end
    /**
     * Performs the core logic for {@link ${esc.hash}${operation.getSignature(false)}}
#foreach ($parameter in $operation.arguments)
     * @param $parameter.name $parameter.type.fullyQualifiedName $parameter.getDocumentation("")
#end
     * @return $operation.implementationReturnTypeName
     * @throws Exception
     */
    protected abstract $operation.implementationReturnTypeName $operation.implementationSignature
        throws Exception;

#end
#if (!$service.generalization)
    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
#if ($externalPrincipalStoreClass)
#set ($principalStoreCall = "#if(!$enableTemplating)(${externalPrincipalStoreGetterType})#end${externalPrincipalStoreClass}.${externalPrincipalStoreGetter};")
#set ($principalStoreType = ${externalPrincipalStoreGetterType})
#else
#set ($principalStoreCall = "${principalStoreName}.get();")
#if($stringUtils.isNotBlank($springTypesPackage))
#set ($principalStoreCall = "${springTypesPackage}.${principalStoreCall}")
#end
#set ($principalStoreType = "java.security.Principal")
#end
    protected $principalStoreType getPrincipal()
    {
        return $principalStoreCall
    }
#if ($service.webServiceOutgoingAttachmentHandlerCall)

    /**
     * Adds an attachment in the webservice's outgoing response message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     *
     * @param content the actual content to add as the attachment.
     * @param contentType the type of the contents
     * @param dime whether or not DIME should be used (instead of MIME).
     */
    protected void addOutgoingWebServiceAttachment(final Object content, final String contentType, boolean dime)
        throws Exception
    {
        $service.webServiceOutgoingAttachmentHandlerCall;
    }
#end
#if ($service.webServiceIncomingAttachmentHandlerCall)

    /**
     * Retrieves any incoming attachments in the webservice's request message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     * @throws Exception
     */
    protected javax.activation.DataHandler[] getIncomingWebServiceAttachments()
        throws Exception
    {
        return $service.webServiceIncomingAttachmentHandlerCall;
    }
#end

	@org.springframework.beans.factory.annotation.Autowired
	MessageSource messageSource;

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the ${messageBundlePath}.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the ${messageBundlePath}.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the ${messageBundlePath}.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

#end
#if ($ejbSecurityEnabled)
#set ($principalStoreClassName = $principalStoreName)
#if($stringUtils.isNotBlank($springTypesPackage))
#set ($principalStoreClassName = "${springTypesPackage}.${principalStoreClassName}")
#end
#foreach ($role in $service.allRoles)
#set ($isInRoleName = "is${stringUtils.upperCamelCaseName($role.name.toLowerCase())}")
#set ($isPrincipalInRoleName = "isPrincipal${stringUtils.upperCamelCaseName($role.name.toLowerCase())}")
    /**
     * Indicates whether or not the current principal plays the <strong>$role.name</strong> role in the application.
     * @return $principalStoreClassName.$isInRoleName()
     */
    public boolean $isPrincipalInRoleName()
    {
        return $principalStoreClassName.$isInRoleName();
    }

#end

    /**
     * Gets all roles belonging to the current principal.
     *
     * @return the names of the current principal roles.
     */
    public String[] getPrincipalRoles()
    {
        return ${principalStoreClassName}.getPrincipalRoles();
    }
#end

// spring-service-base merge-point
}