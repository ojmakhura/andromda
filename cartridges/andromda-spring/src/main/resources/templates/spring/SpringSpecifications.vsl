#set ($generatedFile = "${entity.packagePath}/${entity.name}Specifications.java")
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
import java.util.Collection;
import org.springframework.data.jpa.domain.Specification;

// $springSpecifications
public final class ${entity.name}Specifications {

#set ($entityIdVariable = $stringUtils.uncapitalize(${entity.name}).substring(0,1))
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if($target.navigable)
#set ($capitalised = ${stringUtils.capitalize($target.name)})
#set ($joinEntity = $target.type)
#if($joinEntity.identifiersPresent)
#foreach($identifier in $joinEntity.identifiers)
#set ($capitalisedIdentifier = ${stringUtils.capitalize($identifier.name)})
    // Specifications for $target.getterSetterTypeName $target.name
    public static Specification<$entity.name> findBy${capitalised}${capitalisedIdentifier}In(java.util.Collection<$identifier.type.fullyQualifiedName> ${identifier.name}s) {
        return (root, cq, cb) -> {
            
#if ($associationEnd.many2One)
            // Many to One
#elseif ($associationEnd.one2Many)
            // One to Many
#elseif ($associationEnd.one2One)
            // One to One
#elseif ($associationEnd.many2Many)
            // Many to Many
#end 
            javax.persistence.criteria.Join<$entity.name, $target.type.fullyQualifiedEntityName> ${target.name}Join = root.join("$target.name");
            return cb.in(${target.name}Join.get("$identifier.name")).value(${identifier.name}s);
        };
    }

    public static Specification<$entity.name> findBy${capitalised}${capitalisedIdentifier}Null() {
        return (root, cq, cb) -> {
            
            javax.persistence.criteria.Join<$entity.name, $target.type.fullyQualifiedEntityName> ${target.name}Join = root.join("$target.name");
            return cb.isNull(${target.name}Join.<$identifier.type.fullyQualifiedName>get("${identifier.name}"));
        };
    }

    public static Specification<$entity.name> findBy${capitalised}${capitalisedIdentifier}NotNull() {
        return (root, cq, cb) -> {
            javax.persistence.criteria.Join<$entity.name, $target.type.fullyQualifiedEntityName> ${target.name}Join = root.join("$target.name");
            return cb.isNotNull(${target.name}Join.<$identifier.type.fullyQualifiedName>get("${identifier.name}"));
        };
    }

    public static Specification<$entity.name> findBy${capitalised}${capitalisedIdentifier}($identifier.type.fullyQualifiedName ${identifier.name}) {
        return (root, cq, cb) -> {
            
#if ($associationEnd.many2One)
            // Many to One
#elseif ($associationEnd.one2Many)
            // One to Many
#elseif ($associationEnd.one2One)
            // One to One
#elseif ($associationEnd.many2Many)
            // Many to Many
#end
            javax.persistence.criteria.Join<$entity.name, $target.type.fullyQualifiedEntityName> ${target.name}Join = root.join("$target.name");
            return cb.equal(${target.name}Join.get("$identifier.name"), ${identifier.name});
        };
    }

#end
#end
#end
#end
#set ($finders = $entity.getQueryOperations(false))
#foreach($finder in $finders)
## Only interested in criteriaFinder methods
#if($finder.criteriaFinder)
#set($criteriaArgument = $finder.criteriaArgument)
#set($criteriaArgumentName = $criteriaArgument.name)
#set($criteriaClass = $criteriaArgument.type)
#foreach($criteriaAttribute in $criteriaClass.getAttributes(true))
#set($isJoin = $hibernateUtils.isJoin($criteriaAttribute.attributeName))
#set($joinLength = $hibernateUtils.joinLength($criteriaAttribute.attributeName))
#if($isJoin && !(${criteriaAttribute.attributeName.endsWith(".id")} && $joinLength < 3))
#set ($capitalised = $stringUtils.capitalize($hibernateUtils.getAttributeName($criteriaAttribute.attributeName)))
#set ($specName = "findBy${capitalised}")
#set ($attributeName = $criteriaAttribute.attributeName)
#set ($getter = "get$stringUtils.capitalize($criteriaAttribute.name)()")
#set ($comparator = "equal")
#if($criteriaAttribute.comparatorPresent)
#set ($comparator = "$criteriaAttribute.comparatorConstant $criteriaAttribute.comparator")
#if($criteriaAttribute.comparatorConstant == "LIKE_COMPARATOR")
#set ($comparator = "like")
#elseif($criteriaAttribute.comparatorConstant == "INSENSITIVE_LIKE_COMPARATOR")
#set ($comparator = "like")
#elseif($criteriaAttribute.comparatorConstant == "EQUAL_COMPARATOR")
#set ($comparator = "equal")
#elseif($criteriaAttribute.comparatorConstant == "GREATER_THAN_OR_EQUAL_COMPARATOR")
#set ($comparator = "greaterThanOrEqualTo")
#elseif($criteriaAttribute.comparatorConstant == "GREATER_THAN_COMPARATOR")
#set ($comparator = "greaterThan")
#elseif($criteriaAttribute.comparatorConstant == "LESS_THAN_OR_EQUAL_COMPARATOR")
#set ($comparator = "lessThanOrEqualTo")
#elseif($criteriaAttribute.comparatorConstant == "LESS_THAN_COMPARATOR")
#set ($comparator = "lessThanOrEqual")
#elseif($criteriaAttribute.comparatorConstant == "IN_COMPARATOR")
#set ($comparator = "in")
#elseif($criteriaAttribute.comparatorConstant == "NOT_EQUAL_COMPARATOR")
#set ($comparator = "notEqual")
#end
#end
#set ($matchMode = "${criteriaAttribute.name}")
#if($criteriaAttribute.matchModePresent)
#set ($matchMode = "$criteriaAttribute.name")
#if($criteriaAttribute.matchModeConstant == "ANYWHERE")
#set ($matchMode = "'%' + ${criteriaAttribute.name} + '%'")
#elseif($criteriaAttribute.matchModeConstant == "START")
#set ($matchMode = "${criteriaAttribute.name} + '%'")
#elseif($criteriaAttribute.matchModeConstant == "END")
#set ($matchMode = "'%' + ${criteriaAttribute.name}")
#end
#end
    public static Specification<$entity.name> ${hibernateUtils.getCriteriaAttributeMethodName($criteriaAttribute)}($criteriaAttribute.getterSetterTypeName $criteriaAttribute.name) {
        return (root, cq, cb) -> {
#foreach($join in ${hibernateUtils.getJoins($criteriaAttribute.attributeName)})
            $join;
#end
            return cb.${comparator}(${hibernateUtils.getLastJoinName($criteriaAttribute.attributeName)}Join.get("${hibernateUtils.getJoinAttributeName($criteriaAttribute.attributeName)}"), $matchMode);
        };
    }

#end
#end
#end
#end
}