// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($generatedFile = "${service.implementationPackagePath}/${service.name}Test.${implementationLanguage}")
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ${service.name}Test {

    protected org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(${service.name}Test.class);
    
    @InjectMocks
    private ${service.name}Impl $stringUtils.uncapitalize($service.name);

#foreach($ref in $service.entityReferences)
    @Mock
    private $ref.targetElement.fullyQualifiedDaoName $ref.daoName;

#set ($ent = $ref.targetElement)
    @Mock
    private ${ent.fullyQualifiedName}Repository ${stringUtils.uncapitalize($ent.name)}Repository;
#end

    @Test
    public void checkInjects() {

#foreach($ref in $service.entityReferences)
        Assertions.assertNotNull($ref.daoName);
#set ($ent = $ref.targetElement)
        Assertions.assertNotNull(${stringUtils.uncapitalize($ent.name)}Repository);
#end
        Assertions.assertNotNull($stringUtils.uncapitalize($service.name));

    }

#if ($enableSpringTransactionsWhenEjbsEnabled.equalsIgnoreCase("true") || !$ejbsEnabled)
#set ($serviceOperations = $service.implementationOperations)
#else
#set ($serviceOperations = $service.operations)
#end
#foreach ($operation in $serviceOperations)
    @Test
    public void ${operation.name}_success() {
        
    }

    @Test
    public void ${operation.name}_fail() {
        
    }

#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
    @Test
    public void ${operation.name}_${argument.name}_null() {
        
    }

#if (!$argument.many && !$argument.type.enumeration && !$argument.type.entityMetaType)
#foreach ($attribute in $argument.type.getAttributes(true))
    @Test
    public void ${operation.name}_${stringUtils.capitalize(${argument.name})}_${stringUtils.capitalize(${attribute.name})}_null() {
        
    }

#end
#end
#end
#end
#end
#end
}