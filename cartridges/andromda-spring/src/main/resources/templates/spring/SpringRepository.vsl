// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($generatedFile = "${entity.packagePath}/${entity.name}Repository.java")
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)

public interface ${entity.name}Repository extends 
        org.springframework.data.jpa.repository.JpaRepository<${entity.name}, Long>,
        org.springframework.data.jpa.repository.JpaSpecificationExecutor<${entity.name}> {

#set ($entityIdVariable = $stringUtils.uncapitalize(${entity.name}).substring(0,1))
#foreach($attribute in $entity.attributes)
#if(!$attribute.many)
    // Generating pageable query method for $attribute.name
#if($attribute.unique && $attribute.name != "id" && $attribute.type.clobType && $attribute.type.blobType && $attribute.type.fileType)
    $entity.name findBy${stringUtils.capitalize($attribute.name)}($attribute.type.fullyQualifiedName $attribute.name);

#elseif(!$attribute.required)
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Null(org.springframework.data.domain.Pageable pageable);

#elseif(!$attribute.booleanType)
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);

#else
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}False();

    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}True();

#end
## Other derived queries
#if($attribute.type.stringType)
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}StartingWithIgnoreCase($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}EndingWithIgnoreCase($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}ContainingIgnoreCase($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}LikeIgnoreCase($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}NotLikeIgnoreCase($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Containing($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
#elseif($attribute.type.dateType)
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}After($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Before($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Between($attribute.type.fullyQualifiedName ${attribute.name}Start, $attribute.type.fullyQualifiedName ${attribute.name}End, org.springframework.data.domain.Pageable pageable);
    
#elseif($attribute.type.integerType || 
        $attribute.type.floatType || 
        $attribute.type.doubleType || 
        $attribute.type.longType)
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}LessThanEqual($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}GreaterThanEqual($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}LessThan($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}GreaterThan($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Between($attribute.type.fullyQualifiedName ${attribute.name}Start, $attribute.type.fullyQualifiedName ${attribute.name}End, org.springframework.data.domain.Pageable pageable);
    
#end
#end
## list as search parameter
    // Search by a list of parameters
    java.util.List<$entity.name> findBy${stringUtils.capitalize($attribute.name)}Not($attribute.type.fullyQualifiedName $attribute.name);
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}Not($attribute.type.fullyQualifiedName $attribute.name, org.springframework.data.domain.Pageable pageable);
    
    java.util.List<$entity.name> findBy${stringUtils.capitalize($attribute.name)}In(java.util.List<$attribute.type.fullyQualifiedName> ${attribute.name}s);
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}In(java.util.List<$attribute.type.fullyQualifiedName> ${attribute.name}s, org.springframework.data.domain.Pageable pageable);
    
    java.util.List<$entity.name> findBy${stringUtils.capitalize($attribute.name)}NotIn(java.util.List<$attribute.type.fullyQualifiedName> ${attribute.name}s);
    org.springframework.data.domain.Page<${entity.name}> findBy${stringUtils.capitalize($attribute.name)}NotIn(java.util.List<$attribute.type.fullyQualifiedName> ${attribute.name}s, org.springframework.data.domain.Pageable pageable);
    
#end
## Deal with query operations
## #if ($daoInheritance)
## #set ($queryOperations = $entity.getQueryOperations(true))
## #else
## #set ($queryOperations = $entity.queryOperations)
## #end
## #foreach ($finder in $queryOperations)
## #set($criteriaArgument = $finder.criteriaArgument)
## #set($criteriaArgumentName = $criteriaArgument.name)
## #if ($finder.returnTypePresent)
## #if ($finder.returnType.collectionType)
## #set ($returnType = "${finder.getterSetterReturnTypeName}#if($enableTemplating)<$finder.returnType.name>#end")
## #elseif ($finder.many)
## #set ($returnType = "$finder.getterSetterReturnTypeName.substring(0,$finder.getterSetterReturnTypeName.indexOf('<'))<$finder.returnType.name>")
## #else
## #set ($returnType = "Object")
## #end
## #else
## #set ($returnType = "void")
## #end
## #set ($entityIdVariable = $stringUtils.uncapitalize(${entity.name}).substring(0,1))
## #set ($typedAttributes = "")
##     @org.springframework.data.jpa.repository.Query(
##         value = $finder.getQuery($entity)
##     )
##     $returnType ${finder.name}(
## #if($finder.criteriaFinder)
## #set($criteriaArgument = $finder.criteriaArgument)
## #set($criteriaArgumentName = $criteriaArgument.name)
## #set($criteriaClass = $criteriaArgument.type)
## #set ($i = 1)
## #set ($attributes = $criteriaClass.getAttributes(true))
## #foreach($criteriaAttribute in $attributes)
## #if($criteriaAttribute.many)
## #set ($type = "java.util.Collection<$criteriaAttribute.type.fullyQualifiedName>")
## #else
## #set ($type = "$criteriaAttribute.type.fullyQualifiedName")
## #end
##         @org.springframework.data.repository.query.Param("$criteriaAttribute.name") $type $criteriaAttribute.name#if($i < $attributes.size()),
## #end
## #set ($i = $i + 1)
## #end
## #else
## #set ($i = 1)
## #foreach($arg in $finder.arguments)
##         #if($i > 1), #end@org.springframework.data.repository.query.Param("$arg.name") $arg.type.fullyQualifiedName $arg.name
## #set ($i = $i + 1)
## #end
## #end
##     );
## #end

#if($entity.manageableDaoName && $entity.manageableAttributes.size() > 0)
#set ($entityIdVariable = $stringUtils.uncapitalize(${entity.name}).substring(0,1))
    @org.springframework.data.jpa.repository.Query(
        value = "SELECT $entityIdVariable FROM ${entity.name} AS $entityIdVariable \n" +
        "WHERE \n" +
#set ($i = 1)
#foreach ($member in $entity.manageableAttributes)
#if (!$member.inputFile && !$member.needsFileUpload)
#if ($member.type.stringType)
        "#if($i > 1)AND #end(:$member.name is null OR ${entityIdVariable}.$member.name LIKE CONCAT('%', :$member.name#if($manageableSearchMatchMode == 'anywhere'), '%'#end)) \n"#if($i < $entity.manageableAttributes.size()) +
#end
#else
        "#if($i > 1)AND #end(:$member.name is null OR ${entityIdVariable}.$member.name = :$member.name) \n"#if($i < $entity.manageableAttributes.size()) +
#end
#end
#end
#set ($i = $i + 1)
#end

    )
#if ($finder.returnType.setType || !($finder.returnType.collectionType || $finder.many))
#set ($rtype = "java.util.Set")
#else
#set ($rtype = "java.util.List") 
#end
    $rtype<${entity.fullyQualifiedName}> searchByExample(
#set ($i = 1)
#foreach ($member in $entity.manageableAttributes)
        @org.springframework.data.repository.query.Param("$member.name") $member.type.fullyQualifiedName $member.name#if($i < $entity.manageableAttributes.size()),
#end
#set ($i = $i + 1)
#end

    );
#end
}