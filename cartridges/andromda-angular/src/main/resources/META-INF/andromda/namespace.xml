<?xml version="1.0" encoding="UTF-8" ?>

<namespace name="angular">
    <components>
        <component name="cartridge">
            <path>META-INF/andromda/cartridge.xml</path>
        </component>
        <component name="metafacades">
            <path>META-INF/andromda/metafacades.xml</path>
        </component>
        <component name="profile">
            <path>META-INF/andromda/profile.xml</path>
        </component>
    </components>
    <properties>
        <!-- namespace-propertyGroup merge-point -->
        <propertyGroup name="Outlets">
            <documentation>
                Defines the locations to which output is generated.
            </documentation>
            <property name="applicationName" required="true">
                <documentation>
                    The name of the application (this is used as the display
                    name of the application).
                </documentation>
            </property>
            <property name="applicationId" required="true">
                <documentation>
                    The id of the application (this is used as the display
                    name of the application).
                </documentation>
            </property>            
            <property name="applicationPackage" required="true">
                <documentation>
                    The id of the application (this is used as the display
                    name of the application).
                </documentation>
            </property>           
            <property name="angularBase" required="true">
                <documentation>
                    The location of the angular module.
                </documentation>
            </property>           
            <property name="angularAppDir" required="true">
                <documentation>
                    The location of the src/app directory.
                </documentation>
            </property>
            <property name="output">
                <documentation>
                    The location to which any controllers are generated (this outlet
                    contains classes which are fully generated and should not be
                    touched).
                </documentation>
            </property>
            <property name="services">
                <documentation>
                    The location to which any services are generated (this outlet
                    contains classes which are fully generated and should not be
                    touched).
                </documentation>
            </property>
            <property name="service-impls">
                <documentation>
                    The location to which any services implementations that the must be edited
                </documentation>
            </property>
            <property name="views">
                <documentation>
                    Where the application views are output.
                </documentation>
            </property>
            <property name="models">
                <documentation>
                    The models are generated here.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Configuration">
            <documentation>
               The properties that provide configuration of the JSF configuration files.
            </documentation>
            <property name="facesConfig">
                <default>faces-config.xml</default>
                <documentation>
                    The name of the JSF configuration file (this file stores the JSF managed bean
                    form information and navigation rules).
                </documentation>
            </property>
            <property name="facesConfigFiles" required="false">
                <documentation>
                    Comma separated list of URIs of (additional) faces config files.
                    (e.g. /WEB-INF/jsf-config.xml).  See JSF 1.0 PRD2, 10.3.2
                </documentation>
            </property>
            <property name="formScope">
                <default>request</default>
                <documentation>
                    The scope to given the forms.  This value can be overriddem by a tagged value.
                </documentation>
            </property>
            <property name="controllerScope">
                <default>request</default>
                <documentation>
                    The scope to given the controllers.
                </documentation>
            </property>
            <property name="navigationBeanScope">
                <default>request</default>
                <documentation>
                    The scope to given the navigation items.
                </documentation>
            </property>
            <property name="facesServletExtension">
                <default>jsf</default>
                <documentation>
                    The extension used for the application's handling of JSF pages.
                </documentation>
            </property>
            <property name="fileUploadMaxMemoryPerRequest">
                <default>512000</default>
                <documentation>
                    Maximum memory per request (in bytes) for file uploads.
                </documentation>
            </property>
            <property name="fileUploadMaxDiskSpacePerRequest">
                <default>10240000</default>
                <documentation>
                    Maximum memory per request (in bytes) for file uploads.
                </documentation>
            </property>
            <property name="navigationUsesRedirect">
                <default>true</default>
                <documentation>
                    Uses 'redirect' instead of 'forward' to navigate between views.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Other">
            <property name="generateRefFiles" required="false">
                <default>true</default>
                <documentation>
                    Generates File.ref files if overwrite=false for a template output. Ref files contain
                    what would have been generated to the original file if overwrite=true or if the file did
                    not already exist. Can be used to replace or merge with the exiting file.
                </documentation>
            </property>
            <property name="overwriteAll" required="false">
                <default>false</default>
                <documentation>
                    Overwrite all files when generating output. Default=false. Use for project testing where
                    all output will overwritten.
                </documentation>
            </property>
            <property name="virtualHost" required="false">
                <documentation>
                    The name to use for the virtual host (if one is required).  For example application.myserver.com.
                </documentation>
            </property>
            <property name="useCaseForwardsClassName">
                <default>UseCaseForwards</default>
                <documentation>
                    The name of the class containing all use case forwards.
                </documentation>
            </property>
            <property name="sessionTimeout">
                <default>45</default>
                <documentation>
                    The number of minutes the session may be idle before timeout occurs.
                </documentation>
            </property>
            <property name="distributable">
                <default>false</default>
                <documentation>
                    Whether or not the web application should be considered <em>distributable</em>;
                    this means that the session will be persisted and restored.
                </documentation>
            </property>
            <property name="stateSavingMethod">
                <default>client</default>
                <documentation>
                    The JSF state saving method to use within the application (can be
                    either <em>client</em> or <em>server</em>).
                </documentation>
            </property>
            <property name="fileTypeName">
                <default>org.primefaces.model.UploadedFile</default>
                <documentation>
                    The fully qualified type name to use when file types are modeled for parameters (used for
                    for file uploads).
                </documentation>
            </property>
            <property name="dummyData">
                <default>true</default>
                <documentation>
                    Indicates whether or not dummy data should be rendered (in places like controllers).
                </documentation>
            </property>
            <property name="backingListPattern">
                <default>{0}BackingList</default>
                <documentation>
                    The pattern used for constructing a parameter's backing list name.  A backing list
                    is used when you want to select the value of the parameter from a list (typically
                    used for drop-down select input types).
                </documentation>
            </property>
            <property name="backingValuePattern">
                <default>{0}BackingValue</default>
                <documentation>
                    The pattern used for constructing a parameter's backing value name.  A backing value
                    is used with an input table type (when you want to submit values from a table of
                    complex objects).
                </documentation>
            </property>
            <property name="labelListPattern">
                <default>{0}LabelList</default>
                <documentation>
                    The pattern used for constructing the label list name (stores the list
                    of possible parameter value labels).
                </documentation>
            </property>
            <property name="valueListPattern">
                <default>{0}ValueList</default>
                <documentation>
                    The pattern used for constructing the values list name (stores the list of
                    possible parameter values when selecting from a list).
                </documentation>
            </property>
            <property name="converterPattern">
                <default>{0}JsfConverter</default>
                <documentation>
                    The pattern used for constructing converters (like the enumeration converter), where
                    <em>{0}</em> is the name of the model element.
                </documentation>
            </property>
            <property name="managedBeansPackage">
                <default>org.andromda.presentation.jsf</default>
                <documentation>
                    Defines the the package in which any extra managed-beans will
                    be generated (such as the layout options class, etc).
                </documentation>
            </property>
            <property name="testPackage">
                <default>org.andromda.presentation.jsf.test</default>
                <documentation>
                    Defines the the package in which any extra test classes will
                    be generated.
                </documentation>
            </property>
<!--             <property name="jsfComponentsPackage"> -->
<!--                 <default>org.andromda.presentation.jsf.components</default> -->
<!--                 <documentation> -->
<!--                     Defines the the package to which any JSF components generated by -->
<!--                     the cartridge reside. -->
<!--                 </documentation> -->
<!--             </property> -->
            <property name="xmlEncoding">
                <default>UTF-8</default>
                <documentation>
                    Encoding for generated XML files.
                </documentation>
            </property>
            <property name="formPattern">
                <default>{0}Form</default>
                <documentation>
                    The pattern to use for constructing the form name, where
                    <em>{0}</em> is the name of the controller operation capitalized.
                </documentation>
            </property>
            <property name="formImplementationPattern">
                <default>{0}FormImpl</default>
                <documentation>
                    The pattern to use for constructing the form implementation name, where
                    <em>{0}</em> is the name of the controller operation capitalized.
                </documentation>
            </property>
            <property name="formMessagesProperty">
                <default>jsfMessages</default>
                <documentation>
                    Defines the name of the property on a form that stores messages.
                </documentation>
            </property>
            <property name="formBeanPattern">
                <default>{0}{1}Form</default>
                <documentation>
                    The pattern for constructing the name of the bean under which the form is stored,
                    where <em>{0}</em> is the name of the use case and <em>{1}</em> is the name of the trigger.
                </documentation>
            </property>
            <property name="controllerImplementationPattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern for constructing the name of the controller implementation class name (where <em>{0}</em>
                    represents the modeled name of the controller).
                </documentation>
            </property>
            <property name="actionFormKey">
                <default>form</default>
                <documentation>
                    The name of the key under which each action for is stored.  This
                    form is passed along from action to action in order to transfer
                    all parameters.
                </documentation>
            </property>
            <property name="messageResources">
                <default>message-resources</default>
                <documentation>
                    The path of the localized message resources (the <em>.properties</em>
                    suffix is appended to this value when creating the actual file.).
                </documentation>
            </property>
            <property name="jspIncludes">
                <default>includes.jspf</default>
                <documentation>
                    Defines the name of the default includes file (this contains any
                    message resources as well as tag libs.
                </documentation>
            </property>
            <property name="servicePackageNamePattern">
                <default>{0}</default>
                <documentation>
                    The name of the package in which to create the service files, <code>{0}</code>
                    can be used to denote the package in which the service has been modeled.
                </documentation>
            </property>
            <property name="serviceAccessorPattern" required="false">
                <documentation>
                    The pattern to use when calling the backend code for <![CDATA[<<Service>>]]> lookups.
                    For calling services you would use following patterns:
                    <ul>
                        <li><strong>Spring</strong>: <code>${application.package}.ServiceLocator.instance().get{1}()</code></li>
                        <li><strong>EJB</strong>: <code>${myPackage}.{1}Util.getHome().create()</code></li>
                    </ul>
                </documentation>
            </property>
            <property name="exceptionHandlerPattern">
                <default>(.*)(\\{\\s*([\\w|\\.+]*)\\s*\\})(.*)</default>
                <documentation>
                    Used to define the pattern used for retrieving message resource keys
                    from exceptions.  This is useful when exceptions are thrown from the business
                    tier and you want to map these to messages in your presentation.
                    Normally you won't need to change this pattern, however you may want to
                    if you want to enable it to handle exceptions you may have no control over
                    (i.e. SQLExceptions).  Currently the default pattern supports an exception with
                    an embedded <em>{some.resource.key}</em> type key.
                </documentation>
            </property>
        </propertyGroup>
    </properties>
</namespace>
