<?xml version="1.0" encoding="UTF-8" ?>

<profile>
    <documentation>
        <p>
            Most of the model elements will require a stereotype to be processed correctly, below you will find
            a table indicating on which model element you may put what stereotype, it will also
            denote which effect this has on the generation process.
        </p>
        <p>
            Sometimes it happens you want to add information to the model but there is no clean way of doing it.
            In those cases you may want to resort to tagged values, but these cases should be considered with
            caution. A tagged value is something extra, something optional, and the application should
            run fine without them.
        </p>
        <p>
            The Angular cartridge allows you to add tagged values here and there but provides a default value
            in case they are missing.
        </p>
    </documentation>
    <elements>
        <elementGroup name="Stereotypes">
            <element name="ANGULAR_MODEL">
                <documentation>
                    Modeled on an Entity or ValueObject
                </documentation>
                <value>AngularModel</value>
                <appliedOnElement>class</appliedOnElement>
            </element>
            <!--element name="MANAGEABLE_ATTRIBUTE">
                <documentation>
                    Modeled on a property.
                </documentation>
                <value>ManageableAttribute</value>
                <appliedOnElement>Attribute of Manageable class</appliedOnElement>
            </element>
            <element name="FRONT_END_EXCEPTION">
                <documentation>
                    Modeled on a transition it designates an exception occuring while processing an action,
                    must exit an action state and enter a <![CDATA[<<FrontEndView>>]]>.
                </documentation>
                <value>FrontEndException</value>
                <appliedOnElement>Transition</appliedOnElement>
            </element>
            <element name="FRONT_END_REGISTRATION">
                <documentation>
                    Modeled on a use case, this stereotype indicates that this use case
                    is a front-end registration wizard.  This will cause a link on the login
                    taking the user to this use case.
                </documentation>
                <value>FrontEndRegistration</value>
                <appliedOnElement>UseCase</appliedOnElement>
            </element>
            <element name="FRONT_END_NAVIGATION">
                <documentation>
                    Modeled on a use case, this stereotype indicates that this use case
                    is a front-end navigation element.  This will cause this use-case to
                    be included in the menu-model for the application.
                </documentation>
                <value>FrontEndNavigation</value>
                <appliedOnElement>UseCase</appliedOnElement>
            </element>
            <element name="FRONT_END_SESSION_OBJECT">
                <documentation>
                    These classes can be associated to controllers. They represent objects that persist
                    during the session of the user. For each such session object associated with a controller
                    the controller will have accessor methods for this object. <i>Use a dependency from the controller
                    to the session object to properly model this relationship, a controller can depend on many
                    such session objects; and in the same way a session object might be shared between controllers.</i>
                </documentation>
                <value>FrontEndSessionObject</value>
                <appliedOnElement>Class</appliedOnElement>
            </element!-->
        </elementGroup>
        <elementGroup name="Tagged Values">
            <documentation>
                Angular allows you to add tagged values here and there but provides a
                default value in the event that they are missing.
            </documentation>
            <element name="METHOD_TYPE">
                <documentation>
                    Added to manageable classes that needs the Impl class to change the
                    default behavior.
                </documentation>
                <value>andromda_angular_method_type</value>
                <allowedValues>
                    <value>POST</value>
                    <value>GET</value>   
                    <value>DELETE</value>    
                </allowedValues>
                <appliedOnElement></appliedOnElement>
            </element>
        </elementGroup>
        <!--elementGroup name="Data Types">
            <element name="CHARACTER_TYPE">
                <documentation>
                </documentation>
                <value>datatype::char</value>
            </element>
            <element name="BYTE_TYPE">
                <documentation>
                </documentation>
                <value>datatype::byte</value>
            </element>
            <element name="SHORT_TYPE">
                <documentation>
                </documentation>
                <value>datatype::short</value>
            </element>
            <element name="INTEGER_TYPE">
                <documentation>
                </documentation>
                <value>datatype::int</value>
            </element>
            <element name="LONG_TYPE">
                <documentation>
                </documentation>
                <value>datatype::long</value>
            </element>
            <element name="FLOAT_TYPE">
                <documentation>
                </documentation>
                <value>datatype::float</value>
            </element>
            <element name="DOUBLE_TYPE">
                <documentation>
                </documentation>
                <value>datatype::double</value>
            </element>
            <element name="URL_TYPE">
                <documentation>
                </documentation>
                <value>datatype::URL</value>
            </element>
            <element name="TIME_TYPE">
                <documentation>
                </documentation>
                <value>datatype::Time</value>
            </element>
        </elementGroup-->
    </elements>
</profile>
