#set ($menuItems = "")
##
## A macro that renders the appropriate menu item
##
## parameters:
##     o  $pUseCase - the useCase to render
##     o  $ident - spaces to ident
##
#macro(renderMenuItem $pUseCase $ident)
#set ($roles = $useCase.actionRoles)
#addDefaultRole($roles)
#foreach ($view in $pUseCase.views)
#if ($stringUtils.isNotBlank($menuItems))
#set ($menuItems = "$menuItems,
")
#end
#set ( $className = "$stringUtils.replaceChars($stringUtils.capitalize(${view.name}), '\\ ', '')View")
#set ($routeName = $stringUtils.deleteWhitespace($stringUtils.lowerCase($view.name)))
#set ($menuItems = "$menuItems { route: '$routeName', component: $className }")
#end
#if (!$children.empty)
#foreach ($child in $children)
#renderMenuItem ($child "$ident    ")    
#end    
#end    
#end
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
#foreach ($useCase in $useCases)
#renderImports($useCase)
#end

const routes: Routes = [
#foreach ($useCase in $useCases)
#renderMenuItem($useCase "            ")    
#end
$menuItems
];

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forRoot(routes)
  ],
  exports: [
    RouterModule
  ]
})
export class $stringUtils.capitalize(${applicationId})RoutingModule { }
