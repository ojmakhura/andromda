// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\view.populator.ts.vsl) DO NOT EDIT!
#set ($className = "${useCase.actionClassName}ViewPopulator")
#if ($stringUtils.isNotEmpty($useCase.packageName))
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${useCase.packageName}), '\\.', '\\/') )
#end
#set ( $fileName = $angularHelper.getComponentFileName("${useCase.actionClassName}"))
#set($commonFields = [])##holds the matching fields in fromForm -> toForm, this block should go to java code
#set($forms = [])##holds the matching fields in fromForm -> toForm, this block should go to java code
#foreach ($view in $useCase.views)
#foreach ($viewAction in $view.formActions)
#foreach ($action in $useCase.actions)
#if(!$action.formFields.empty && !$action.equals($view.formActions))
#foreach ($field in $action.formFields)
#foreach ($testField in $viewAction.formFields) 
#if($testField.name == $field.name && $testField.type.equals($field.type))##check if the field exists in both forms
#set($dummy = $commonFields.add($field))    
#end
#end
#end
#if(!$commonFields.empty)
#set ( $dummy = $forms.add($action) )
#set ( $dummy = $forms.add($viewAction) )
#end
#end
#end
#end
#end
##foreach ( $form in $angularHelper.getFacadeSet($forms) )
##set ( $formPath = $stringUtils.replaceChars($form.packageName, '\\.', '\\/') )
##set ( $formFile =  ${angularHelper.getComponentFileName("${form.formImplementationName}")})
##import { $form.getFormImplementationName() } from 'src/app/gen/form/$formPath/${formFile}';
##end
#foreach ( $action in $useCase.actions )
#if(!$action.formFields.empty && !$action.equals($view.formActions))
#set ( $formPath = $stringUtils.replaceChars($action.packageName, '\\.', '\\/') )
#set ( $formFile =  ${angularHelper.getComponentFileName("${action.formImplementationName}")})
import { $action.getFormImplementationName() } from 'src/app/gen/form/$formPath/${formFile}';
#end
#end

##WIM *** move combinations to java code
## holds the fromFrom -> toForm matches, where exists at least one equal field (name+type)
## actually it should only combine forms having a linking forward
#set($formCombinations = [])

/**
 * Provides the ability to populate any view in the ${useCase.name}
 */
export class $className
{
#foreach ($view in $useCase.views)
#foreach ($viewAction in $view.formActions)
#foreach ($action in $useCase.actions)
#if(!$action.formFields.empty && !$action.equals($view.formActions))
#set($commonFields = [])##holds the matching fields in fromForm -> toForm, this block should go to java code
#foreach ($field in $action.formFields)
#foreach ($testField in $viewAction.formFields) 
#if($testField.name == $field.name && $testField.type.equals($field.type))##check if the field exists in both forms
#set($dummy = $commonFields.add($field))    
#end
#end
#end
#if(!$commonFields.empty)
#set($dummy=$formCombinations.add("${action.getFormImplementationName()}-${viewAction.getFormImplementationName()}"))
#set ($t1 = $stringUtils.substringBefore(${action.getFormImplementationName()}, "Impl"))
#set ($t2 = $stringUtils.substringBefore(${viewAction.getFormImplementationName()}, "Impl"))
    /**
     * Map fields from $action.getFormImplementationName() form
     * to $viewAction.getFormImplementationName() form
     *
     * @param fromForm origin form
     * @param toForm destiny form
     */
    static populate$angularHelper.getComponentName("${t2}-with-${t1}", "-")(fromForm: $action.getFormImplementationName(), toForm: $viewAction.getFormImplementationName()): void
    {
#foreach($field in $commonFields)
        if(fromForm.${field.formAttributeSetProperty})
        {
            toForm.${field.setterName}(fromForm.${field.getterName}());
        }
#if ($field.selectable || $field.type.enumeration)##This test should go to a needsBackingList method
#set ($backingListMethod = $stringUtils.capitalize($field.backingListName))
        if(fromForm.get${backingListMethod}() != null)
        {
            toForm.set${backingListMethod}(fromForm.get${backingListMethod}());
        }
#end
#end
    }

#end
#end
#end
#end
##page variable populators
#if(!$view.variables.empty)
#set($showElse = false)
    /**
     * Populate page variables for view $view.name
     *
     * @param fromForm origin form
     * @param pageVariables the page variables
     */
    static populate$stringUtilsHelper.upperCamelCaseName($view.name)PageVariables(fromForm: any, pageVariables: any): void
    {
#foreach ($action in $useCase.actions)
#set($commonFields = [])##holds the matching fields/variables, this block should go to java code
#foreach ($testVariable in $view.variables) 
#foreach ($field in $action.formFields)
#if($testVariable.name == $field.name && $testVariable.type.equals($field.type))##check if the field exists in form and variables
#set($dummy = $commonFields.add($field))    
#end
#end
#end
#if(!$commonFields.empty)
       #if($showElse) else#end if(fromForm instanceof $action.getFormImplementationName())
        {
            const sourceForm: $action.getFormImplementationName() = fromForm;
#foreach($field in $commonFields)
            if(sourceForm.is$stringUtils.capitalize($field.formAttributeSetProperty)())
            {
                pageVariables['${field.name}'] = sourceForm.get$stringUtils.capitalize(${field.name})();
            }
#end
#set($showElse = true)
        }
#end
#end
    }

#end
#foreach ($viewAction in $view.formActions)
    /**
     * Populates the view using the appropriate view populator.
     *
     * @param fromForm the origin form
     * @param toForm the destiny form
     */
    static populate${viewAction.getFormImplementationName()}(fromForm: any, toForm: $viewAction.getFormImplementationName()): void
    {
## WIM: it looks to the values should be kept during all the form life (useCaseScope) 
##     toForm.resetIsSetFlags();
#set($showElse = false)
#foreach ($action in $useCase.actions)
#if($formCombinations.contains("${action.getFormImplementationName()}-${viewAction.getFormImplementationName()}") )
#set ($t1 = $stringUtils.substringBefore(${action.getFormImplementationName()}, "Impl"))
#set ($t2 = $stringUtils.substringBefore(${viewAction.getFormImplementationName()}, "Impl"))
       #if($showElse) else#end if (fromForm instanceof $action.getFormImplementationName())
        {
            ${className}.
                populate$angularHelper.getComponentName("${t2}-with-${t1}", "-")
                    (fromForm, toForm);
        }
#set($showElse = true)
#end
#end
    }
    
#end
#end    
}
