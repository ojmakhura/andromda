// Generated by andromda-angular cartridge (app\usecase\selector.store.ts.vsl) DO NOT EDIT
#set ($useCase = $controller.useCase)
#set ($fileName = "${metafacadeWebUtils.toWebResourceName($useCase.storeName)}.selectors")
#set ($path = "$useCase.pathRoot")
import { createFeatureSelector, createSelector } from '@ngrx/store';
import { ${stringUtils.uncapitalize(${useCase.storeName})}Key, ${useCase.storeName}State } from './${metafacadeWebUtils.toWebResourceName($useCase.storeName)}.state';
#set($stateParams = [])
#foreach($view in $useCase.views)
#foreach($variable in $view.variables)
#if($variable.inputType != "button" && !$param.component)
#set ( $rt = $stateParams.add($variable) )
#end
#end
#foreach($action in $view.actions)
#foreach($field in $action.formFields)
#if($field.inputType != "button" && !$param.component)
#set ( $rt = $stateParams.add($field) )
#end
#end
#foreach($param in $action.parameters)
#if($param.inputType != "button" && !$param.component)
#set ( $rt = $stateParams.add($param) )
#end
#end
#end
#end
#set ( $finalParams = $angularUtils.getFacadeSet($stateParams) )

export const select${useCase.storeName}State = createFeatureSelector<${useCase.storeName}State> (
    ${stringUtils.uncapitalize(${useCase.storeName})}Key
);

#foreach($param in $finalParams)
#if(!$param.component)
export const select${stringUtils.capitalize(${param.name})} = createSelector(
    select${useCase.storeName}State,
    (state: ${useCase.storeName}State) => state.${param.name}
);

#end
#end
export const selectMessages = createSelector(
    select${useCase.storeName}State,
    (state: ${useCase.storeName}State) => state.messages
);

export const selectSuccess = createSelector(
    select${useCase.storeName}State,
    (state: ${useCase.storeName}State) => state.success
);

export const selectLoading = createSelector(
    select${useCase.storeName}State,
    (state: ${useCase.storeName}State) => state.loading
);

export const selectError = createSelector(
    select${useCase.storeName}State,
    (state: ${useCase.storeName}State) => state.error
);
