// license-header java merge-point
// Generated by andromda-angular cartridge (controller\controller.ts.vsl) DO NOT EDIT!
import { Injector } from '@angular/core';
import { ControllerBase } from '@app/controller/utils/controller.base';

#foreach($import in $controller.imports)
#if(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end 
#end

export abstract class $controller.name extends ControllerBase {
#if(!$controller.attributes.empty)

#foreach($attribute in $controller.attributes)
    $attribute.name: $attribute.angularTypeName;
#end

#end
#foreach ($service in $controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
    protected _injector: Injector;

    constructor(injector: Injector) {
        super(injector);
#foreach ($service in $controller.allRestControllers)  
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
        this._injector = injector;
    }
    
#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     *
     * @param form the associated form
     * $operation.formFields
     */
    $operation.formSignature
#end

#foreach ($action in $controller.useCase.actions)
#set ($formPopulationOperationRequired = !$action.formFields.empty)
    /**
#if($action.exitingInitialState)
     * This method is called when the use case '${controller.useCase.name}' starts.
#else
$action.trigger.getDocumentation("     * ")
     * This method is called when '${action.trigger.name}' is triggered in the view '${action.source.name}'.
#end
     * It can be safely overridden in descendant classes.
#if($formPopulationOperationRequired)
     *
     * @param form the associated form
#end
     */
    protected ${action.triggerMethodName}(form: any): void
    {
        //this method can be overridden
    }

    /**
#if($action.exitingInitialState)     
     * Retrieves the internal start use case
#else
     * Retrieves ${action.triggerName}()
#end
     *    
     * @return ${action.triggerName}
     * @throws Throwable
     */
#if($action.exitingInitialState)     
    protected internalStartUseCase(pageVariables: any): string
#else
    public ${action.triggerName}(form: any)
#end
    {

        this.setLastPostedFormClientId('${action.variableName}');
        
        let forward: string = null;
#if ($action.finalStateTarget)
#set($targetController = $action.target.targetControllerFullyQualifiedName)
#set($targetControllerBeanName = $action.target.targetControllerBeanName)
#if(${targetControllerBeanName} == $controller.beanName)
        forward =#if($targetController) this.startUseCase()#else this.closeDialog()#end; 
#else
        forward =#if($targetController) this.${targetControllerBeanName}.startUseCase()#else this.closeDialog()#end;
#end
#else
        
        //trigger method execution
#if($action.exitingInitialState)  
        this.${action.triggerMethodName}(pageVariables);
#else
        this.${action.triggerMethodName}(form);
#end

#if(!$action.exitingInitialState) 
        this.pageVariables = form;
#end
#processTransition($action)
#saveMessages($action "        ")
#if ($formPopulationOperationRequired)
        
#if(!$action.exitingInitialState && !$action.enteringFinalState)
        if(forward !== null)
        {
            if('${action.source.routerPath}' === forward)
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
#end
#end
#end
#if($action.exitingInitialState)     
        return forward;
#else
        if(forward !== null) {
            this.router.navigate(['/' + forward]);
        } 
#end
    }

#foreach ($actionState in $action.actionStates)
    /**
$actionState.getDocumentation("     * ")
     *
#if (!$action.formFields.empty)
     * @param form the associated form
#end
     * @return the forward view
     * @throws Throwable
     */
    protected ${actionState.actionMethodName}#if (!$action.formFields.empty)${action.formImplementationName}#end(form: any): string
    {
        let forward: string = null;
#if ($actionState.controllerCalls.empty && $actionState.serviceCalls.empty)
## TODO UMLMETA-106 uml22 StateVertex outgoing FinalState target returns null/unknown for Exception transition.
##        // actionState=$actionState controllerCalls=$actionState.controllerCalls.size()
##foreach ($outgoing in $actionState.outgoings)
##        // outgoing=$outgoing target=$outgoing.target
##end
##        // forward=$actionState.forward name=$actionState.name
#processTransition($actionState.forward);
#saveMessages($actionState.forward "        ")
#else
#set($exceptions = $actionState.exceptions)
#if($exceptions.empty)
#set($ident="")
#else
#set($ident="    ")
        try
        {
#end
#foreach ($serviceCall in $actionState.serviceCalls)
##TODO add validation service params -> action params/form fields
${ident}        this.get${serviceCall.owner.name}().${serviceCall.name}(#foreach($args in $serviceCall.arguments)form.${args.getterName}()#end);
#end
#foreach ($controllerCall in $actionState.controllerCalls)
#if (!$action.actionFormFields.empty)
${ident}        this.$controllerCall.formCall
#else
${ident}        // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
${ident}        // cartridge would have issued a model validation error
${ident}        this.${controllerCall.name}(new ${controllerCall.interfaceName}())
#end
#end
${ident}#processTransition($actionState.forward)
#saveMessages($actionState.forward "${ident}        ")
#if(!$exceptions.empty)
        }
        catch(Throwable t)
        {
#* *##if($exceptions.size() == 1 && $stringUtils.isBlank($exceptions.iterator().next().exceptionType))
#set ($pt = ${actionState.exceptions.iterator().next().target.name})
            forward = "$angularUtils.getComponentFileName($pt)";
#* *##else
            forward = null;
#*  *##set($exceptionCount=0)
#*  *##foreach($exception in $exceptions)
#*   *##if($stringUtils.isNotBlank($exception.exceptionType))
            if(#if($exceptionCount > 0)forward === null && #end t instanceof ${exception.exceptionType})
            {
#set ($pt = ${exception.target.name})
                forward = "$angularUtils.getComponentFileName($pt)";
            }
#*    *##set($exceptionCount=$exceptionCount+1)
#*   *##end
#*   *##foreach($exception in $exceptions)
#*    *##if($stringUtils.isBlank($exception.exceptionType))
            if(forward === null)
            {
#set ($pt = ${exception.target.name})
                forward = "$angularUtils.getComponentFileName($pt)";
            }
#*    *##end
#*   *##end
#*  *##end

            if(forward === null)
            {
                //no match, throw the exception
                throw t;
            }
#* *##end
        }
#end
#end
        return forward;
    }

#end
#foreach ($decisionTransition in $action.decisionTransitions)
    /**
$decisionTransition.getDocumentation("     * ")
     *
     * @return a transition
     */
    protected __${decisionTransition.operationCall.name}(): string
    {
        const value: string = '$decisionTransition.operationCall.formCall';
        forward: string = null;
#set($outgoings = $decisionTransition.target.outgoings)
#foreach ($outcome in $outgoings)
#set ($defaultOutcome = $outcome)
        if (value === "$outcome.guard.name")
        {
            #processTransition($outcome)
#saveMessages($outcome "            ")
        }
#end
        if (forward === null)
        {
            // throw exception in case we have an invalid return value from the controller
            //throw new RuntimeException("Runtime model error: no valid path selected. Selected path="+value);
        }
        else
        {
            return forward;
        }
    }

#end
#end
#foreach($cnt in $controller.otherControllers)

    get ${cnt.variableName}(): ${cnt.implementationName} {
        
        return this._injector.get(${cnt.implementationName});
    }
#end 

}
