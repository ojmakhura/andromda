// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
#set ($useCase = $controller.useCase)
#set ($fileName = "${metafacadeWebUtils.toWebResourceName($useCase.storeName)}.effects")
#set ($path = "$useCase.pathRoot")
#set ($dollar = "$")
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
#set ($web = "${metafacadeWebUtils.toWebResourceName($useCase.storeName)}")
#set ($prefix = $web.replace('-', '_').toUpperCase())
#set ($actionType = "${useCase.storeName}ActionType")
#set ($resetActionType = "${prefix}_RESET")
#set ($failureActionType = "${prefix}_FAILURE")
#set ($resetAction = "${stringUtils.uncapitalize(${useCase.storeName})}Reset")
#set ($failureAction = "${stringUtils.uncapitalize(${useCase.storeName})}Failure")
import * as ${useCase.storeName}Actions from './${metafacadeWebUtils.toWebResourceName($useCase.storeName)}.actions';
#foreach ( $service in $controller.allRestControllers )
import { ${service.implementationName} } from ${escTool.s}@app/${service.implementationFilePath}${escTool.s};
#end

@Injectable()
export class ${useCase.storeName}Effects {

    constructor(private actions$dollar: Actions#foreach ($service in $controller.allRestControllers), private $stringUtils.uncapitalize(${service.name}): ${service.implementationName}#end) {}

#foreach ( $service in $controller.allRestControllers )
#set ($serviceName = "$stringUtils.uncapitalize(${service.name})")
#foreach($operation in $service.operations)
#set ($actionName = "${useCase.storeName}Actions")
    ${operation.name}$dollar = createEffect(() => 
         this.actions${dollar}.pipe(
            ofType(${actionName}.${operation.name}),
#set ($args = "")
#set ($callArgs = "")
#set ($count = 0)
#if (!$operation.arguments.empty)
#foreach($argument in $operation.arguments)
#set ($args = "$args#if($count > 0), #end$argument.name")
#set ($callArgs = "$callArgs#if($count > 0), #end$argument.name")
#set ($count = $count + 1)
#end
#if($operation.arguments.size() >= 1)
#set ($args = "$args")
#end
#end
            mergeMap(($args) => this.${serviceName}.${operation.name}($callArgs).pipe(
#if ($operation.returnTypePresent)
                map( results => ${actionName}.${operation.name}Success({results, messages: [`Action successful.`], success: true})),
#end
                catchError((error) => [${actionName}.$failureAction({messages: [error])])
            ))
        )
    );

#end
#end
}
