// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  inject,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
#if($component.treePresent)
import { CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeModule, MatTreeNestedDataSource } from '@angular/material/tree';
import { TreeOption } from '@app/model/tree-option.model';
import { AsTreeNodePipe } from '@app/pipe/tree-node.pipe';
import { DynamicTreeNode } from '@app/model/dynamic-tree-node.model';
#end
#if($component.tableVariablesPresent)
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
#end
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
##if($targetModal)
import { MatDialog } from '@angular/material/dialog';
##end
import { firstValueFrom, Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
#set($fields = [])
#set($buttons = [])
#foreach($import in $component.imports)
#if($metafacadeWebUtils.isComponent($import))
import { ${import.name} } from '@app/components/${import.filePath}';
#else
#if($import.attributes && $import.attributes.size() > 0 && !$import.enumeration)
#if($import.type)
#set ( $rt = $fields.add($import.type) )
#else
#set ( $rt = $fields.add($import) )
#end
#end
#if ($import.restCount>0 && $stringUtils.isNotBlank($import.restPath))
import { $import.name } from '@app/${import.filePath}';
#elseif(${import.hasStereotype("FrontEndComponent")})
import { $import.implementationName } from '@app/components/${import.implementationFilePath}';
#elseif($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.implementationComponentName)
import { $import.implementationComponentName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
#end
import { SearchObject } from '@app/model/search-object';
import { $component.name } from './${component.fileName}';

@Component({
  selector: "app-${component.selectorName}",
  templateUrl: "./${component.selectorName}.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    SharedModule,
    MaterialModule,
    CsvModule,
#foreach($import in $component.imports)
#if($metafacadeWebUtils.isComponent($import))
    $import.implementationName,
#end
#end
  ]
})
export class ${component.implementationName} extends ${component.name} {

    constructor() {
        super();
    }

}