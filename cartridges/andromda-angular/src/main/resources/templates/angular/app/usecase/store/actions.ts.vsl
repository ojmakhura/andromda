// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
#set ($useCase = $controller.useCase)
#set ($fileName = "${metafacadeWebUtils.toWebResourceName($useCase.storeName)}.actions")
#set ($path = "$useCase.pathRoot")
import { createAction, props } from '@ngrx/store';
#set ($web = "${metafacadeWebUtils.toWebResourceName($useCase.storeName)}")
#set ($prefix = $web.replace('-', '_').toUpperCase())
#set ($actionType = "${useCase.storeName}ActionType")
#set ($resetActionType = "${prefix}_RESET")
#set ($failureActionType = "${prefix}_FAILURE")
#set ($resetAction = "${stringUtils.uncapitalize(${useCase.storeName})}Reset")
#set ($failureAction = "${stringUtils.uncapitalize(${useCase.storeName})}Failure")
#foreach ($service in $controller.allRestControllers)
#foreach ($import in $service.imports)
#if(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
#end

export enum ${actionType} {
#foreach ($service in $controller.allRestControllers)
#foreach($operation in $service.operations)
#set ($web = "${metafacadeWebUtils.toWebResourceName($operation.name)}")
#set ($actionName = $web.replace('-', '_').toUpperCase())
#set ($actionPhrase = "$stringUtils.toPhrase($operation.name)")
    ${actionName} = '[${useCase.storeName}] $actionPhrase',
    ${actionName}_SUCCESS = '[${useCase.storeName}] $actionPhrase Success',
#end
#end
    $resetActionType = '[${useCase.storeName}] ${useCase.storeName} Reset',
    $failureActionType = '[${useCase.storeName}] ${useCase.storeName} Action Failure'
}

#foreach ($service in $controller.allRestControllers)
#foreach($operation in $service.operations)
#set ($web = "${metafacadeWebUtils.toWebResourceName($operation.name)}")
#set ($actionName = $web.replace('-', '_').toUpperCase())
export const ${operation.name} = createAction(
    ${actionType}.${actionName}#if (!$operation.arguments.empty),
    props<{ $angularUtils.getMethodSignatureArguments(${operation.getArguments()}) }>()
#end);

export const ${operation.name}Success = createAction(
    ${actionType}.${actionName}_SUCCESS#if ($operation.returnTypePresent),
//    props<{ results: $operation.returnTypeName }>()
#end);

#end
#end

export const $resetAction = createAction(${actionType}.$resetActionType);

export const $failureAction = createAction(
    ${actionType}.$failureActionType,
    props<{ error: any }>()
);
