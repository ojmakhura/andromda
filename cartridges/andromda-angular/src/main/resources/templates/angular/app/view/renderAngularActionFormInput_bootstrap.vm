
#macro(renderTableColumnNamesBootstrap $parameter $ident)
${ident}<thead>
${ident}   <tr>
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
${ident}        <th translate >$stringUtils.toResourceMessageKey(${column})</th>
#end
#else
#foreach ($column in $parameter.type.attributes)
${ident}        <th translate>$stringUtils.toResourceMessageKey(${column.name})</th>
#end
#end
${ident}    </tr>
${ident}</thead>
#end
##==========================
#macro(renderTableColumnsBootstrap $parameter $ident)
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
#if(!$column.hidden && !$column.inputFile)
#set ($value = "row.${column}")
${ident}    <td id="column_${column}">${value}</td>
#end
#end
#else
#foreach ($column in $parameter.type.attributes)
#if(!$column.hidden && !$column.inputFile)
#set($noOfColumns=$noOfColumns+1)   
#if($column.type.enumeration)
#set($theValue="row.${column.name}.getValue()")
#else
#set($theValue="row.${column.name}")
#end
${ident}    <td id="column_${column.name}">${theValue}#if ($column.type.dateType).toLocaleDateString()#end </td>
#end
#end
#end
#end
##==========================
##
## A macro that renders the appropriate action form input field
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderAngularActionInputBootstrap $parameter $ownerParameter $ident)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#else
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#end
#set ($backingListName = $parameter.backingListName)
#set ($backingValueName = $parameter.backingValueName)
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#set ($backingListName = ${parameter.getBackingListName($ownerParameter)})
#set ($backingValueName = ${parameter.getBackingValueName($ownerParameter)})
#end
#set ($formValuePropertyName = "${valuePropertyName}")
#if ($parameter.inputRadio)
${ident}<fieldset class="row mb-3">
${ident}    <legend class="col-form-label col-sm-2 pt-0" >$parameter.messageKey}</legend>
${ident}    <div class="mb-3">
#else
${ident}<label id="${propertyId}_label" class="col-sm-2 #if ($parameter.inputMultibox || $parameter.type.booleanType)form-check-label#{else}col-form-label#end" for="${propertyId}" translate>$parameter.messageKey</label>
${ident}<div class="mb-3">
#end
#if ($parameter.type.dateType || $parameter.inputDate)
${ident}    <input type="$parameter.inputType" id="$propertyId" class="form-control" formControlName="${parameter.name}" label="#{$parameter.messageKey}:"#if($parameter.required) required#end #if($parameter.readOnly) readonly#end navigator="true" pattern="$parameter.format" showOn="button"/>
#elseif ($parameter.inputCheckbox || $parameter.type.booleanType)
${ident}    <input type="checkbox" id="$propertyId" class="form-check-input" formControlName="${parameter.name}"#if($parameter.required) required#end onLabel="#{yes}" offLabel="#{messages['no']}" onIcon="ui-icon-check" offIcon="ui-icon-close"#if($parameter.readOnly) readonly#end/>
#elseif ($parameter.inputSelect || $parameter.type.enumeration)
#set ($multiSelect = $parameter.many || $parameter.type.collectionType || $parameter.type.arrayType)
#set ($selectBoxType = "selectOneMenu")
#if ($multiSelect)
#set ($selectBoxType = "selectManyMenu")
#end
${ident}<select #if ($multiSelect)multiple size="5"#end id="$propertyId" class="form-control" formControlName="${parameter.name}" label="#{$parameter.messageKey}:"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end>
#if ($parameter.type.enumeration)
${ident}    <option value=""></option>
${ident}    <option *ngFor="let key of ${parameter.name}Options" [value]="key">
${ident}        {{ ${parameter.name}T[key] }}
${ident}    </option>
#else
#if(!$parameter.required)
${ident}    <option value=""></option>
#end
${ident}    <option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</option>
#end
${ident}</select>
#elseif ($parameter.inputFile)
${ident}    <input type="file" id="$propertyId" class="form-control" formControlName="${parameter.name}" label="#{$parameter.messageKey}:"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
#elseif ($parameter.inputMultibox)
${ident}    <article formArrayName="${parameter.name}" id="${propertyId}Article">
${ident}        <mat-form-field class="form-group">
${ident}            <mat-label translate>select.value.text</mat-label>
${ident}            <mat-select name="${propertyId}Selector" id="${propertyId}Selector" (selectionChange)="on$stringUtils.capitalize(${propertyId})Change($event)">
${ident}                <mat-option *ngFor="let item of $backingListName" [value]="item.value">
${ident}                    {{ item.label }}
${ident}                </mat-option>
${ident}            </mat-select>
${ident}        </mat-form-field>
${ident}        <ul class="list-group" *ngFor="let control of ${propertyId}.controls; let i = index">
${ident}            <li class="list-group-item">
${ident}                <button type="button" class="btn btn-info" (click)="${propertyId}Delete(i)">
${ident}                    <i class="bi bi-trash"></i>
${ident}                </button>
${ident}                {{ get$stringUtils.capitalize(${propertyId})Label(control.value) }} 
${ident}            </li>
${ident}        </ul>
${ident}    </article>
## #elseif ($parameter.inputRadio)
## ${ident}    <div class="form-check" th:each="item : *{${backingListName}}">
## ${ident}        <label class="form-check-label" th:for="${item.value}" th:text="${item.label}"></label>
## ${ident}        <input type="radio" id="$propertyId" class="form-check-input" formControlName="*{${parameter.name}}" th:value="${item.value}"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
## ${ident}    </div>
#elseif($parameter.inputTable)
${ident}<div>
${ident}    <button type="button" id="${propertyId}" class="btn btn-lg btn-primary"
${ident}            data-bs-toggle="modal" data-bs-target="#${propertyId}Add">
${ident}        <i class="bi bi-plus"></i>
${ident}    </button>
${ident}</div>
${ident}<table id="searchResult" class="table table-bordered" style="width: 100%">
#renderTableColumnNamesBootstrap($parameter "${ident}    ")
${ident}    <tbody>
${ident}        <tr *ngFor="let row of ${table.name}$ | async">
#renderTableColumnsBootstrap($parameter "${ident}        ")
#if(!$parameter.tableFormActions.empty || !$parameter.tableHyperlinkActions.empty)
#foreach ($action in $parameter.tableFormActions)
#if (!$action.tableLinkColumnName)
${ident}                <td id="column_actions">
${ident}                    <div class="col">
#set ($data = "{")
#foreach ($parameter in $action.parameters)
#if ($parameter.tableColumnNames.contains($parameter.name) || $parameter.tableAttributeNames.contains($parameter.name))
#set ($parameterValue = "row.${parameter.name}")
#else
#set ($parameterValue = "$parameter.name")
#end
#set ($data = "$data '$parameter.name': $parameterValue,")
#end
#set ($data = "$data }")
#set ($urlParams = "")
#foreach ($parameter in $action.parameters)
#if ($parameter.tableColumnNames.contains($parameter.name) || $parameter.tableAttributeNames.contains($parameter.name))
#set ($parameterValue = "row.${parameter.name}")
#else
#set ($parameterValue = "$parameter.name")
#end
#if($urlParams.length() == 0)
#set ($urlParams = "?")
#else
#set ($urlParams = "$urlParams&")
#end
#set ($urlParams = "$urlParams$parameter.name=#{$parameterValue}")
#end
## ${ident}                    <form method="POST" 
## ${ident}                           th:action="@{${action.controller.restPath}/${action.restPath}$urlParams}">
## ${ident}                        <button type="submit" id="${action.triggerName}Action"  th:text="#{$action.trigger.messageKey}">
## ${ident}                        </button>
## ${ident}                    </form>
${ident}                <div class="col">
${ident}            </td>
#end
#end
#end
${ident}        </tr>
${ident}    </tbody>
${ident}</table>
#else
${ident}    <input type="$parameter.inputType" id="$propertyId" class="form-#if($parameter.inputRange)range#{else}control#end" name="$parameter.name" formControlName="${parameter.name}"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
#end
#if ($parameter.inputRadio)
${ident}    </div>
${ident}</fieldset>
#else
${ident}</div>
#end
#end
##==========================
##
## A macro that renders the appropriate table for the input
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderTableInputBootstrap $parameter $ownerParameter $ident)
$ident<table>
$ident  <thead>
$ident      <tr>
$ident          <th translate>select</th>
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
$ident          <th translate>$stringUtils.toResourceMessageKey(${column})</th>
#end
#else
#foreach ($column in $parameter.type.attributes)
$ident          <th translate>$stringUtils.toResourceMessageKey(${column.name})</th>
#end
#end
$ident      </tr>
$ident  </thead>
$ident  <tbody>
$ident      <tr *ngFor="let row of ${parameter.name}$ | async">
$ident          <td id="column_select">
#if($parameter.many)
$ident              <div class="form-check">
$ident                <input class="form-check-input" type="checkbox">
$ident              </div>
#else
$ident              <div class="form-check">
$ident                <input class="form-check-input" type="radio">
$ident              </div>
#end
$ident          </td>
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
#if(!$column.hidden && !$column.inputFile)
#set ($value = "row.${column}")
$ident          <td id="column_${column}" translate>${value}</td>
#end
#end
#else
#foreach ($column in $parameter.type.attributes)
#if(!$column.hidden && !$column.inputFile)
#set($noOfColumns=$noOfColumns+1)   
#if($column.type.enumeration)
#set($theValue="row.${column.name}.getValue()")
#else
#set($theValue="row.${column.name}")
#end
$ident          <td id="column_${column.name}" th:text=#if ($column.type.dateType)"${#temporals.format($theValue, '$column.format')}"#else"${${theValue}}"#end  #if($rendered != "")#end></td>
#end
#end
#end
$ident      </tr>
$ident  </tbody>
$ident</table>
#end
##==========================
##
## A macro that renders the appropriate input modal
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderModalInputBootstrap $parameter $ownerParameter $ident)
#if(!$parameter.inputHidden && !$parameter.inputHidden)
#if($parameter.inputTable)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#else
#set ($propertyId = $parameter.name)
#end
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#end
<div class="modal fade" id="${propertyId}Add" tabindex="-1" aria-labelledby="${propertyId}AddLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
#renderTableInputBootstrap($parameter, $ownerParameter, "             ")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
#end
#end
#end