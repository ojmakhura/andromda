## Velocity Template.
#set ( $componentPath = $stringUtils.replaceChars($action.packageName, '\\.', '\\/') )
#set ( $fileName =  ${angularHelper.getComponentFileName("${action.formImplementationName}")})
#set ($generatedFile = "$componentPath/${fileName}.ts")
#set ($implList = $stringUtils.isNotBlank($action.formImplementationInterfaceList))
// license-header java merge-point
// Generated by andromda-jsf cartridge (angular\app\forms\FormImpl.ts.vsl)
#set ($fields = [])
#foreach ($field in $action.formFields)
#set ($rt = $fields.add($field))
#end
#foreach($field in $angularHelper.getFacadeSet($fields))
#if ($angularHelper.isComplex($field))
#set ( $path = $stringUtils.replaceChars($field.type.packageName, '\\.', '\\/') )
#set ( $file =  ${angularHelper.getComponentFileName("${field.type.name}")})
import { $field.type.name } from 'src/app/gen/model/${path}/$file';
#end
#end
#foreach($opr in $action.getDeferredOperations() )
import { $opr.formName } from './${angularHelper.getComponentFileName("${opr.formName}")}';
#end

/**
$action.getDocumentation(" * ")
 */
export class $action.formImplementationName
    #if ($stringUtils.isNotBlank($action.formImplementationInterfaceList))implements $action.formImplementationInterfaceList#end

{
    /**
     * constructor
     */
    constructor()
    {
#foreach ($field in $action.formFields)
#if ($field.defaultValuePresent)
        ${field.setterName}($field.defaultValue);
#end
#end
    }

#if (!$action.formFields.empty)
    // Action $action.name formFields
#end
## Impl uses $action.formFields, Form uses $operation.formFields
#foreach ($field in $action.formFields)
    private $field.name: $angularHelper.getDatatype($field.type.name);

    /**
$field.getDocumentation("     * ")
     *
     * @return ${field.name} $field.getDocumentation("")
     */
##if ($implList)
##    @Override
##end
    public ${field.getterName}(): $angularHelper.getDatatype($field.type.name )
    {
#if ($field.complex && !$field.many && !$field.type.enumeration)
        if (this.$field.name == null)
        {
            this.$field.name = new ${field.type.name}();
            this.${field.setterName}(this.$field.name);
        }
#end
        return this.${field.name};
    }
#renderAlternateGetterForPrimitiveBoolean($field.name $fieldTypeName ${field.getterName})

    /**
     * Keeps track of whether or not the value of $field.name has
     * be populated at least once.
     */
    private $field.formAttributeSetProperty = false;
## WIM: it looks to the values should be kept during all the form life (useCaseScope)
##    /**
##     * Resets the value of the $field.formAttributeSetProperty to false
##     */
##    public void reset${stringUtils.capitalize($field.formAttributeSetProperty)}()
##    {
##        this.$field.formAttributeSetProperty = false;
##    }

    /**
     * Indicates whether or not the value for $field.name has been set at least
     * once.
     *
     * @return true/false
     */
    public is${stringUtils.capitalize($field.formAttributeSetProperty)}(): boolean
    {
        return this.$field.formAttributeSetProperty;
    }

    /**
$field.getDocumentation("     * ")
     *
     * @param ${field.name}In $field.getDocumentation("")
     */
##if ($implList)
##    @Override
##end
    public ${field.setterName}(${field.name}In: $angularHelper.getDatatype($field.type.name)): void
    {
        this.$field.name = ${field.name}In;
        this.$field.formAttributeSetProperty = true;
    }
#renderBackingListImplSupport($field "")
#if (!$field.type.enumeration)
#if (!$field.attributes.empty)

    // $field.name attributes
#end
#foreach ($attribute in $field.attributes)
## - Chad Brandon - we ALWAYS render the backing list for attributes in the form
##   impl (because there are complex conditions where they might not show up and cause
##   uncompilable code; if we always render, we don't need to figure out what they are)
#renderBackingListImplSupport($attribute $field)
#end
#end

#end

    /*
     * Append this form's fields and values to a Map
     *
     * @param dest the destination Map
     */  
    public copyTo(dest: any)
    {
#foreach ($field in $action.formFields)
        if(this.${field.formAttributeSetProperty})
        {
            dest['${field.name}'] = this.${field.name};
        }
#end
    }

#renderCopyFrom($action.formImplementationName $action.formFields "")
}
