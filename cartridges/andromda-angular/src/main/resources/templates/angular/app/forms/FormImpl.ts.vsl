## Velocity Template.
#set ( $componentPath = $stringUtils.replaceChars($action.packageName, '\\.', '\\/') )
#set ( $fileName =  ${angularHelper.getComponentFileName("${action.formImplementationName}")})
#set ($generatedFile = "$componentPath/${fileName}.ts")
#set ($implList = $stringUtils.isNotBlank($action.formImplementationInterfaceList))
// license-header java merge-point
// Generated by andromda-jsf cartridge (angular\app\forms\FormImpl.ts.vsl)
#set ($fields = [])
#foreach ($field in $action.formFields)
#set ($rt = $fields.add($field))
#end
#foreach($field in $angularHelper.getFacadeSet($fields))
#if ($angularHelper.isComplex($field))
#set ( $path = $stringUtils.replaceChars($field.type.packageName, '\\.', '\\/') )
#set ( $file =  ${angularHelper.getComponentFileName("${field.type.name}")})
import { $field.type.name } from 'src/app/gen/model/${path}/$file';
#end
#end
#foreach($opr in $action.getDeferredOperations() )
import { $opr.formName } from './${angularHelper.getComponentFileName("${opr.formName}")}';
#end

/**
$action.getDocumentation(" * ")
 */
export class $action.formImplementationName
    #if ($stringUtils.isNotBlank($action.formImplementationInterfaceList))implements $action.formImplementationInterfaceList#end

{
    /**
     * constructor
     */
    constructor()
    {
#foreach ($field in $action.formFields)
#if ($field.defaultValuePresent)
        this.${field.name} = $field.defaultValue;
#end
#end
    }

#if (!$action.formFields.empty)
    // Action $action.name formFields
#end
## Impl uses $action.formFields, Form uses $operation.formFields
#foreach ($field in $action.formFields)
#set ($type = $angularHelper.getDatatype($field.type.name))
#if($field.many)
#set ($type = "${type}[]")
#end
    $field.name: ${type};

    /**
     * Keeps track of whether or not the value of $field.name has
     * be populated at least once.
     */
    $field.formAttributeSetProperty = false;

    static ${field.setterName}(form: ${action.formImplementationName}, ${field.name}In: ${type}): void
    {
        form.$field.name = ${field.name}In;
        form.$field.formAttributeSetProperty = true;
    }

#renderBackingListImplSupport($field "")
#if (!$field.type.enumeration)
#if (!$field.attributes.empty)

    // $field.name attributes
#end
#foreach ($attribute in $field.attributes)
## - Chad Brandon - we ALWAYS render the backing list for attributes in the form
##   impl (because there are complex conditions where they might not show up and cause
##   uncompilable code; if we always render, we don't need to figure out what they are)
#renderBackingListImplSupport($attribute $field)
#end
#end

#end

    /*
     * Append this form's fields and values to a Map
     *
     * @param dest the destination Map
     */  
    static copyTo(form: ${action.formImplementationName}, dest: any)
    {
        if(dest && form){
#foreach ($field in $action.formFields)
            if(form.${field.formAttributeSetProperty})
            {
                dest['${field.name}'] = form.${field.name};
            }
#end
        }
    }

#renderCopyFrom($action.formImplementationName $action.formFields "")
}
