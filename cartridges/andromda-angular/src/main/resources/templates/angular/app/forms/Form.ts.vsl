#set ( $componentPath = $stringUtils.replaceChars($operation.packageName, '\\.', '\\/') )
#set ( $fileName =  ${angularUtils.getComponentFileName("${operation.formName}")})
#set ($generatedFile = "$componentPath/${fileName}.ts")
// license-header java merge-point
// Generated by andromda-jsf cartridge (forms\Form.ts.vsl) DO NOT EDIT!
#set ($fields = [])
#foreach ($field in $operation.formFields)
#if($angularUtils.isComplex($field))
#set ($rt = $fields.add($field))
#end
#end
#foreach($field in $angularUtils.getFacadeSet($fields))
#if ($angularUtils.isComplex($field))
#set ( $path = $stringUtils.replaceChars($field.type.packageName, '\\.', '\\/') )
#set ( $file =  ${angularUtils.getComponentFileName("${field.type.name}")})
import { $field.type.name } from '@app/model/${path}/$file';
#end
#end

/**
 * This form encapsulates the fields that are used in the execution of the
 * <code>$operation.name</code> method, which is located on the
 * <code>$operation.owner.fullyQualifiedName</code> controller.
 *
$operation.getDocumentation(" * ")
 *
 * @see ${operation.owner.fullyQualifiedName}#hash()${operation.name}($operation.formName)
 */
export interface $operation.formName
{
#foreach ($field in $operation.formFields)
    /**
$field.getDocumentation("     * ")
     * @return $field.name
     */
    ${field.getterName}(): $field.getterSetterTypeName;
## - don't allow fields with default values to be set
#if (!$field.defaultValuePresent)

    /**
$field.getDocumentation("     * ")
     * @param $field.name
     */
    ${field.setterName}($field.name: $field.getterSetterTypeName): void;
#if ($field.selectable || $field.type.enumeration)
#renderBackingListSupport($field "")
#end
#foreach ($attribute in $field.attributes)
#if ($attribute.isSelectable($field) || $attribute.type.enumeration || $attribute.isBackingValueRequired($field))
#renderBackingListSupport($attribute $field)
#end
#end
#end

#end
}