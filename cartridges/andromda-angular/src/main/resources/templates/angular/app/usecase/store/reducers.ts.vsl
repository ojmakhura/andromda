// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
#set ($useCase = $controller.useCase)
#set ($fileName = "${metafacadeWebUtils.toWebResourceName($useCase.name)}.reducers")
#set ($path = "$useCase.pathRoot")
#set ($actions = "${useCase.actionClassName}Actions")
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as ${actions} from './${metafacadeWebUtils.toWebResourceName($useCase.name)}.action';
import {${stringUtils.uncapitalize(${useCase.actionClassName})}Key, initialState} from './${metafacadeWebUtils.toWebResourceName($useCase.name)}.state';
#set($stateParams = [])
#foreach($view in $useCase.views)
#foreach($variable in $view.variables)
#set ( $rt = $stateParams.add($variable) )
#end
#foreach($action in $view.actions)
#foreach($field in $action.formFields)
#set ( $rt = $stateParams.add($field) )
#end
#foreach($param in $action.parameters)
#set ( $rt = $stateParams.add($param) )
#end
#end
#end
#set ( $finalParams = $angularUtils.getFacadeSet($stateParams) )

export const ${stringUtils.uncapitalize(${useCase.actionClassName})}Reducer = createReducer(
    initialState,
#foreach ( $service in $controller.allRestControllers )
#foreach($operation in $service.operations)
    on(${actions}.${operation.name}Success, (state, action) => ({
        ...state,
#foreach($param in $finalParams)
        $param.name: #if($param.many || $param.type.collectionType)[]#{else}null#end, 
#end
        error: null
    })),
#end
#end
    on(${actions}.${stringUtils.uncapitalize(${useCase.actionClassName})}Reset, (state) => ({
      ...state,
#foreach($param in $finalParams)
        $param.name: #if($param.many || $param.type.collectionType)[]#{else}null#end, 
#end
        error: null
    })),
    on(${actions}.${stringUtils.uncapitalize(${useCase.actionClassName})}Failure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const ${stringUtils.uncapitalize(${useCase.actionClassName})}Feature = createFeature({
    name: ${stringUtils.uncapitalize(${useCase.actionClassName})}Key,
    reducer: ${stringUtils.uncapitalize(${useCase.actionClassName})}Reducer
});
