// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
## Find all the fields in the actions of the view
import { Component, Injector } from '@angular/core';
import { $view.componentName } from '@app/${view.filePath}';
#foreach ($action in $view.actions)
#if (!$action.tableLink)
import { $stringUtils.capitalize($action.formName) } from '@app/${view.filePath}';
#end
#end
#if ($view.nonTableVariablesPresent)
import { $stringUtils.capitalize($view.varsFormName) } from '@app/${view.filePath}';
#end

@Component({
  selector: '${view.selectorName}',
  templateUrl: './${view.fileName}.html',
  styleUrls: ['./${view.fileName}.scss']
})
export class ${view.componentImplementationName} extends ${view.componentName} {

    constructor(private injector: Injector) {
        super(injector);
    }

    beforeOnInit(){
    }
	
    afterOnInit() {
#foreach($table in $view.tables)
        this.add${stringUtils.capitalize($table.name)}DummyData();
#end
#foreach($parameter in $view.variables)
#if($parameter.inputSelect)
#if($parameter.angularTypeName=="number")
#set ($defaultValue = 1)
#elseif($parameter.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${parameter.name}-1'")
#end
        this.${parameter.backingListName}.push($defaultValue);
#if($parameter.angularTypeName=="number")
#set ($defaultValue = 2)
#elseif($parameter.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${parameter.name}-2'")
#end
        this.${parameter.backingListName}.push($defaultValue);
#end
#end
    }

    doNgAfterViewInit() {
    }

    handleFormChanges(change: any) {
    }

#if ($view.nonTableVariablesPresent)
#set ($complex = [])
#set ($simple = [])
#foreach ($variable in $view.variables)
#if(!$variable.table)
#if ($variable.complex)
#set($rt = $complex.add($variable))
#else
#set($rt = $simple.add($variable))
#end
#end
#end
    /**
     * This method may be overwritten
     */
    afterSet$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)): void {

    }

#end
#foreach ($action in $view.actions)
#if (!$action.tableLink)
    /**
     * This method may be overwritten
     */
    afterSet$stringUtils.capitalize(${action.formName})(form: $stringUtils.capitalize($action.formName)): void {

    }
#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")

    /**
     * This method may be overwritten
     */
    ${beforeAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void {

    }

    /**
     * This method may be overwritten
     */
    ${afterAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void {

    }
    
#end
#end
}