// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${view.packageName}), '\\.', '\\/') )
#set ( $fileName = $angularHelper.getComponentFileName("${view.useCase.name}-${view.name}"))
#set ( $className = $angularHelper.getComponentName($fileName, "-") )
## Find all the fields in the actions of the view
#set ( $fields = [] )
#foreach ( $action in $view.actions )
#foreach ( $field in $action.formFields )
#set ( $rt = $fields.add($field))
#end
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ( $rt = $finalFields.add($finalField) )
#end
import { Component, OnInit} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
#set ( $attr = [] )
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
#set ( $actionPath = "$stringUtils.replaceChars($stringUtils.lowerCase(${action.packageName}), '\\.', '\\/')" )
#set ( $actionName = $$angularHelper.getComponentFileName("${action.useCase.name} $action.trigger.name") )
import { $angularHelper.getComponentName($action.name, "-")Impl } from './${actionName}.impl.component';
#foreach ($field in $action.formFields)
#if (!(${field.action} && $field.action.tableLinkName))
#if ($field.complex)
#set ( $rt = $attr.add($field ))
#end
#end
#end
#end
#end
#set ( $finalAttr = [] ) ## No repetisions
#foreach ( $at in $angularHelper.getFacadeSet($attr) )
#set ($rt = $finalAttr.add($at) )
#end
#foreach ($a in $angularHelper.getImports($finalAttr, $view.packageName, ""))
$a
#end
import { ${className} } from './${fileName}.component';

@Component({
  selector: '${fileName}',
  templateUrl: './${fileName}.component.html',
  styleUrls: ['./${fileName}.component.css']
})
export class ${className}Impl extends ${className} implements OnInit {

	constructor(private route: ActivatedRoute, 
				private router: Router) {
		super();
	}
	
	ngOnInit() {
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
#foreach ($field in $action.formFields)

#if ( $field.many )
		this.$field.name = [];
#else
#set ($dtype = $angularHelper.getDatatype($field.type.fullyQualifiedName))
#if ($dtype == "string")
		this.$field.name = "";
#elseif ($dtype == "boolean")
                this.#if($stringUtils.isBlank($field.defaultValue))$field.name = false;#else$field.name = $field.defaultValue;#end
#elseif ($dtype != "number" && $dtype != "any")
		this.$field.name = new $dtype();
#end
#end
#end
#end
#end
	}
}
