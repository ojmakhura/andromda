// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${view.packageName}), '\\.', '\\/') )
#set ( $fileName = $angularUtils.getComponentFileName("${view.name}"))
#set ($params = $angularUtils.getFormFields($view.actions))
#set ($cr = "
")
import { Component, OnInit, Injector, ViewChild, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import {
    NgForm, 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule 
} from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
## Find all the fields in the actions of the view
#set ($viewName = ${angularUtils.getComponentName("$fileName", "-")})
#set ( $vars = [] )
#set ( $enumerations = [] )
#foreach( $variable in $view.variables )
#if($variable.complex)
#set ( $ret = $vars.add($variable.type) )
#foreach( $attribute in $variable.attributes )
#if($attribute.type.enumeration)
#set ( $ret = $enumerations.add($attribute.type) )
#elseif($angularUtils.isComplex($attribute))
#set ( $ret = $vars.add($attribute.type) )
#end
#end
#end
#end
#foreach ($param in $angularUtils.getFacadeSet($vars))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${param.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${param.name}") )
import { ${param.name} } from '@app/model/$path/$fname';
#end
#foreach ($enum in $angularUtils.getFacadeSet($enumerations))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${enum.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${enum.name}") )
import { ${enum.name} } from '@app/model/$path/$fname';
#end
#foreach ($service in $view.useCase.controller.allRestControllers)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${service.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${service.name}Impl") )
import { ${service.name}Impl } from '@app/service/$path/$fname';
#end
#set ( $path = $stringUtils.replaceChars($view.useCase.controller.packageName, '\\.', '\\/') )
#set ( $file =  ${angularUtils.getComponentFileName("${view.useCase.controller.name}Impl")})
import { ${view.useCase.controller.name}Impl } from '@app/controller/$path/${file}';

@Component({
  selector: '${fileName}-vars-base',
  template: ''
})
export abstract class ${viewName}VarsComponent implements OnInit {

#foreach ( $variable in $view.variables )
#if($angularUtils.isComplex($variable))
#foreach($attribute in $angularUtils.getTableAttributes($variable))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#end
#end
    @Input() $stringUtils.uncapitalize($viewName)Form: FormGroup;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;
#set ($selections = [])
#foreach( $variable in $view.variables )
#if($variable.complex)
#foreach( $attribute in $variable.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = [];
#elseif($attribute.inputSelect || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($variable)})
#set($ret = $selections.add($attribute.type))
    $backingListName: Array<$angularUtils.getDatatype($attribute.type.name)> = [];
#end
#end
#else
#if($variable.type.enumeration)
    ${variable.name}T = $variable.type.name;
    ${variable.name}Options = Object.keys(this.${variable.name}T);
#elseif($variable.inputSelect)
#set($ret = $selections.add($variable.type))
    ${variable.name}BackingList: Array<$angularUtils.getDatatype($variable.type.name)> = [];
#end
#end
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);

        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();

        this.afterOnInit();
    }

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit(): void {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return <FormControl>this.${stringUtils.uncapitalize($viewName)}Form.get(name);
    }

    getGroupControl(name: string): FormGroup {
        return <FormGroup>this.${stringUtils.uncapitalize($viewName)}Form.get(name);
    }

    getArrayControl(name: string): FormArray {
        return <FormArray>this.${stringUtils.uncapitalize($viewName)}Form.get(name);
    }

#foreach ( $variable in $view.variables )
#if($angularUtils.isComplex($variable))
#foreach($attribute in $variable.attributes)
#if($angularUtils.isTable($attribute))
    get ${attribute.name}(): FormArray {
        return <FormArray>this.getItemControl('$variable.name').get('$attribute.name');
    }

#end
#end
#end
#end
}
