// Generated by andromda-angular cartridge (view\view-variables.ts.vsl) DO NOT EDIT
import { Component, OnInit, Injector, ViewChild, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import {
    NgForm, 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule 
} from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { UseCaseScope } from '@app/utils/use-case-scope';
## Find all the fields in the actions of the view
#foreach ($import in $view.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end

@Component({
  selector: '${view.selectorName}-vars-base',
  template: ''
})
export abstract class ${view.varsComponentName} implements OnInit {

#foreach ( $variable in $view.variables )
#if($angularUtils.isComplex($variable))
#foreach($attribute in $angularUtils.getTableAttributes($variable))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#end
#end
    @Input() ${view.varsFormName}: FormGroup;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    @Input() protected pageVariables: any;
#set ($selections = [])
#foreach( $variable in $view.variables )
#if($variable.complex)
#foreach( $attribute in $variable.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = [];
#elseif($attribute.inputSelect || $attribute.inputMultibox || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($variable)})
#set($ret = $selections.add($attribute.type))
    $backingListName: $attribute.angularTypeName[] = [];
#end
#end
#else
#if($variable.type.enumeration)
    ${variable.name}T = $variable.type.name;
    ${variable.name}Options = Object.keys(this.${variable.name}T);
#elseif($variable.inputSelect || $variable.inputMultibox)
#set($ret = $selections.add($variable.type))
    ${variable.name}BackingList: $variable.angularTypeName[] = [];
#end
#end
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName};
#foreach ($service in $view.useCase.controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.name}Impl;
#end
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName} = injector.get(${view.useCase.controller.name}Impl);
#foreach ($service in $view.useCase.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.name}Impl);
#end
#end
        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();

        this.afterOnInit();
    }

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit(): void {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return <FormControl>this.${view.varsFormName}.get(name);
    }

    getGroupControl(name: string): FormGroup {
        return <FormGroup>this.${view.varsFormName}.get(name);
    }

    getArrayControl(name: string): FormArray {
        return <FormArray>this.${view.varsFormName}.get(name);
    }

#foreach ( $variable in $view.variables )
#if($angularUtils.isComplex($variable))
#foreach($attribute in $variable.attributes)
#if($angularUtils.isTable($attribute))
    get ${attribute.name}(): FormArray {
        return <FormArray>this.getItemControl('$variable.name').get('$attribute.name');
    }

#end
#end
#end    
#end
}
