// Generated by andromda-jsf cartridge (app.module.ts.vsl) DO NOT EDIT!
#set ( $fields = [] )
#set ( $services = [] )
#set ( $tables = [] )
#set ( $actions = [] )
#set ( $views = [] )
#set ( $controllers = [] )
#set ( $cr = "
")
#set ( $moduleFileName = $angularUtils.getComponentFileName("${applicationId}") )
#set ( $moduleName = $angularUtils.getComponentName($moduleFileName, "-"))
// license-header angular merge-point
//
/**
 * @author Generated by app.module.ts.vsl in andromda-anglar-cartridge#if($dateTimeGeneratedText) on $javaUtils.date#end Do not modify by hand!
 *
 * MODEL CLASS:  $validationName
#foreach ($stereotype in $stereotypes)
 * STEREOTYPE:   $stereotype.name
#end
 */
##
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ServiceWorkerModule } from '@angular/service-worker';
import { TranslateModule } from '@ngx-translate/core';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MaterialModule } from './material.module';

import { environment } from '@env/environment';
import { CoreModule } from '@core';
import { SharedModule } from '@shared';
import { HomeModule } from './home/home.module';
import { ShellModule } from './shell/shell.module';
#set ($component = "component")
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { SanitizeHtml } from './pipe/SanitizeHtml';
#if($ngrx)
import { EffectsModule } from '@ngrx/effects';
import { StoreModule } from '@ngrx/store';
import { reducers, metaReducers } from './reducers';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
//import { ConnectFormDirective } from './connect-form.directive';
#end
##foreach ($useCase in $useCases)
##renderImports($useCase)
##end
##set ( $controllerSet = $angularUtils.getFacadeSet($controllers) )
##foreach ( $controller in $controllerSet )
##set ($useCase = $controller.useCase)
##import { ${useCase.moduleName} } from ${escTool.s}@app/${useCase.moduleFilePath}${escTool.s};
##import { ${controller.implementationName} } from ${escTool.s}@app/${controller.implementationFilePath}${escTool.s};
##end
#foreach ( $useCase in $useCases )
import { ${useCase.moduleName} } from ${escTool.s}@app/${useCase.moduleFilePath}${escTool.s};
#if($useCase.controller)
#set ($controller = $useCase.controller)
import { ${controller.implementationName} } from ${escTool.s}@app/${controller.implementationFilePath}${escTool.s};
#foreach($service in $controller.allRestControllers)
#set ( $rt = $services.add($service) )
#end
#end
#end
import { UseCaseScope } from '@app/utils/use-case-scope';
#set ( $finalServices = $angularUtils.getFacadeSet($services) )
#foreach ( $service in $finalServices )
import { ${service.implementationName} } from ${escTool.s}@app/${service.implementationFilePath}${escTool.s};
#end
#if($secure)
import { AuthModule } from './auth';
#end
$secure

@NgModule({
    declarations: [
        AppComponent,
    ],
    imports: [
        BrowserModule,
        ServiceWorkerModule.register('./ngsw-worker.js', { enabled: environment.production }),
        FormsModule,
        HttpClientModule,
        TranslateModule.forRoot(),
        BrowserAnimationsModule,
        MaterialModule,
        CoreModule,
        SharedModule,
        ShellModule,
        HomeModule,
#if($ngrx)
        EffectsModule.forRoot([]),
        StoreModule.forRoot({}),
        StoreDevtoolsModule.instrument({}),
#end
#foreach ( $useCase in $useCases )
        ${useCase.moduleName},
#end
#if($secure)
        AuthModule,
#end
        AppRoutingModule, // must be imported as the last module as it contains the fallback route
    ],
    exports: [
    ],
    providers: [
        UseCaseScope,
#foreach ( $finalService in $finalServices )
        ${finalService.implementationName},
#end
#foreach ( $useCase in $useCases )
#if($useCase.controller)
        ${useCase.controller.implementationName},
#end
#end
    ],
    bootstrap: [AppComponent]
})
export class AppModule { }
