#set ( $appModule = $stringUtils.lowerCase(${applicationId}) )
#set ( $classNames = [] )
#set ( $imports = [] )
#set ($fields = [] )
#set ($services = [] )
// license-header angular merge-point
//
/**
 * @author Generated by app.module.ts.vsl in andromda-anglar-cartridge#if($dateTimeGeneratedText) on $javaUtils.date#end Do not modify by hand!
 *
 * MODEL CLASS:  $validationName
#foreach ($stereotype in $stereotypes)
 * STEREOTYPE:   $stereotype.name
#end
 */
##
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatTabsModule,
        MatListModule,
        MatSidenavModule,
        MatToolbarModule,
        MatButtonModule,
        MatIconModule,
        MatMenuModule,
        MatDatepickerModule,
        MatNativeDateModule,
        MatFormFieldModule,
        MatInputModule,
        MatCheckboxModule } from '@angular/material';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { $stringUtils.capitalize(${applicationId})LayoutComponent } from './layout/$stringUtils.lowerCase(${applicationId})-layout.component';
import { $stringUtils.capitalize(${applicationId})HeaderComponent } from './header/$stringUtils.lowerCase(${applicationId})-header.component';
import { $stringUtils.capitalize(${applicationId})NavigationComponent } from './navigation/$stringUtils.lowerCase(${applicationId})-navigation.component';
#set ($component = "component")
import { $stringUtils.capitalize(${applicationId})RoutingModule } from './$stringUtils.lowerCase(${applicationId})-routing.module';
import { $stringUtils.capitalize(${applicationId})Component } from './$stringUtils.lowerCase(${applicationId}).$component';
#foreach ($useCase in $useCases)
#renderImports($useCase)
#end

#set ( $nameSet = $angularHelper.getStringSet($classNames) )
#foreach ( $import in $angularHelper.getStringSet($imports) )
$import
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ($dt = $angularHelper.getDatatype($finalField.fullyQualifiedName))
#if ($dt != "number" && $dt != "string" && $dt != "Date" && $dt != "Collection" && $dt != "any")
#set ( $rt = $finalFields.add($finalField) )
#end
#end
#set ( $suffix = "" )
#foreach ( $tmp in $angularHelper.getImports($finalFields, "", $suffix) )
$tmp
#end
#set ( $finalServices = $angularHelper.getFacadeSet($services) )
#foreach ( $finalService in $finalServices )
#set ($componentPath = $stringUtils.replaceChars(${finalService.packageName}, "\\.", "\\/"))
#set ($fileName = $angularHelper.getComponentFileName("${finalService.name}Impl"))
import { ${finalService.name}Impl } from './service/$componentPath/$fileName';
#end

@NgModule({
    declarations: [
        $stringUtils.capitalize(${applicationId})Component,
        $stringUtils.capitalize(${applicationId})LayoutComponent,
        $stringUtils.capitalize(${applicationId})HeaderComponent,
        $stringUtils.capitalize(${applicationId})NavigationComponent,
#set ($i = 0)
#foreach ( $name in $nameSet )
#set ( $i = $i + 1 )
        $name#if($i < $nameSet.size()),
#end
#end

    ],
    imports: [
        CommonModule,
        MatTabsModule,
        MatListModule,
        MatSidenavModule,
        MatToolbarModule,
        MatButtonModule,
        MatIconModule,
        MatMenuModule,
        MatDatepickerModule,
        MatNativeDateModule,
        MatFormFieldModule,
        MatInputModule,
        MatCheckboxModule,
        BrowserModule,
        BrowserAnimationsModule,
        HttpClientModule,
        FormsModule,
        $stringUtils.capitalize(${applicationId})RoutingModule
    ],
    exports: [
        MatTabsModule,
        MatSidenavModule,
        MatToolbarModule,
        MatButtonModule,
        MatIconModule,
        MatMenuModule,
        MatDatepickerModule,
        MatNativeDateModule,
        MatFormFieldModule,
        MatInputModule,
        MatCheckboxModule
    ],
    providers: [
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ($dt = $angularHelper.getDatatype($finalField.fullyQualifiedName))
#if ($dt != "number" && $dt != "string" && $dt != "Date" && $dt != "Collection" && $dt != "any")
        $finalField.name,
#end
#end
#set ($i = 0)
#foreach ( $name in $nameSet )
#set ( $i = $i + 1 )
        $name#if($i < $nameSet.size()),
#end
#end
#set ($i = 0)
#set ( $finalServices = $angularHelper.getFacadeSet($services) ) ## No repetisions
#foreach ( $finalService in $finalServices )
        ${finalService.name}Impl#if($i < $finalService.size()),
#end
#end

    ],
    bootstrap: [$stringUtils.capitalize(${applicationId})Component]
})
export class $stringUtils.capitalize(${applicationId})Module { }
