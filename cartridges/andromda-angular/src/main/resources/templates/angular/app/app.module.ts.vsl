#set ( $appModule = $stringUtils.lowerCase(${applicationId}) )
#set ( $imports = "" )
// license-header angular merge-point
//
/**
 * @author Generated by app.module.ts.vsl in andromda-anglar-cartridge#if($dateTimeGeneratedText) on $javaUtils.date#end Do not modify by hand!
 *
 * TEMPLATE:     enum.vsl in andromda-angular-cartridge.
 * MODEL CLASS:  $validationName
#foreach ($stereotype in $stereotypes)
 * STEREOTYPE:   $stereotype.name
#end
 */
##
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatTabsModule, 
		 MatListModule,
		 MatSidenavModule,
		 MatToolbarModule,
		 MatButtonModule,
		 MatIconModule,
		 MatMenuModule,
		 MatDatepickerModule, 
   	  	 MatNativeDateModule,
   		 MatFormFieldModule,
   		 MatInputModule,
         MatCheckboxModule } from '@angular/material';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { $stringUtils.capitalize(${applicationId})LayoutComponent } from './layout/$stringUtils.lowerCase(${applicationId})-layout.component';
import { $stringUtils.capitalize(${applicationId})HeaderComponent } from './header/$stringUtils.lowerCase(${applicationId})-header.component';
import { $stringUtils.capitalize(${applicationId})NavigationComponent } from './navigation/$stringUtils.lowerCase(${applicationId})-navigation.component';
#set ($component = "component")
import { $stringUtils.capitalize(${applicationId})RoutingModule } from './$stringUtils.lowerCase(${applicationId})-routing.module';
import { $stringUtils.capitalize(${applicationId})Component } from './$stringUtils.lowerCase(${applicationId}).$component';
#foreach ($useCase in $useCases)
#renderImports($useCase)
#end
## Get the services
## We handle services separately because we need the implementations, not the bases
#set ($services = [] )
#set ($fields = [] )
#foreach ($useCase in $useCases)
#foreach ($action in $useCase.actions)
#foreach ($service in $action.controller.allServices)
#set ( $rt = $services.add($service) )
#end
#foreach ( $field in $action.formFields )
#set ( $rt = $fields.add($field.type))
#end
#end
#end
#set ( $finalServices = $angularHelper.getFacadeSet($services) ) ## No repetisions
#foreach ( $finalService in $finalServices )
#set ($componentPath = $stringUtils.replaceChars(${finalService.packageName}, "\\.", "\\/"))
#set ($fileName = $angularHelper.getComponentFileName("${finalService.name}Impl"))
import { ${finalService.name}Impl } from './service/$componentPath/$fileName'
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ( $rt = $finalFields.add($finalField) )
#end
#set ( $suffix = "" )
#foreach ( $tmp in $angularHelper.getImports($finalFields, "", $suffix) )
$tmp
#end

@NgModule({
  declarations: [
#set ($imports = "$stringUtils.capitalize(${applicationId})Component,
    $stringUtils.capitalize(${applicationId})LayoutComponent,
    $stringUtils.capitalize(${applicationId})HeaderComponent,
    $stringUtils.capitalize(${applicationId})NavigationComponent")
#foreach ($useCase in $useCases)
#renderUseCaseDeclarations ($useCase )
#end
    $imports
  ],
  imports: [
    CommonModule,
    MatTabsModule,
    MatListModule,
    MatSidenavModule,
    MatToolbarModule,
    MatButtonModule,
    MatIconModule,
    MatMenuModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatFormFieldModule,
    MatInputModule,
    MatCheckboxModule,
    BrowserModule,
    BrowserAnimationsModule,
    HttpClientModule,
    FormsModule,
    $stringUtils.capitalize(${applicationId})RoutingModule
  ],
  exports: [
    MatTabsModule,
    MatSidenavModule,
    MatToolbarModule,
    MatButtonModule,
    MatIconModule,
    MatMenuModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatFormFieldModule,
    MatInputModule,
    MatCheckboxModule
  ],
  providers: [
#set ($imp = "")
#foreach ( $finalService in $finalServices )
#if ($stringUtils.isBlank($imp))		
#set ($imp = "${finalService.name}Impl")
#else
#set ($imp = "$imp, 
		${finalService.name}Impl")
#end
#end
#foreach ($field in $finalFields)
#if ($stringUtils.isBlank($imp))
#set ($imp = "${field.name}")
#else
#set ($imp = "$imp, 
		${field.name}")
#end
#end
		$imp
  ],
  bootstrap: [$stringUtils.capitalize(${applicationId})Component]
})
export class $stringUtils.capitalize(${applicationId})Module { }
