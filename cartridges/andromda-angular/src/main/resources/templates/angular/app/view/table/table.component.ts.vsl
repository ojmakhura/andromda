// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, Injector, Input } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';

#foreach ($import in $table.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end

import { ${table.view.componentImplementationName} } from '@app/${table.view.implementationFilePath}';
import { ${table.view.useCase.controller.implementationName} } from '@app/${table.view.useCase.controller.implementationFilePath}';

@Component({
  selector: '${table.selectorName}-base',
  template: ''
})
export abstract class ${table.tableComponentName} implements OnInit {
#set($cr = '
')

    ${table.name}Columns = [
#if($table.tableActions.size() > 0)
		'actions',
#end
#set($i = 1)
#foreach ($column in $table.tableColumns)
#if(!($column.upper>1 || $column.upper==-1))
        '$angularUtils.getColumnName($column)',
#end
#end
    ];

    @Input() ${table.view.formName}: FormGroup;

    @ViewChild('${table.name}Paginator', {static: true}) ${table.name}Paginator: MatPaginator;
    @ViewChild('${table.name}Sort', {static: true}) ${table.name}Sort: MatSort;

    @Input() protected pageVariables: any;
	protected formBuilder: FormBuilder;
    protected route: ActivatedRoute;
    protected router: Router;
#foreach($service in $restControllers)
    protected $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
    protected ${table.view.variableName}: ${table.view.componentImplementationName};
    protected _injector: Injector;

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
#foreach($service in $restControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
        this.${table.view.variableName} = injector.get(${table.view.componentImplementationName});
        this.formBuilder = injector.get(FormBuilder);
        this._injector = injector;
    }

    ngOnInit(): void {
        this.beforeOnInit();
        this.${table.name}.removeAt(0);
        this.afterOnInit();
    }
	
    abstract beforeOnInit(): void;
	
    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
        this.doNgAfterViewInit();
    }

#foreach ($action in $table.tableFormActions)
#foreach ($transition in $action.transitions)
#if ($transition.enteringFinalState)
#if ($transition.target.interUseCaseParameters.size() > 0 )
#set ($x = 0)
#set ($params = "let params = {")
#foreach ($param in $transition.target.interUseCaseParameters)
#if (!$param.complex)
#if($x == 1)
#set ($params = "$params,
	//		$param.name")
#else
#set ($params = "$params
	//	$param.name")
#end
#else
#if($x == 1)
#set ($params = "$params, 
	//	$param.name: { JSON.stringify($param.name) }")
#else
#set ($params = "$params
	//	$param.name: { $param.name: { JSON.stringify($param.name) }")
#end
#end
#set ($x = 1)
#end
#set ($params = "$params
	// };")
	// This params variable is for passing data between routed pages.
	// $params
	// You can pass the data to the views in the '$transition.target.name' Use Case as follows
#foreach ($view in $transition.target.targetUseCase.views)
	// this.router.navigate(['/$view.routerPath'], {state: {params}});
#end
	abstract do$stringUtils.capitalize(${action.triggerName})(form: any): any;
	
	${action.triggerName}(#renderAngularTableCommandLinkParametersWithTypes()) {

        let form = #renderAngularTableCommandLinkParametersForm()
		let params = this.do$stringUtils.capitalize(${action.triggerName})(form);
        this.${action.controller.variableName}.${action.triggerName}(form);
	}
#end	
#end
#end
#end

#foreach ($action in $table.tableHyperlinkActions)
    abstract do$stringUtils.capitalize(${action.triggerName})(form: any): any;
	
	${action.triggerName}(#renderAngularTableCommandLinkParametersWithTypes()) {
        let form = #renderAngularTableCommandLinkParametersForm()
		let params = this.do$stringUtils.capitalize(${action.triggerName})(form);
        this.${action.controller.variableName}.${action.triggerName}(form);
	}
#end

    get ${table.view.useCase.controller.variableName}(): ${table.view.useCase.controller.name}Impl {
        
        return this._injector.get(${table.view.useCase.controller.name}Impl);
    }

    get ${table.name}(): FormArray {
        return <FormArray>this.${table.view.formName}.get('${table.name}');
    }

    addDummyData() {
        this.${table.name}.push(this.formBuilder.group({
#set($i = 1)
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
            $columnName: [null],
#end
#set($i = $i + 1)
#end
        }));

        this.${table.name}.push(this.formBuilder.group({
#set($i = 1)
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper > 1 || $column.upper == -1))
            $columnName: [null],
#end
#set($i = $i + 1)
#end
        }));

        this.${table.name}.push(this.formBuilder.group({
#set($i = 1)
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
            $columnName: [null],
#end
#set($i = $i + 1)
#end
        }));
    }
}