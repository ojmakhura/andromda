// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { 
    Component, 
    OnInit, 
    ViewChild, 
    AfterViewInit,
    inject, 
    Input,
    OnDestroy
} from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
#set ($base = "${metafacadeWebUtils.toWebResourceName($table.view.useCase.storeName)}")
import { ${table.view.useCase.storeName}State } from '@app/store$table.view.useCase.pathRoot/${base}.state';
import * as ${table.view.useCase.storeName}Selectors from '@app/store$table.view.useCase.pathRoot/${base}.selectors';

#foreach ($import in $table.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
import { ${table.view.componentImplementationName} } from '@app/${table.view.implementationFilePath}';
#if(${table.view.useCase.controller})
import { ${table.view.useCase.controller.implementationName} } from '@app/${table.view.useCase.controller.implementationFilePath}';
#end

@Component({
  selector: '${table.fileName}-base',
  template: ''
})
export abstract class ${table.tableComponentName} implements OnInit, AfterViewInit, OnDestroy {

    ${table.name}Columns = [
#foreach ($column in $table.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
        '$columnName',
#end
#if($table.tableFormActions.size() > 0)
        'actions'
#end
    ];

##    @Input() ${table.name}: FormArray;
    ${table.name}$: Observable<$table.angularTypeName>;

    ${table.name}DataSource = new MatTableDataSource<$table.type.name>([]);
    @ViewChild('${table.name}Paginator', {static: true}) ${table.name}Paginator: MatPaginator;
    @ViewChild('${table.name}Sort', {static: true}) ${table.name}Sort: MatSort;

    @Input() protected pageVariables: any;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    protected store: Store<${table.view.useCase.storeName}State> = inject(Store);
#foreach($service in $restControllers)
    protected $stringUtils.uncapitalize($service.name): ${service.name} = inject(${service.name});
#end
#if(${table.view.useCase.controller})
    protected ${table.view.useCase.controller.variableName}: ${table.view.useCase.controller.implementationName} = inject(${table.view.useCase.controller.implementationName});
#end
    protected ${table.view.variableName}: ${table.view.componentImplementationName} = inject(${table.view.componentImplementationName});

    constructor() {
        this.${table.name}$ = this.store.pipe(select(${table.view.useCase.storeName}Selectors.select$stringUtils.capitalize(${table.name})));
    }

    ngOnInit(): void {
    }
	    
    ngOnDestroy() { 
    }
    
    ngAfterViewInit() {
        this.${table.name}$
        .subscribe(
            ${table.name} => {
                this.${table.name}DataSource.data = ${table.name};
            }
        );
        this.${table.name}DataSource.paginator = this.${table.name}Paginator;
        this.${table.name}DataSource.sort = this.${table.name}Sort;
    }
#foreach ($action in $table.tableHyperlinkActions)

    do$stringUtils.capitalize(${action.triggerName})(form: any): any {}
	
	${action.triggerName}(#renderAngularTableCommandLinkParametersWithTypes()) {
        let form = #renderAngularTableCommandLinkParametersForm()
        let queryParams: any = #renderAngularTableCommandLinkQueryParametersForm()
        this.${action.controller.variableName}.setQueryParams(Object.assign({}, queryParams));
        let params = this.do$stringUtils.capitalize(${action.triggerName})(form);
        this.useCaseScope.pageVariables = Object.assign({}, params);
        this.${action.controller.variableName}.${action.triggerName}(params);
	}
#end
#foreach ($action in $table.tableFormActions)

    do$stringUtils.capitalize(${action.triggerName})(form: any): any {}
	
	${action.triggerName}(#renderAngularTableCommandLinkParametersWithTypes()) {
        let form = #renderAngularTableCommandLinkParametersForm()
        let queryParams: any = #renderAngularTableCommandLinkQueryParametersForm()
        this.${action.controller.variableName}.setQueryParams(Object.assign({}, queryParams));
        let params = this.do$stringUtils.capitalize(${action.triggerName})(form);
        this.useCaseScope.pageVariables = Object.assign({}, params);
        this.${action.controller.variableName}.${action.triggerName}(params);
	}
#end
}