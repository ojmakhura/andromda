// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
#set ( $componentPath = "$stringUtils.replaceChars($stringUtils.lowerCase(${table.packageName}), '\\.', '\\/')" )
#set ( $fileName = $angularHelper.getComponentFileName("${table.view.useCase.name}-${table.view.name}-${table.name}") )
#set ( $className = $angularHelper.getComponentName($fileName, "-"))
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
#set ( $types = [] )
#set ( $rt = $types.add($table.type) )
#set ( $suffix = "" )
#foreach ( $tmp in $angularHelper.getImports($types, "", $suffix) )
$tmp
#end
#set ($services = [${action.controller.allServices}])
#foreach ($action in $table.tableFormActions)
#foreach ($service in ${action.controller.allServices})
#set ( $ret = $services.add($service) )
#end
#end
#set ( $finalServices = [] ) ## No repetisions
#foreach ( $finalService in $angularHelper.getFacadeSet($services) )
#set ($rt = $finalServices.add($finalService) )
#end

import { ActivatedRoute, Router } from '@angular/router';
#set ($suffix = "Impl")
#foreach ($tmp in $angularHelper.getImports($finalServices, $table.packageName, $suffix))
$tmp
#end
#set ( $viewFile = $angularHelper.getComponentFileName("${table.view.useCase.name}-${table.view.name}") )
#set ($viewName = $angularHelper.getComponentName($viewFile, '-') )
import { ${viewName}Impl } from './${viewFile}.impl.component';

export abstract class ${className} implements OnInit {
#set($cr = '
')
    ${table.name}Columns = [
        ' ',
#set($i = 0)
#foreach ($column in $table.tableColumns)
#if(!($column.upper>1 || $column.upper==-1))
        '$column.name'#if($i < $table.tableColumns.size()),$cr#end
#end
#set($i = $i + 1)
#end
    ];

    ${table.name}: MatTableDataSource<$table.type.name>;

    @ViewChild('${table.name}Paginator', {static: true}) ${table.name}Paginator: MatPaginator;
    @ViewChild('${table.name}Sort', {static: true}) ${table.name}Sort: MatSort;

    constructor(protected route: ActivatedRoute, 
                protected router: Router#foreach($service in $finalServices),
                protected $stringUtils.uncapitalize($service.name): ${service.name}$suffix#end,
                protected $stringUtils.uncapitalize($viewName): ${viewName}Impl) {

    }

    ngOnInit(): void {}
	
#foreach ($action in $table.tableFormActions)
#foreach ($transition in $action.transitions)
#if ($transition.enteringFinalState)
#if ($transition.target.interUseCaseParameters.size() > 0 )
#set ($x = 0)
#set ($params = "let params = {")
#foreach ($param in $transition.target.interUseCaseParameters)
#if (!$param.complex)
#if($x == 1)
#set ($params = "$params,
	//		$param.name")
#else
#set ($params = "$params
	//	$param.name")
#end
#else
#if($x == 1)
#set ($params = "$params, 
	//	$param.name: { JSON.stringify($param.name) }")
#else
#set ($params = "$params
	//	$param.name: { $param.name: { JSON.stringify($param.name) }")
#end
#end
#set ($x = 1)
#end
#set ($params = "$params
	// };")
	// This params variable is for passing data between routed pages.
	// $params
	// You can pass the data to the views in the '$transition.target.name' Use Case as follows
#foreach ($view in $transition.target.targetUseCase.views)
#set ( $viewFile = $angularHelper.getComponentFileName("${view.useCase.name}-${view.name}") )
#set ($routeName = $stringUtils.deleteWhitespace($stringUtils.replace($viewName, '-', '')))
	// this.router.navigate(['/$routeName'], {state: {params}});
#end
	abstract ${action.triggerName}(#renderAngularTableCommandLinkParametersWithTypes());
#end	
#end
#end
#end
	
}