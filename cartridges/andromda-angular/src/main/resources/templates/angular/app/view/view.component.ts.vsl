// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ($tables = [])
#set ($done = false)
#set ($subscriptions = [])
#foreach($view in $action.targetViews)
#if(!$done)
#set($targetModal = $view)
#set($done = true)
#end
#end
#set ($cr = "
")
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    Signal,
#if($view.popup)
    Inject,
#end
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
##if($targetModal)
import { MatDialog } from '@angular/material/dialog';
##end
import { MatTableDataSource } from '@angular/material/table';
#if($view.popup)
import {MatDialogRef} from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
#end
#set ($base = "${metafacadeWebUtils.toWebResourceName($view.useCase.storeName)}")
#foreach ($service in $view.useCase.controller.allRestControllers)
import { ${service.name}Store } from '${angularUtils.getRestServiceStoreFilePath($service)}';
#end
import { ColumnModel } from '@app/model/column.model';

## Find all the fields in the actions of the view
#set($fields = [])
#set($buttons = [])
#foreach($import in $view.imports)
#if($import.attributes && $import.attributes.size() > 0 && !$import.enumeration)
#if($import.type)
#set ( $rt = $fields.add($import.type) )
#else
#set ( $rt = $fields.add($import) )
#end
#end
#if(${import.hasStereotype("FrontEndComponent")})
import { $import.name } from '@app/components/${import.filePath}';
#elseif ($import.restCount>0 && $stringUtils.isNotBlank($import.restPath))
import { $import.name } from '@app/${import.filePath}';
#elseif($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
#set ($hasPopup = false)
#foreach ($action in $view.actions)
#set ($iter = $action.targetViews.iterator())
#if($iter.hasNext())
#set ($targetView = $iter.next())
#if($targetView.popup)
#set ($hasPopup = true)
## import { $targetView.componentImplementationName } from '@app/${targetView.implementationFilePath}';
#end
#end
#end
#if($hasPopup)
import { MatDialogConfig } from '@angular/material/dialog';
#end
#if($view.popup)
import { ${view.componentImplementationName} } from '@app/${view.implementationFilePath}';
#end

#if ($view.nonTableVariablesPresent)
export class $stringUtils.capitalize(${view.varsFormName}) {
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton)
    $variable.name: $variable.angularTypeName#if($variable.many || $angularUtils.isArray($variable.type.name))[]#end | any#if($variable.many || $angularUtils.isArray($variable.type.name))[]#end;
#end
#end
}

#end
#set($stateParams = [])
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton)
#set ( $rt = $stateParams.add($variable) )
#end
#if($variable.inputButton)
#set ( $rt = $buttons.add($variable.name) )
#end
#if($variable.complex)
#foreach($attribute in $variable.attributes)
#if($attribute.inputButton)
#set ($proId = "$attribute.getFormPropertyId($variable)")
#set ( $rt = $buttons.add($proId) )
#end
#end
#end
#end
#set ( $finalParams = $angularUtils.getFacadeSet($stateParams) )
#set ( $finalButtons = $angularUtils.getFacadeSet($stateParams) )
@Component({
  selector: '${view.selectorName}-base',
  template: ''
})
export abstract class $view.componentName implements OnInit, AfterViewInit, OnDestroy {

#if($view.popup)
    public dialogRef: MatDialogRef<${view.componentImplementationName}> = inject(MatDialogRef);
    dialogData: any;
#end
	${view.formName}: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
    // protected store: Store<${view.useCase.storeName}State> = inject(Store);
###if($targetModal)
    dialog: MatDialog = inject(MatDialog);
##end
#foreach($controller in $view.targetControllers)
    $controller.variableName: ${controller.implementationName} = inject(${controller.implementationName});
    readonly ${controller.variableName}Store = inject(${controller.name}Store);
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName} = inject(${view.useCase.controller.implementationName});
#foreach ($service in $view.useCase.controller.allRestControllers)
    readonly $stringUtils.uncapitalize($service.name)Store = inject(${service.name}Store);
#end
#end
#set ($formVars = "")
#set ($formVarNames = "")
#if ($view.nonTableVariablesPresent)
#set($formNameCaps = ${actionFormCaps})
#set ($count = 1)
#foreach ($field in $view.variables)
// $field $field.table
#if($field.component)
    @ViewChild('$field.name') ${field.name}Component?: $field.type.name;
    ${field.type.beanName}Form: FormGroup = new FormGroup({});
#end
#set ($formVars = "$formVars#if($count == 1), #{end}$field.name: $field.angularTypeName")
#set ($formVarNames = "$formVarNames#if($count == 1), #{end}${view.formName}$.$field.name")
#set ($count = $count + 1)
#if($field.complex)
#if($field.table) 
// $field.tableFormActions
    @ViewChild('$stringUtils.uncapitalize($field.tableComponentName)') $stringUtils.uncapitalize($field.tableComponentName)?: $field.tableComponentImplementationName;
#end
#foreach($attribute in $angularUtils.getTableAttributes($field))
#if($attribute.component)
    @ViewChild('$attribute.name') $attribute.name?: $attribute.type.name;
    ${attribute.beanName}Form: FormGroup = new FormGroup({});
#else
#set ($proId = "$attribute.getFormPropertyId($field)")
#set ($cols = "")
    ${proId}Columns = [
#foreach ($column in $attribute.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
        '$columnName',
        new ColumnModel('$columnName', '$columnName', false),
#end
    ];

    ${proId}ModalColumns = [
        new ColumnModel('actions', 'actions', false),
        ...this.${proId}Columns
    ];

    @ViewChild('${proId}Paginator', {static: true}) ${proId}Paginator?: MatPaginator;
    @ViewChild('${proId}Sort', {static: true}) ${proId}Sort?: MatSort;

    @ViewChild('${proId}ModalPaginator', {static: true}) ${proId}ModalPaginator?: MatPaginator;
    @ViewChild('${proId}ModalSort', {static: true}) ${proId}ModalSort?: MatSort;

    ${proId}$: Observable<${attribute.angularTypeName}[]>;
    ${proId}Subscription?: Subscription;
#set ($rt = $subscriptions.add("${proId}Subscription"))
    $stringUtils.pluralize(${proId})DataSource = new MatTableDataSource<${attribute.angularTypeName}>([]);
    ${proId}SearchField: FormControl;
    ${proId}Select: ${attribute.angularTypeName}#if($attribute.many || $attribute.type.collectionType)[] = []#else = {}#end;

#end
#end
#foreach($attribute in $field.attributes)
#set ($proId = "$attribute.getFormPropertyId($field)")
#if(!$attribute.component && $angularUtils.isComplex($attribute) && !$attribute.type.enumeration && !$attribute.many)
#set ($pluralised = "$stringUtils.pluralize(${proId})")
    $pluralised$: Observable<${attribute.angularTypeName}[]>;
    ${pluralised}Subscription?: Subscription;
#set ($rt = $subscriptions.add("${pluralised}Subscription"))
    ${pluralised}DataSource = new MatTableDataSource<${attribute.angularTypeName}>([]);
    ${proId}Select: $attribute.angularTypeName = new ${attribute.angularTypeName}();
    ${proId}SearchField: FormControl = new FormControl();

    ${proId}ModalColumns = [
        new ColumnModel('actions', 'actions', false),
#foreach ($column in $attribute.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
        new ColumnModel('$columnName', '$columnName', false),
#end
    ];

#end
#end
#if(!$field.table)
#foreach( $attribute in $field.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = Object.keys(this.${attribute.name}T);
#elseif($attribute.inputSelect || $attribute.inputMultibox || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($field)})
#set($ret = $selections.add($attribute.type))
    $backingListName: SelectItem[] = [];
#end
#end
#else
#if($field.type.enumeration)
    ${field.name}T = $field.type.name;
    ${field.name}Options = Object.keys(this.${field.name}T);
#elseif($field.inputSelect || $field.inputMultibox)
#set($ret = $selections.add($field.type))
    ${field.backingListName}: $field.angularTypeName[] = [];

#elseif($angularUtils.isComplex($field) && !$field.type.enumeration && !$field.many)
    ${field.name}Select: $field.angularTypeName = null;
#end
#end
#elseif($field.type.enumeration)
    ${field.name}T = $field.type.name;
    ${field.name}Options = Object.keys(this.${field.name}T);
#elseif($field.inputSelect || $field.inputMultibox)
#set($ret = $selections.add($field.type))
    ${field.backingListName}: $field.angularTypeName[] = [];

#elseif($angularUtils.isComplex($field) && !$field.type.enumeration && !$field.many)
    ${field.name}Select: $field.angularTypeName = null;
#end
#end
#end
#foreach($param in $finalParams)
#if(!$param.component)
    ${param.name}$: Signal<$param.angularTypeName>;
#end
#end
    messages: Signal<any>;
    success: Signal<boolean>;
    loading: Signal<boolean>;
    error: Signal<boolean>;
    selected: any = null;
#foreach ($action in $view.actions)
#if($action.displayCondition)
    $angularUtils.getDisplayConditionDeclaration($action.displayCondition);
#end
#end

    ${view.formName}ValueSubscription?: Subscription;

    constructor(#if($view.popup)@Inject(MAT_DIALOG_DATA) data: any#{end}) {

#foreach ($field in $view.variables)
#if($field.complex)
#foreach($attribute in $angularUtils.getTableAttributes($field))
#if(!$attribute.component)
        this.$attribute.getFormPropertyId($field)SearchField = new FormControl();
#end
#end
#end
#end
    }

    abstract beforeOnInit(#if ($view.nonTableVariablesPresent)form: $stringUtils.capitalize(${view.varsFormName})#end):#if ($view.nonTableVariablesPresent) $stringUtils.capitalize(${view.varsFormName})#else void#end;
	
    ngOnInit() {
        #if ($view.nonTableVariablesPresent)let form: $stringUtils.capitalize(${view.varsFormName}) = #{end}this.beforeOnInit(#if ($view.nonTableVariablesPresent)new $stringUtils.capitalize(${view.varsFormName})#end);
        this.${view.formName} = this.newForm(#if ($view.nonTableVariablesPresent)form#end);

        this.${view.formName}ValueSubscription = this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
#foreach ($field in $view.variables)
#if($field.component)
        this.${field.type.beanName}Form = this.${field.name}Control;
#end
#end
    }

    handleFormChanges(change: any): void {
        
    }

    ${view.formName}Reset() {

        ## this.store.dispatch(${view.useCase.storeName}Actions.${stringUtils.uncapitalize(${view.useCase.storeName})}Reset());
        this.${view.formName}.reset()
        this.${view.formName}.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
    }

    newForm(#if ($view.nonTableVariablesPresent)${view.varsFormName}$: $stringUtils.capitalize(${view.varsFormName})#end): FormGroup {
        return this.formBuilder.group({
#if ($view.nonTableVariablesPresent)
#foreach( $variable in $view.variables )
#if(!$variable.table && !$variable.inputButton)
#*  *##if($variable.complex)
            $variable.name: this.create$stringUtils.capitalize($variable.name)Form(${view.varsFormName}$?.${variable.name}),
#*  *##else
#set ($validators = "")
#if($variable.required || $variable.inputEmail || $variable.minLength || $variable.maxLength || $variable.min || $variable.max)
#set ($validators = ", [")
#if($variable.required)
#set ($validators = "${validators}Validators.required, ")
#end
#if($variable.inputEmail)
#set ($validators = "${validators}Validators.email, ")
#end
#if($variable.minLength)
#set ($validators = "${validators}Validators.minLength($variable.minLength), ")
#end
#if($variable.maxLength)
#set ($validators = "${validators}Validators.maxLength($variable.maxLength), ")
#end
#if($variable.min)
#set ($validators = "${validators}Validators.min($attribute.min), ")
#end
#if($variable.max)
#set ($validators = "${validators}Validators.max($attribute.max), ")
#end
#set ($validators = "$validators]")
#end
#set ($val = "${view.varsFormName}$.$variable.name")
            $variable.name: [{value: ${view.varsFormName}$?.$variable.name, disabled: false}$validators],
#*  *##end
#end
#end
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): [''],
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
        if(this.${view.formName}ValueSubscription) {
            this.${view.formName}ValueSubscription.unsubscribe();
        }
    }

#foreach ($action in $view.actions)
#set($params = "")
#set($paramsWithTypes = "")
#foreach($field in $action.forwardParameters)
#set ($params = "$params#if($params.length() > 0), #{end}this.${action.triggerName}${stringUtils.capitalize($field.name)}")
#set ($paramsWithTypes = "$paramsWithTypes#if($paramsWithTypes.length() > 0), #{end}${field.name}: $field.angularTypeName")
#end
#set ($actionFormCaps = $stringUtils.capitalize($action.formName))
#if (!$action.tableLink)
#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")

    /**
     * This method may be overwritten
     */
    ${beforeAction}(form: any): void {}

    /**
     * This method may be overwritten
     */
#set ($iter = $action.targetViews.iterator())
#set ($hadNext = false)
#if($iter.hasNext())
#set ($hadNext = true)
#set ($targetView = $iter.next())
#end
#if($hadNext && $targetView.popup)
    get${actionFormCaps}DialogConfig(#if(!$action.formFields.empty)data: any#{end}): any{
        return {
            data: {
#foreach($p in $action.parameters)
#if(!$parameter.inputButton)
                $p.name: data?.$p.name,
#end
#end
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    ${afterAction}(dialogData: any): void {
        
    }

#else
    ${afterAction}(form: any): void {}

#end
#foreach($field in $action.forwardParameters)
    /**
     * This method may be overwritten
     */
#set ($typeName = $angularUtils.getDatatype($field.type.name))
    get ${action.triggerName}${stringUtils.capitalize($field.name)}(): $typeName {
#set ($matchingParam = $angularUtils.getActionMatchingParameter($field, $action))
#if($matchingParam)
        return {} as $typeName;
#else
#set ($matchingParam = $angularUtils.getViewMatchingParameter($field, $view))
#if($matchingParam)
        return this.${view.formName}?.get('${matchingParam.name}')?.value as $typeName;
#else
        return {} as $typeName;
#end
#end
    }

#end
    ${action.triggerName}(): void {

        let form: any = {
#foreach($field in $action.forwardParameters)
            $field.name: this.${action.triggerName}${stringUtils.capitalize($field.name)},
#end
        };

        this.${beforeAction}(form);

#if(!$action.formFields.empty)
#set($params = "")
#foreach($field in $action.forwardParameters)
#set ($params = "$params#if($params.length() > 0), #{end}form.${action.triggerName}${stringUtils.capitalize($field.name)}")
#end
        this.${action.controller.variableName}.${action.triggerName}(#if(!$action.forwardParameters.empty)form#end);
#end
#set ($iter = $action.targetViews.iterator())
#set ($hadNext = false)
#if($iter.hasNext())
#set ($hadNext = true)
#set ($targetView = $iter.next())
#end
#if($hadNext && $targetView.popup)
        let dialogConfig = this.get${actionFormCaps}DialogConfig(
            {
#foreach($field in $action.forwardParameters)
#if(!$field.inputButton)
            $field.name: this.${action.triggerName}${stringUtils.capitalize($field.name)},
#end
#end
            }
        );
        const dialogRef = this.dialog.open($targetView.componentImplementationName, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.${afterAction}(result?.dialogData);
        });
#else
        this.${afterAction}(form);
#end
    }

#end
#end
#if ($view.nonTableVariablesPresent)
    get ${view.varsFormName}Control(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

#foreach ($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton)
#if($angularUtils.isTable($variable) || $variable.many || $variable.type.collectionType)
#set ($controlType = "FormArray")
#set ($controlGet = "Array")
#elseif($variable.complex)
#set ($controlType = "FormGroup")
#set ($controlGet = "Group")
    create$stringUtils.capitalize($variable.name)Form($variable.name?: $variable.angularTypeName): FormGroup {
        return this.formBuilder.group({
#foreach($attribute in $variable.attributes)
#if(!$attribute.inputButton)
#if($angularUtils.isTable($attribute) || $attribute.many || $attribute.type.collectionType)
#if($angularUtils.isSimpleType($attribute.type))
            $attribute.name: this.formBuilder.array(${variable.name}?.$attribute.name ? ${variable.name}.$attribute.name : []),
#else
            $attribute.name: this.create${attribute.type.name}Array(${variable.name}?.$attribute.name),
#end
#elseif(!$angularUtils.isSimpleType($attribute.type))
            $attribute.name: this.create${attribute.type.name}Group(${variable.name}?.$attribute.name),
#else
#set ($validators = "")
#if($attribute.required || $attribute.inputEmail || $attribute.minLength || $attribute.maxLength || $attribute.min || $attribute.max)
#set ($validators = ", [")
#if($attribute.required)
#set ($validators = "${validators}Validators.required, ")
#end
#if($attribute.inputEmail)
#set ($validators = "${validators}Validators.email, ")
#end
#if($attribute.minLength)
#set ($validators = "${validators}Validators.minLength($attribute.minLength), ")
#end
#if($attribute.maxLength)
#set ($validators = "${validators}Validators.maxLength($attribute.maxLength), ")
#end
#if($attribute.min)
#set ($validators = "${validators}Validators.min($attribute.min), ")
#end
#if($attribute.max)
#set ($validators = "${validators}Validators.max($attribute.max), ")
#end
#set ($validators = "$validators]")
#end
#set ($val = "${variable.name}.${attribute.name}")
            $attribute.name: [{value: ${variable.name}?.$attribute.name, disabled: false}$validators],
#end
#end
#end
        });
    }

#else
#set ($controlType = "FormControl")
#set ($controlGet = "Item")
#end
    get ${variable.name}Control(): $controlType {
        return this.get${controlGet}Control('$variable.name') as $controlType;
    }

    get ${variable.name}(): $variable.angularTypeName#if($variable.many || $angularUtils.isArray($variable.type.name))[]#end {
        return this.${variable.name}Control.value;
    }

#if($variable.inputMultibox)
    on$stringUtils.capitalize($variable.name)Change($event: MatSelectChange) {
        if(!this.${variable.name}.includes($event.value)) {
            this.${variable.name}Control.push(new FormControl($event.value));
        }
        $event.source.value = '';
    }

    get$stringUtils.capitalize($variable.name)Label(value: string): string | undefined {
        return this.${variable.backingListName}BackingList.find(item => item.value === value)?.label;
    }

#end
#if ($variable.complex)
#foreach($attribute in $variable.attributes)
#if(!$attribute.component)
#if($angularUtils.isTable($attribute) || $attribute.many || $attribute.type.collectionType)
#set ($controlType = "FormArray")
#elseif($angularUtils.isComplex($attribute))
#set ($controlType = "FormGroup")
#else
#set ($controlType = "FormControl")
#end
#set ($propertyId = $attribute.getFormPropertyId($variable))
    get ${propertyId}Control(): $controlType {
        return this.${variable.name}Control.get('$attribute.name') as $controlType;
    }

    get ${propertyId}(): $attribute.angularTypeName#if($attribute.many || $angularUtils.isArray($attribute.type.name))[]#end {
        return this.${propertyId}Control.value;
    }

#if($angularUtils.isComplex($attribute) && !$attribute.type.enumeration && !$attribute.inputSelect && !$attribute.inputMultibox)
#set ($propertyId = $attribute.getFormPropertyId($variable))

    ${propertyId}AddDialog(): void {
    }

    
    ${propertyId}Search(): void {
    }
#if($angularUtils.isTable($attribute))
#set ($changeType = "MatCheckboxChange")

    handleDeleteFrom$stringUtils.capitalize(${propertyId})($attribute.name: $attribute.angularTypeName): void {}
    
    deleteFrom$stringUtils.capitalize(${propertyId})(index: number) {
        this.handleDeleteFrom$stringUtils.capitalize(${propertyId})(this.${propertyId}[index]);
        this.${propertyId}Control.removeAt(index);
    }

    doEdit$stringUtils.capitalize(${propertyId})($attribute.name: $attribute.angularTypeName) {
    }

    handle$stringUtils.capitalize($propertyId)Selected(event: $changeType, data: $attribute.angularTypeName): void {}
    
    ${propertyId}Selected(event: $changeType, data: $attribute.angularTypeName): void {
        if(event.checked) {
            this.${propertyId}Select.push(data);
        } else {
            const key: string = Object.keys(data)[0];
            let tmp = this.${propertyId}Select.filter((d: any) => d[key as keyof typeof d] !== data[key as keyof typeof data]);
            this.${propertyId}Select = tmp;
        }

        this.handle$stringUtils.capitalize(${propertyId})Selected(event, data);
    }

    addTo$stringUtils.capitalize(${propertyId})(data: $attribute.angularTypeName) {
        this.${propertyId}Control.push(this.create$stringUtils.capitalize($attribute.type.name)Group(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelected$stringUtils.capitalize(${propertyId})(): void {
        this.${propertyId}Select.forEach((data) => {
            const key: string = Object.keys(data)[0];
            const found = this.${propertyId}.find((d: $attribute.angularTypeName) => d[key as keyof typeof d] === data[key as keyof typeof data])
            if(!found) {
                this.addTo$stringUtils.capitalize(${propertyId})(data);
            }
        });
    }
#elseif(!$attribute.many)
#set ($changeType = "MatRadioChange")

    handle$stringUtils.capitalize($propertyId)Selected(event: $changeType, data: $attribute.angularTypeName): void {}
    
    ${propertyId}Selected(event: $changeType, data: $attribute.angularTypeName): void {
        
        this.${propertyId}Select = data;
        this.handle$stringUtils.capitalize(${propertyId})Selected(event, data);
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelected$stringUtils.capitalize(${propertyId})(): void {
        this.${variable.name}Control.patchValue({$attribute.name: this.${propertyId}Select});
    }

    ${propertyId}Clear(): void {
        this.${variable.name}Control.patchValue({$attribute.name: new ${attribute.angularTypeName}()});
    }
#end

#end
#if($attribute.inputMultibox)
    /**
     * Add the selected item to the list only if it already exist.
     * Make sure to reset the selection.
     * @param $event
     */
    on$stringUtils.capitalize($propertyId)Change($event: MatSelectChange) {
        if(!this.${propertyId}.includes($event.value)){
            this.${propertyId}Control.push(new FormControl($event.value));
        }
        $event.source.value='';
    }

    /**
     * Retrieve the label to be displayes
     * @param value 
     * @returns 
     */
    get$stringUtils.capitalize($propertyId)Label(value: string): string | undefined {
        return this.${propertyId}BackingList.find(item => item.value === value)?.label;
    }

    /**
     * Delete an item from the list
     * @param index 
     */
    ${propertyId}Delete(index: number) {
        this.${propertyId}Control.removeAt(index);
    }

#end
#end
#end
#end
#end
#end
#end
    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

    set$stringUtils.capitalize(${view.formName})Value(form: any) {
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton)
        if(form.$variable.name) {
#if($angularUtils.isTable($variable) || $variable.many || $variable.type.collectionType)
            this.${view.formName}.setControl('$variable.name', this.set$stringUtils.capitalize($variable.name)(form.$variable.name));
#elseif($variable.complex)
            this.${view.formName}.setControl('$variable.name', this.create$stringUtils.capitalize($variable.name)Form(form.$variable.name));
#else
            this.${view.formName}?.get('$variable.name')?.setValue(form.$variable.name);
#end
        }
#end
#end
    }

#foreach($table in $view.tables)
    set$stringUtils.capitalize(${table.name})(${table.name}: ${table.angularTypeName}): FormArray {

        const ${table.name}Array = new FormArray([] as any);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach((item) => {
            ${table.name}Array.push(this.create$stringUtils.capitalize($table.name)Group(item));
        });

        this.${view.formName}.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }

    get ${table.name}Control(): FormArray {
        return this.getArrayControl('$table.name');
    }

    get ${table.name}(): $table.angularTypeName[] {
        return this.${table.name}Control.value;
    }

    deleteFrom$stringUtils.capitalize($table.name)(index: number) {
        this.${table.name}Control.removeAt(index);
    }

    addTo$stringUtils.capitalize($table.name)(data: any) {
        this.${table.name}Control.push(this.create$stringUtils.capitalize($table.name)Group(data));
    }

    create$stringUtils.capitalize($table.name)Group(data: any): FormGroup {
        return this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
            $columnName: [data?.$columnName#if($column.type.dateType).toISOString()#end],
#end
        });
    }

    add${stringUtils.capitalize($table.name)}DummyData() {
        this.${table.name}Control.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 1)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-1'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));

        this.${table.name}Control.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper > 1 || $column.upper == -1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 2)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-2'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));
    }

#end
#set($fieldSet = $angularUtils.getFacadeSet($fields))
#foreach($field in $fieldSet)
#if(!$field.inputButton)
#if($field.type)
#set ($typeName = "$field.type.name")
#else
#set ($typeName = "$field.name")
#end
    create${typeName}Group(value?: $typeName): FormGroup { 
        return this.formBuilder.group({
#foreach($attribute in $field.attributes)
#if($angularUtils.isSimpleType($attribute) && !$attribute.inputButton)
            $attribute.name: [value?.$attribute.name],
#end
#end
        });
    }

    create${typeName}Array(values?: $typeName[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.create${typeName}Group(value)))

            return formArray;
        } else {
            return new FormArray([] as any);
        }
    }

#end
#end
#if($view.popup)
    handleCancelDialog(): void {}

    cancelDialog() {
        this.handleCancelDialog();
        this.dialogRef.close({event: 'Cancel'});
    }

    handleDialogDone(data: any): any {
        return data;
    }

    dialogDone() {
        this.dialogRef.close({
            dialogData: this.handleDialogDone(this.${view.formName}.value)
        });
    }

#end
#foreach($button in $buttons)
    on${stringUtils.capitalize(${button})}Click() {}

#end
}
