// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ($cr = "
")
import { Component, OnInit, Injector, ViewChild, Input, Output, EventEmitter, AfterViewInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { ${view.useCase.actionClassName}State } from './store/${metafacadeWebUtils.toWebResourceName($view.useCase.name)}.reducer';

## Find all the fields in the actions of the view
#set($fieldSet =  $angularUtils.getFacadeSet($view.allFormFields))
#foreach($import in $view.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end

#foreach ($action in $view.actions)
#if (!$action.tableLink)
export class $stringUtils.capitalize($action.formName) {
#foreach($parameter in $action.formFields)
    $parameter.name: $parameter.angularTypeName;
#end
}
#end

#end
#if ($view.nonTableVariablesPresent)
export class $stringUtils.capitalize(${view.varsFormName}) {
#foreach($variable in $view.variables)
#if(!$variable.table)
    $variable.name: $variable.angularTypeName;
#end
#end
}

#end
@Component({
  selector: '${view.selectorName}-base',
  template: ''
})
export abstract class $view.componentName implements OnInit {

#foreach ( $variable in $view.variables )
#if($angularUtils.isComplex($variable))
#foreach($attribute in $angularUtils.getTableAttributes($variable))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#end
#end
	${view.formName}: FormGroup;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<${view.useCase.actionClassName}State>;
#foreach($controller in $view.targetControllers)
    $controller.variableName: ${controller.implementationName};
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName};
#foreach ($service in $view.useCase.controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
#end
#foreach ($field in $fieldSet)
#if($field.complex)
#foreach($attribute in $angularUtils.getTableAttributes($field))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#foreach( $attribute in $field.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = Object.keys(this.${attribute.name}T);
#elseif($attribute.inputSelect || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($field)})
#set($ret = $selections.add($attribute.type))
    $backingListName: Array<SelectItem> = [];
#end
#end
#else
#if($field.type.enumeration)
    ${field.name}T = $field.type.name;
    ${field.name}Options = Object.keys(this.${field.name}T);
#elseif($field.inputSelect)
#set($ret = $selections.add($field.type))
    ${field.backingListName}: Array<$angularUtils.getDatatype($field.type.name)> = [];
#end
#end
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName} = injector.get(${view.useCase.controller.implementationName});
#foreach ($service in $view.useCase.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
#end
#foreach($controller in $view.targetControllers)
        this.$controller.variableName = injector.get(${controller.implementationName});
#end
        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.${view.formName} = this.newForm();

        this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    abstract handleFormChanges(change: any): void;

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
        this.doNgAfterViewInit();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
#if($fieldSet.size() > 0)
#foreach ($field in $fieldSet)
#if(!$field.action.tableLink)
#*  *##if($field.complex)
#*    *##set($name = $stringUtils.replaceChars(${field.action.trigger.name}, '\\ ', ''))
            $field.name: this.rxFormBuilder.group(new $field.type.name),
#*  *##else
            $field.name: [],
#*  *##end
#end
#end
#end
#if ($view.nonTableVariablesPresent)
            ${view.varsFormName}: this.formBuilder.group({
#foreach( $variable in $view.variables )
#if(!$variable.table)
#*  *##if($variable.complex)
                $variable.name: this.rxFormBuilder.group(new $variable.type.name),
#*  *##else
                $variable.name: [],
#*  *##end
#end
#end
            }),
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): [''],
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

#foreach ($action in $view.actions)
#if (!$action.tableLink)
    get ${action.formName}(): $stringUtils.capitalize($action.formName) {

        let form: $stringUtils.capitalize($action.formName) = new $stringUtils.capitalize($action.formName)();
#foreach( $parameter in $action.parameters )
#set ($tp = '')
#if( $parameter.many)
#set ($tp = 'getArrayControl')
#elseif( $parameter.complex)
#set ($tp = 'getGroupControl')
#else
#set ($tp = 'getItemControl')
#end
        form.$parameter.name = this.${tp}('$parameter.name').value;
#end

        return form;
    }
      
    /**
     * This method may be overwritten
     */
    abstract afterSet$stringUtils.capitalize(${action.formName})(form: $stringUtils.capitalize($action.formName)): void;

    set$stringUtils.capitalize(${action.formName})(form: $stringUtils.capitalize($action.formName)) {

#foreach($parameter in $action.parameters)
        this.${view.formName}.get('$parameter.name').setValue(form.$parameter.name);
#end

        this.afterSet$stringUtils.capitalize(${action.formName})(form);
    }

#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")

    /**
     * This method may be overwritten
     */
    abstract ${beforeAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void;

    /**
     * This method may be overwritten
     */
    abstract ${afterAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void;
    
    ${action.triggerName}(): void {
#if(!$action.formFields.empty)
        let form: $stringUtils.capitalize($action.formName) = this.${action.formName};
#end
        this.${beforeAction}(#if(!$action.formFields.empty)form#end);

#if(!$action.formFields.empty)
        this.${action.controller.variableName}.${action.triggerName}(#if(!$action.formFields.empty)form#else{}#end);
#end
        this.${afterAction}(#if(!$action.formFields.empty)form#end);
    }

#if(!$action.formFields.empty)
    get$stringUtils.capitalize($action.formName)(value: any): $stringUtils.capitalize($action.formName) {
        
        let form: $stringUtils.capitalize($action.formName) = new $stringUtils.capitalize($action.formName)();
#foreach($parameter in $action.parameters)

        if(value?.$parameter.name) {
            form.$parameter.name = value?.$parameter.name;
        }
#end

        return form;
    }
#end

#end
#end
#if ($view.nonTableVariablesPresent)
#set ($complex = [])
#set ($simple = [])
#foreach ($variable in $view.variables)
#if(!$variable.table)
#if ($variable.complex)
#set($rt = $complex.add($variable))
#else
#set($rt = $simple.add($variable))
#end
#end
#end

    get ${view.varsFormName}(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

    /**
     * This method may be overwritten
     */
    abstract afterSet$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)): void;

    set$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)) {

#foreach($variable in $view.variables)
#if(!$variable.table)
        this.${view.varsFormName}.get('$variable.name').setValue(form.$variable.name);
#end
#end

        this.afterSet$stringUtils.capitalize(${view.varsFormName})(form);
    }

#foreach ($variable in $complex)
#set ($tables = $angularUtils.getTableAttributes($variable))
    get ${variable.name}(): FormGroup {
        return this.getGroupControl('${view.varsFormName}').get('$variable.name') as FormGroup;
    }

#foreach ($table in $tables)
    get ${table.name}(): FormArray {
        return this.${variable.name}.get('$table.name') as FormArray;
    }

#end
#end
#end

    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

#foreach ( $parameter in $fieldSet )
#if($parameter.complex)
#foreach($attribute in $parameter.attributes)
#if($angularUtils.isTable($attribute) || $attribute.many)
    get ${attribute.name}(): FormArray {
        return <FormArray>this.getArrayControl('$parameter.name').get('$attribute.name');
    }

#elseif($attribute.complex)
    get ${attribute.name}(): FormGroup {
        return <FormGroup>this.getGroupControl('$parameter.name').get('$attribute.name');
    }

#end
#end
    get ${parameter.name}(): FormGroup {
        return <FormGroup>this.getGroupControl('$parameter.name');
    }

#end
#end
#foreach($table in $view.tables)
    set$stringUtils.capitalize(${table.name})(${table.name}: ${table.angularTypeName}[]): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach((item: ${table.angularTypeName}) => {
            ${table.name}Array.push(this.rxFormBuilder.group(item))
        });

        this.${view.formName}.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }

    get ${table.name}(): FormArray {
        return this.getArrayControl('$table.name');
    }

#end
#foreach($table in $view.tables)

    add${stringUtils.capitalize($table.name)}DummyData() {
        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 1)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-1'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));

        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper > 1 || $column.upper == -1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 2)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-2'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));
    }
#end
}
