// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${view.packageName}), '\\.', '\\/') )
#set ( $fileName = $angularHelper.getComponentFileName("${view.name}"))
import { Component, OnInit, Injector} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray } from '@angular/forms';
## Find all the fields in the actions of the view
#set ( $fields = [] )
#foreach ( $action in $view.actions )
#foreach ( $field in $action.formFields )
#set ( $rt = $fields.add($field))
#end
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ( $rt = $finalFields.add($finalField) )
#end
#set ( $attr = [] )
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
#set ( $actionPath = "$stringUtils.replaceChars($stringUtils.lowerCase(${action.packageName}), '\\.', '\\/')" )
#set ( $actionName = $angularHelper.getComponentFileName("$action.name") )
import { $angularHelper.getComponentName($action.name, "-")ImplComponent } from './${actionName}.impl.component';
#foreach ($field in $action.formFields)
#if (!(${field.action} && $field.action.tableLinkName))
#if ($field.complex)
#set ( $rt = $attr.add($field ))
#end
#end
#end
#end
#end
#set ( $finalAttr = [] ) ## No repetisions
#foreach ( $at in $angularHelper.getFacadeSet($attr) )
#set ($rt = $finalAttr.add($at) )
#end
#foreach ($a in $angularHelper.getImports($finalAttr, $view.packageName, ""))
$a
#end

#set ($tmpName = ${angularHelper.getComponentName("$fileName", "-")})
@Component({
  selector: '${fileName}-base',
  template: ''
})
export abstract class ${tmpName}Component implements OnInit {

	protected ${stringUtils.uncapitalize($tmpName)}Form: FormGroup;

    protected route: ActivatedRoute;
    protected router: Router;
	protected formBuilder: RxFormBuilder;

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(RxFormBuilder);
    }

	abstract beforeOnInit();
	
    ngOnInit() {
		this.beforeOnInit();
		
		this.afterOnInit();
    }

	abstract afterOnInit();

	getItemControl(name): FormControl {
		return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormControl;
	}

	getGroupControl(name): FormGroup {
		return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormGroup;
	}

	getArrayControl(name): FormArray {
		return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormArray;
	}
}
