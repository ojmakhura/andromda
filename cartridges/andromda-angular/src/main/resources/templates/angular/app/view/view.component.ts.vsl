// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
// $view.tables
#set ($tables = [])
#set ($done = false)
#set ($subscriptions = [])
#foreach($view in $action.targetViews)
#if(!$done)
#set($targetModal = $view)
#set($done = true)
#end
#end
#set ($cr = "
")
import { 
    Component, 
    OnInit, 
    inject, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    signal,
    Signal,
#if($view.popup)
    Inject,
#end
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { SearchObject } from '@app/model/search-object';
##if($targetModal)
import { MatDialog } from '@angular/material/dialog';
##end
import { MatTableDataSource } from '@angular/material/table';
import { TableComponent } from '@app/components/table/table.component';
#if($view.popup)
import {MatDialogRef} from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
#end
#set ($base = "${metafacadeWebUtils.toWebResourceName($view.useCase.storeName)}")
#foreach ($service in $view.useCase.controller.allRestControllers)
import { ${service.name}Store } from '${angularUtils.getRestServiceStoreFilePath($service)}';
#end
import { ColumnModel } from '@app/model/column.model';

## Find all the fields in the actions of the view
#set($fields = [])
#set($buttons = [])
#foreach($import in $view.imports)
#if($import.attributes && $import.attributes.size() > 0 && !$import.enumeration)
#if($import.type)
#set ( $rt = $fields.add($import.type) )
#else
#set ( $rt = $fields.add($import) )
#end
#end
#if(${import.hasStereotype("FrontEndComponent")})
import { $import.implementationName } from '@app/components/${import.implementationFilePath}';
#elseif ($import.restCount>0 && $stringUtils.isNotBlank($import.restPath))
#if(${import.filePath})
import { $import.name } from '@app/${import.filePath}';
#end
#elseif($import.tableComponentImplementationName)
// import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
#if(${import.filePath})
import { $import.name } from '@app/${import.filePath}';
#end
#end
#end
#set ($hasPopup = false)
#foreach ($action in $view.actions)
#set ($iter = $action.targetViews.iterator())
#if($iter.hasNext())
#set ($targetView = $iter.next())
#if($targetView.popup)
#set ($hasPopup = true)
## import { $targetView.componentImplementationName } from '@app/${targetView.implementationFilePath}';
#end
#end
#end
#if($hasPopup)
import { MatDialogConfig } from '@angular/material/dialog';
import { DialogComponent } from '@app/components/dialog/dialog.component';
#end
#if($view.popup)
import { ${view.componentImplementationName} } from '@app/${view.implementationFilePath}';
#end

#if ($view.nonTableVariablesPresent)
export class $stringUtils.capitalize(${view.varsFormName}) {
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton && !$variable.component)
    $variable.name: $variable.getterSetterTypeName | any#if($variable.many || $angularUtils.isArray($variable.type.name))[]#end;
#end
#end
}

#end
#set($stateParams = [])
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton)
#set ( $rt = $stateParams.add($variable) )
#end
#if($variable.inputButton)
#set ( $rt = $buttons.add($variable.name) )
#end
#if($variable.complex)
#foreach($attribute in $variable.attributes)
#if($attribute.inputButton)
#set ($proId = "$attribute.getFormPropertyId($variable)")
#set ( $rt = $buttons.add($proId) )
#end
#end
#end
#end
#set ( $finalParams = $angularUtils.getFacadeSet($stateParams) )
#set ( $finalButtons = $angularUtils.getFacadeSet($stateParams) )
@Component({
  selector: '${view.selectorName}-base',
  template: ''
})
export abstract class $view.componentName implements OnInit, AfterViewInit, OnDestroy {

#if($view.popup)
    public dialogRef: MatDialogRef<${view.componentImplementationName}> = inject(MatDialogRef);
    dialogData: any;
#end
	${view.formName}: FormGroup = new FormGroup({});
    hide: boolean = false;
    protected route: ActivatedRoute = inject(ActivatedRoute);
    protected router: Router = inject(Router);
    protected formBuilder: FormBuilder = inject(FormBuilder);
    protected useCaseScope: UseCaseScope = inject(UseCaseScope);
###if($targetModal)
    dialog: MatDialog = inject(MatDialog);
##end
#foreach($controller in $view.targetControllers)
    $controller.variableName: ${controller.implementationName} = inject(${controller.implementationName});
    readonly ${controller.variableName}Store = inject(${controller.name}Store);
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName} = inject(${view.useCase.controller.implementationName});
#foreach ($service in $view.useCase.controller.allRestControllers)
    readonly $stringUtils.uncapitalize($service.name)Store = inject(${service.name}Store);
#end
#end
#set ($formVars = "")
#set ($formVarNames = "")
#if ($view.nonTableVariablesPresent)
#set($formNameCaps = ${actionFormCaps})
#set ($count = 1)
#foreach ($field in $view.variables)
#renderAngularTypescriptParams($field "" true true "    ")

#end
#end

#foreach($import in $view.imports)
#if($import.enumeration)
    ${import.name}T: any = $import.name;
    ${import.name}Options = Object.keys(this.${import.name}T);
#end
#end
## #foreach($param in $finalParams)
## #if(!$param.component)
##    ${param.name}$: Signal<$param.getterSetterTypeName>;
## #end
## #end
    messages: Signal<any> = signal({});
    success: Signal<boolean> = signal(false);
    loading: Signal<boolean> = signal(false);
    error: Signal<boolean> = signal(false);
    selected: any = null;
#foreach ($action in $view.actions)
#if($action.displayCondition)
    $angularUtils.getDisplayConditionDeclaration($action.displayCondition);
#end
#end

    ${view.formName}ValueSubscription?: Subscription;

    constructor(#if($view.popup)@Inject(MAT_DIALOG_DATA) data: any#{end}) {

#foreach ($field in $view.variables)
#if($field.complex)
#foreach($attribute in $angularUtils.getTableAttributes($field))
#if(!$attribute.component)
#renderAngularTypescriptConstructor($attribute "" true "           ")
#end
#end
#end
#end
    }

    abstract beforeOnInit(#if ($view.nonTableVariablesPresent)form: $stringUtils.capitalize(${view.varsFormName})#end):#if ($view.nonTableVariablesPresent) $stringUtils.capitalize(${view.varsFormName})#else void#end;
	
    ngOnInit() {
        #if ($view.nonTableVariablesPresent)let form: $stringUtils.capitalize(${view.varsFormName}) = #{end}this.beforeOnInit(#if ($view.nonTableVariablesPresent)new $stringUtils.capitalize(${view.varsFormName})#end);
        this.${view.formName} = this.newForm(#if ($view.nonTableVariablesPresent)form#end);

        this.${view.formName}ValueSubscription = this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    ${view.formName}Reset() {

        ## this.store.dispatch(${view.useCase.storeName}Actions.${stringUtils.uncapitalize(${view.useCase.storeName})}Reset());
        this.${view.formName}.reset()
        this.${view.formName}.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
    }

    newForm(#if ($view.nonTableVariablesPresent)${view.varsFormName}$: $stringUtils.capitalize(${view.varsFormName})#end): FormGroup {
        return this.formBuilder.group({
#if ($view.nonTableVariablesPresent)
#foreach( $variable in $view.variables )
#if(!$variable.table && !$variable.inputButton && !$variable.component && !$variable.inputTable)
#renderInitForm($variable "" "           ")
#end
#end
#end

        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
        if(this.${view.formName}ValueSubscription) {
            this.${view.formName}ValueSubscription.unsubscribe();
        }
    }

#foreach ($action in $view.actions)
#set($params = "")
#set($paramsWithTypes = "")
#foreach($field in $action.forwardParameters)
#set ($params = "$params#if($params.length() > 0), #{end}this.${action.triggerName}${stringUtils.capitalize($field.name)}")
#set ($paramsWithTypes = "$paramsWithTypes#if($paramsWithTypes.length() > 0), #{end}${field.name}: $field.getterSetterTypeName")
#end
#set ($actionFormCaps = $stringUtils.capitalize($action.formName))
#if (!$action.tableLink)
#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")

    /**
     * This method may be overwritten
     */
    ${beforeAction}(form: any): void {}

    /**
     * This method may be overwritten
     */
#set ($iter = $action.targetViews.iterator())
#set ($hadNext = false)
#if($iter.hasNext())
#set ($hadNext = true)
#set ($targetView = $iter.next())
#end
#if($hadNext && $targetView.popup)
#foreach($targetAction in $targetView.actions)
    ${targetAction.triggerName}(dialogData: any) {}

#end
    do${actionFormCaps}DialogDone(dialogData: any): void {
    }

    do${actionFormCaps}DialogCancel(dialogData: any): void {
    }

    get${actionFormCaps}DialogConfig(#if(!$action.formFields.empty)data: any#{end}): any{
        return {
            data: {
#foreach($p in $action.parameters)
#if(!$parameter.inputButton)
                $p.name: data?.$p.name,
#end
#end
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    ${afterAction}(dialogData: any): void {
        
    }

#else
    ${afterAction}(form: any): void {}

#end
#foreach($field in $action.forwardParameters)
    /**
     * This method may be overwritten
     */
#set ($typeName = $angularUtils.getDatatype($field.getterSetterTypeName))
    get ${action.triggerName}${stringUtils.capitalize($field.name)}(): $typeName {
#set ($matchingParam = $angularUtils.getActionMatchingParameter($field, $action))
#if($matchingParam)
        return {} as $typeName;
#else
#set ($matchingParam = $angularUtils.getViewMatchingParameter($field, $view))
#if($matchingParam)
        return this.${view.formName}?.get('${matchingParam.name}')?.value as $typeName;
#else
        return {} as $typeName;
#end
#end
    }

#end
    ${action.triggerName}(): void {

        let form: any = {
#foreach($field in $action.forwardParameters)
            $field.name: this.${action.triggerName}${stringUtils.capitalize($field.name)},
#end
        };

        this.${beforeAction}(form);

#if(!$action.formFields.empty)
#set($params = "")
#foreach($field in $action.forwardParameters)
#set ($params = "$params#if($params.length() > 0), #{end}form.${action.triggerName}${stringUtils.capitalize($field.name)}")
#end
        this.${action.controller.variableName}.${action.triggerName}(#if(!$action.forwardParameters.empty)form#end);
#end
#set ($iter = $action.targetViews.iterator())
#set ($hadNext = false)
#if($iter.hasNext())
#set ($hadNext = true)
#set ($targetView = $iter.next())
#end
#if($hadNext && $targetView.popup)
#set($isComponentDialog = $targetView.variables.size() == 1 && $targetView.variables.get(0).component)

        const dialogRef = this.dialog.open(#if($isComponentDialog)DialogComponent<$targetView.variables.get(0).type.implementationName>#else$targetView.componentImplementationName#end, <MatDialogConfig>{
#if($isComponentDialog)
            hasBackdrop: true,
            disableClose: false,
            closeOnNavigation: true,
            data: {
                component: $targetView.variables.get(0).type.implementationName,
                title: '$targetView.messageKey',
                inputs: {
#foreach($field in $action.forwardParameters)
#if(!$field.inputButton)
                    $field.name: this.${action.triggerName}${stringUtils.capitalize($field.name)},
#end
#end
                },
#if($targetView.actions.size() > 0)
                actions: [
#foreach($targetAction in $targetView.actions)
#if(!$targetAction.tableLink)
                    {
                        id: '$targetAction.name',
                        label: '$targetAction.messageKey',
#if($targetAction.icon)
                        icon: '$targetAction.icon',
#end
                    },
#end
#end
                ]
#end
            }
#else
#foreach($field in $action.forwardParameters)
#if(!$field.inputButton)
            $field.name: this.${action.triggerName}${stringUtils.capitalize($field.name)},
#end
#end
#end   
        });

        dialogRef.afterClosed().subscribe( {
            next: (result: any) => {
#if($isComponentDialog)
#foreach($targetAction in $targetView.actions)
                if(result?.action === '$targetAction.name') {
                    this.${targetAction.triggerName}(result?.dialogData)
                }
#end
#else
                this.${afterAction}(result?.dialogData);
#end
            },
            error: (error: any) => {
            },
        });
#else
        this.${afterAction}(form);
#end
    }

#end
#end
#if ($view.nonTableVariablesPresent)
    get ${view.varsFormName}Control(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

#foreach ($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton && !$variable.component)
#renderAttributeFormCreation($variable "" "           ")
#renderAttributeMethods($variable "" true "    ")
#end
#end
#end
    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

    set$stringUtils.capitalize(${view.formName})Value(form: any) {
#foreach($variable in $view.variables)
#if(!$variable.table && !$variable.inputButton && !$variable.component)
        if(form.$variable.name) {
#if($angularUtils.isTable($variable) || $variable.many || $variable.type.collectionType)
            this.${view.formName}.setControl('$variable.name', this.set$stringUtils.capitalize($variable.name)(form.$variable.name));
#elseif($variable.complex)
#if($variable.component)
            this.${view.formName}.setControl('$variable.name', this.create$stringUtils.capitalize($variable.name)Form(form.$variable.name));
#end
#else
            this.${view.formName}?.get('$variable.name')?.setValue(form.$variable.name);
#end
        }
#end
#end
    }

#set($fieldSet = $angularUtils.getFacadeSet($fields))

#if($view.popup)
    handleCancelDialog(): void {}

    cancelDialog() {
        this.handleCancelDialog();
        this.dialogRef.close({event: 'Cancel'});
    }

    handleDialogDone(data: any): any {
        return data;
    }

    dialogDone() {
        this.dialogRef.close({
            dialogData: this.handleDialogDone(this.${view.formName}.value)
        });
    }

#end
#foreach($button in $buttons)
    on${stringUtils.capitalize(${button})}Click() {}

#end
}
