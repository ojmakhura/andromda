// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ($cr = "
")
import { OnInit, Injector, Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { UseCaseScope } from '@app/utils/use-case-scope';

## Find all the fields in the actions of the view
#foreach($import in $view.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end

#foreach ($action in $view.actions)
#if (!$action.tableLink)
export class $stringUtils.capitalize($action.formName) {
#foreach($parameter in $action.parameters)
    $parameter.name: $parameter.angularTypeName;
#end
}

#end
#end
#if ($view.nonTableVariablesPresent)
export class $stringUtils.capitalize(${view.varsFormName}) {
#foreach($variable in $view.variables)
#if(!$variable.table)
    $variable.name: $variable.angularTypeName;
#end
#end
}

#end
@Component({
  selector: '${view.selectorName}-base',
  template: ''
})
export abstract class $view.componentName implements OnInit {

	${view.formName}: FormGroup;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
#foreach($controller in $view.targetControllers)
    $controller.variableName: ${controller.implementationName};
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName};
#foreach ($service in $view.useCase.controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
#end
#foreach ($action in $view.actions)
#if (!$action.tableLink)
#foreach($parameter in $action.parameters)
#if($parameter.inputSelect)
    ${parameter.backingListName}: ${parameter.angularTypeName}[] = [];
#end
#end
#end
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName} = injector.get(${view.useCase.controller.implementationName});
#foreach ($service in $view.useCase.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
#end
#foreach($controller in $view.targetControllers)
        this.$controller.variableName = injector.get(${controller.implementationName});
#end
        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.${view.formName} = this.newForm();

        this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    abstract handleFormChanges(change: any): void;

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
        this.doNgAfterViewInit();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
#foreach ($action in $view.actions)
#if (!$action.tableLink)
            ${action.formName}: this.formBuilder.group({
#foreach($parameter in $action.parameters)
#set ($normals = $angularUtils.getStandardAttributes($parameter))
#set ($tables = $angularUtils.getTableAttributes($parameter))
#*  *##if($parameter.complex)
#*    *##set($name = $stringUtils.replaceChars(${action.trigger.name}, '\\ ', ''))
                $parameter.name: this.rxFormBuilder.group(new $parameter.type.name),
#*  *##else
                $parameter.name: [],
#*  *##end
#end
            }),
#end
#end
#if ($view.nonTableVariablesPresent)
            ${view.varsFormName}: this.formBuilder.group({
#foreach( $variable in $view.variables )
#if(!$variable.table)
#*  *##if($variable.complex)
                $variable.name: this.rxFormBuilder.group(new $variable.type.name),
#*  *##else
                $variable.name: [],
#*  *##end
#end
#end
            }),
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): [''],
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

#foreach ($action in $view.actions)
#if (!$action.tableLink)
    get ${action.formName}(): FormGroup {
        return this.getGroupControl('${action.formName}');
    }
    
    abstract afterSet$stringUtils.capitalize(${action.formName})(form: $stringUtils.capitalize($action.formName)): void;

    set$stringUtils.capitalize(${action.formName})(form: $stringUtils.capitalize($action.formName)) {

#foreach($parameter in $action.parameters)
        this.${action.formName}.get('$parameter.name').setValue(form.$parameter.name);
#end

        this.afterSet$stringUtils.capitalize(${action.formName})(form);
    }

#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")
    abstract ${beforeAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void;
    abstract ${afterAction}(#if(!$action.formFields.empty)form: $stringUtils.capitalize($action.formName)#end): void;
    
    ${action.triggerName}(): void {

#if(!$action.formFields.empty)
        let form: $stringUtils.capitalize($action.formName) = this.${action.formName}?.value as $stringUtils.capitalize($action.formName);

        this.${beforeAction}(#if(!$action.formFields.empty)form#end);
        this.${action.controller.variableName}.${action.triggerName}(#if(!$action.formFields.empty)form#else{}#end);

        this.${afterAction}(#if(!$action.formFields.empty)form#end);
#end
    }

#if(!$action.formFields.empty)
    get$stringUtils.capitalize($action.formName)(value: any): $stringUtils.capitalize($action.formName) {
        
        let form: $stringUtils.capitalize($action.formName) = new $stringUtils.capitalize($action.formName)();
#foreach($parameter in $action.parameters)

        if(value?.$parameter.name) {
            form.$parameter.name = value?.$parameter.name;
        }
#end

        return form;
    }
#end

#end
#end
#if ($view.nonTableVariablesPresent)

    get$stringUtils.capitalize($view.varsFormName)(value: any): $stringUtils.capitalize($view.varsFormName) {

        let form: $stringUtils.capitalize($view.varsFormName) = new ${stringUtils.capitalize($view.varsFormName)}();
#foreach($variable in $view.variables)
#if(!$variable.table)
        if(value?.$variable.name) {
            form.$variable.name = value?.$variable.name;
        }
#end
#end

        return form;
    }

    get ${view.varsFormName}(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

    abstract afterSet$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)): void;

    set$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)) {

#foreach($variable in $view.variables)
#if(!$variable.table)
        this.${view.varsFormName}.get('$variable.name').setValue(form.$variable.name);
#end
#end

        this.afterSet$stringUtils.capitalize(${view.varsFormName})(form);
    }

#end

    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

#foreach($table in $view.tables)
    set$stringUtils.capitalize(${table.name})(${table.name}: ${table.angularTypeName}[]): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach((item: ${table.angularTypeName}) => {
            ${table.name}Array.push(this.rxFormBuilder.group(item))
        });

        this.${view.formName}.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }

    get ${table.name}(): FormArray {
        return this.getArrayControl('$table.name');
    }

#end
#foreach($table in $view.tables)

    add${stringUtils.capitalize($table.name)}DummyData() {
        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 1)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-1'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));

        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper > 1 || $column.upper == -1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 2)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-2'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));
    }
#end
}