// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ($cr = "
")
import { Component, OnInit, Injector, ViewChild, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';
## Find all the fields in the actions of the view
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
import { ${action.componentImplementationName} } from ${escTool.s}@app/${action.implementationImportFilePath}${escTool.s};
#end
#end
#foreach($table in $view.tables)
import { ${table.tableComponentImplementationName} } from ${escTool.s}@app/${table.importImplementationFilePath}${escTool.s};
#end

import { ${view.useCase.controller.implementationName} } from ${escTool.s}@app/${view.useCase.controller.implementationFilePath}${escTool.s};
#if(${view.useCase.controller})
#foreach($service in ${view.useCase.controller.allRestControllers})
import { ${service.implementationName} } from '@app/${service.implementationImportFilePath}';
#end
#end

#foreach($import in $view.imports)
import { $import.name } from ${escTool.s}@app/${import.importFilePath}${escTool.s};
#end

export abstract class $view.componentName implements OnInit {

	${view.formName}: FormGroup;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;
#if(${view.useCase.controller})
#foreach ($service in $view.useCase.controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);
#if(${view.useCase.controller})
#foreach ($service in $view.useCase.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
#end
        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.${view.formName} = this.newForm();

#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
        this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
#foreach ($action in $view.actions)
#if (!$action.tableLink)
            ${action.formName}: this.formBuilder.group({
#foreach($parameter in $action.parameters)
#set ($normals = $angularUtils.getStandardAttributes($parameter))
#set ($tables = $angularUtils.getTableAttributes($parameter))
#*  *##if($parameter.complex)
#*    *##set($name = $stringUtils.replaceChars(${action.trigger.name}, '\\ ', ''))
                $parameter.name: this.rxFormBuilder.group(new $parameter.type.name),
#*  *##else
                $parameter.name: [],
#*  *##end
#end
            }),
#end
#end
#if ($view.nonTableVariablesPresent)
            ${view.varsFormName}: this.formBuilder.group({
#foreach( $variable in $view.variables )
#*  *##if($variable.complex)
                $variable.name: this.rxFormBuilder.group(new $variable.type.name),
#*  *##else
                $variable.name: [],
#*  *##end
#end
            }),
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): [''],
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

#foreach ($action in $view.actions)
#set ( $actionClass = $angularUtils.getActionName("$action.path") )
    get ${action.formName}(): FormGroup {
        return this.getGroupControl('${action.formName}');
    }
    
    abstract afterSet${action.componentName}(form: any): void;

    set${action.componentName}(form: any) {

#foreach($parameter in $action.parameters)
        this.${action.formName}.get('$parameter.name').setValue(form.$parameter.name);

#end
        this.afterSet${action.componentName}(form);

    }

#end
#if ($view.nonTableVariablesPresent)
    get ${view.varsFormName}(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

#end
    abstract handleFormChanges(change: any): void;

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

#foreach($table in $view.tables)
    set$stringUtils.capitalize(${table.name})(${table.name}: Array<$angularUtils.getDatatype(${table.type.name})>): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach((item: $angularUtils.getDatatype(${table.type.name})) => {
            ${table.name}Array.push(this.rxFormBuilder.group(item))
        });

        this.${view.formName}.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }

#end
#if(${view.useCase.controller})
    get ${view.useCase.controller.variableName}(): ${view.useCase.controller.name}Impl {
        
        return this._injector.get(${view.useCase.controller.name}Impl);
    }
#end
}