// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${view.packageName}), '\\.', '\\/') )
#set ( $fileName = $angularUtils.getComponentFileName("${view.name}"))
#set ($params = $angularUtils.getFormFields($view.actions))
#foreach( $variable in $view.variables )
#set($rt = $params.add($variable))
#end
#set ($cr = "
")
import { Component, OnInit, Injector, ViewChild, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';
## Find all the fields in the actions of the view
#set ( $fields = [] )
#foreach ( $action in $view.actions )
#foreach ( $field in $action.formFields )
#set ( $rt = $fields.add($field))
#end
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularUtils.getFacadeSet($fields) )
#set ( $rt = $finalFields.add($finalField) )
#end
#set ( $attr = [] )
#set ( $types = [] )
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
#set ( $actionPath = ${action.path} )
#set ( $actionName = $angularUtils.getActionName("$action.path") )
import { ${actionName}ImplComponent } from ${escTool.s}@app/view${actionPath}.impl.component${escTool.s};
#foreach ($field in $action.formFields)
#if (!(${field.action} && $field.action.tableLinkName))
#if ($field.complex)
#set ( $rt = $attr.add($field ))
#set ( $rt = $types.add($field.type))
#end
#end
#end
#foreach ($tmp in $action.parameters)
#if($angularUtils.isComplex($tmp))
#set ( $rt = $types.add($tmp.type))
#foreach($attribute in $tmp.attributes)
#if($angularUtils.isComplex($attribute))
#set ( $rt = $types.add($attribute.type))
#end
#end
#end
#end
#end
#end
#foreach($table in $view.tables)
#set ( $tablePath = $stringUtils.replaceChars($stringUtils.lowerCase(${table.packageName}), '\\.', '\\/') )
#set ( $tableFile = $angularUtils.getComponentFileName("${table.view.name}-${table.name}") )
#set ( $className = $angularUtils.getComponentName($tableFile, "-"))
import { ${className}ImplComponent } from ${escTool.s}@app/view/${tablePath}/${tableFile}.impl.component${escTool.s};
#end
#set ( $finalAttr = [] ) ## No repetisions
#foreach ( $at in $angularUtils.getFacadeSet($types) )
#set ($rt = $finalAttr.add($at) )
#end

#foreach($a in $finalAttr)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${a.packageName}), '\\.', '\\/')" )
#set ( $name = $angularUtils.getComponentFileName("$a.name") )
import { $a.name } from ${escTool.s}@app/model/$path/$name${escTool.s};
#end

#set ( $path = $stringUtils.replaceChars($view.useCase.controller.packageName, '\\.', '\\/') )
#set ( $file =  ${angularUtils.getComponentFileName("${view.useCase.controller.name}Impl")})
import { ${view.useCase.controller.name}Impl } from ${escTool.s}@app/controller/$path/${file}${escTool.s};

#set ($viewName = ${angularUtils.getComponentName("$fileName", "-")})
@Component({
  selector: '${fileName}-base',
  template: ''
})
export abstract class ${viewName}Component implements OnInit {

	${stringUtils.uncapitalize($viewName)}Form: FormGroup;

    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);

        this._injector = injector;
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.${stringUtils.uncapitalize($viewName)}Form = this.newForm();

#if(${view.useCase.controller})
        this.${view.useCase.controller.beanName}.startUseCase();
#end
        this.${stringUtils.uncapitalize($viewName)}Form.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
#foreach ($action in $view.actions)
#if (!$action.tableLink)
#set ( $className = $angularUtils.getActionName("$action.path") )
            $stringUtils.uncapitalize($className)Form: this.formBuilder.group({
#foreach($parameter in $action.parameters)
#set ($normals = $angularUtils.getStandardAttributes($parameter))
#set ($tables = $angularUtils.getTableAttributes($parameter))
#*  *##if($parameter.complex)
#*    *##set($name = $stringUtils.replaceChars(${action.trigger.name}, '\\ ', ''))
                $parameter.name: this.rxFormBuilder.group(new $parameter.type.name),
#*  *##else
                $parameter.name: [],
#*  *##end
#end
            }),
#end
#end
#if ($view.nonTableVariablesPresent)
            ${stringUtils.uncapitalize(${viewName})}VarsForm: this.formBuilder.group({
#foreach( $variable in $view.variables )
#*  *##if($variable.complex)
                $variable.name: this.rxFormBuilder.group(new $variable.type.name),
#*  *##else
                $variable.name: [],
#*  *##end
#end
            }),
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): ['']#if($i < $table.tableColumns.size()),$cr#end
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

#foreach ($action in $view.actions)
#set ( $className = $angularUtils.getActionName("$action.path") )
    get $stringUtils.uncapitalize($className)Form(): FormGroup {
        return this.getGroupControl('$stringUtils.uncapitalize($className)Form');
    }
     
#end
#if ($view.nonTableVariablesPresent)
    get ${stringUtils.uncapitalize($viewName)}VarsForm(): FormGroup {
        return this.getGroupControl('${stringUtils.uncapitalize($viewName)}VarsForm');
    }

#end
    abstract handleFormChanges(change: any): void;

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return this.${stringUtils.uncapitalize(${viewName})}Form.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${stringUtils.uncapitalize(${viewName})}Form.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${stringUtils.uncapitalize(${viewName})}Form.get(name) as FormArray;
    }
#foreach($table in $view.tables)

    set$stringUtils.capitalize(${table.name})(${table.name}: $angularUtils.getDatatype(${table.type.name})): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach(item => {
            ${table.name}Array.push(this.rxFormBuilder.group(item))
        });

        this.${stringUtils.uncapitalize(${viewName})}Form.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }
#end
##foreach ($parameter in $angularUtils.getFacadeSet($params) )
##
#####*   *##if($parameter.complex)
###*     *##set($returnType = "FormGroup")
###*   *##else
###*     *##set($returnType = "FormControl")
###*   *##end
###    set$stringUtils.capitalize($parameter.name)($parameter.name: $angularUtils.getDatatype($parameter.type.name)): $returnType {
##
##        if(!${parameter.name} || ${parameter.name} === undefined || ${parameter.name} === null) {
##            return #if($parameter.complex) this.newForm()#else new FormControl()#end;
##        }
##
##        this.${stringUtils.uncapitalize(${viewName})}Form.get('$parameter.name').setValue($parameter.name);
##
##        return this.${stringUtils.uncapitalize(${viewName})}Form.get('$parameter.name') as $returnType;
##    }
###end
#if(${view.useCase.controller})

    get ${view.useCase.controller.beanName}(): ${view.useCase.controller.name}Impl {
        
        return this._injector.get(${view.useCase.controller.name}Impl);
    }
#end
}