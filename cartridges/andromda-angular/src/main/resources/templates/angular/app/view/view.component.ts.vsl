// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ($cr = "
")
import { 
    Component, 
    OnInit, 
    Injector, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    OnDestroy
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
#set ($base = "${metafacadeWebUtils.toWebResourceName($view.useCase.name)}")
import { ${view.useCase.actionClassName}State } from '@app/store$view.useCase.pathRoot/${base}.state';
import * as ${view.useCase.actionClassName}Selectors from '@app/store$view.useCase.pathRoot/${base}.selectors';

## Find all the fields in the actions of the view
#set($fieldSet =  $angularUtils.getFacadeSet($view.allFormFields))
#foreach($import in $view.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
#foreach ($action in $view.actions)
#if (!$action.tableLink)

export class $stringUtils.capitalize($action.formName) {
#foreach($parameter in $action.formFields)
    $parameter.name: $parameter.angularTypeName | any;
#end
}
#end
#end
#if ($view.nonTableVariablesPresent)
export class $stringUtils.capitalize(${view.varsFormName}) {
#foreach($variable in $view.variables)
#if(!$variable.table)
    $variable.name: $variable.angularTypeName | any;
#end
#end
}

#end
#set($stateParams = [])
#foreach($variable in $view.variables)
#if(!$variable.table)
#set ( $rt = $stateParams.add($variable) )
#end
#end
## #foreach($action in $view.actions)
## #foreach($field in $action.formFields)
## #set ( $rt = $stateParams.add($field) )
## #end
## #foreach($param in $action.parameters)
## #set ( $rt = $stateParams.add($param) )
## #end
## #end
#set ( $finalParams = $angularUtils.getFacadeSet($stateParams) )
@Component({
  selector: '${view.selectorName}-base',
  template: ''
})
export abstract class $view.componentName implements OnInit, AfterViewInit, OnDestroy {

	${view.formName}: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<${view.useCase.actionClassName}State>;
#foreach($controller in $view.targetControllers)
    $controller.variableName: ${controller.implementationName};
#end
#if(${view.useCase.controller})
    ${view.useCase.controller.variableName}: ${view.useCase.controller.implementationName};
#foreach ($service in $view.useCase.controller.allRestControllers)
    $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
#end
#set ($formVars = "")
#set ($formVarNames = "")
#if ($view.nonTableVariablesPresent)
#set($formNameCaps = ${actionFormCaps})
#set ($count = 1)
#foreach ($field in $view.variables)
#set ($formVars = "$formVars#if($count == 1), #{end}$field.name: $field.angularTypeName")
#set ($formVarNames = "$formVarNames#if($count == 1), #{end}${view.formName}$.$field.name")
#set ($count = $count + 1)
#if($field.complex)
#foreach($attribute in $angularUtils.getTableAttributes($field))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumnNames($attribute))
        'select',
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;

    @ViewChild('${attribute.name}ModalPaginator', {static: true}) ${attribute.name}ModalPaginator: MatPaginator;
    @ViewChild('${attribute.name}ModalSort', {static: true}) ${attribute.name}ModalSort: MatSort;

    ${attribute.name}$: Observable<${attribute.angularTypeName}[]>;
    $attribute.getFormPropertyId($field)SearchField: FormControl;
    $attribute.getFormPropertyId($field)Select: ${attribute.angularTypeName}#if($attribute.many || $attribute.type.collectionType)[]#end;
#end

#if(!$field.table)
#foreach( $attribute in $field.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = Object.keys(this.${attribute.name}T);
#elseif($attribute.inputSelect || $attribute.inputMultibox || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($field)})
#set($ret = $selections.add($attribute.type))
    $backingListName: Array<SelectItem> = [];
#end
#end
#else
#if($field.type.enumeration)
    ${field.name}T = $field.type.name;
    ${field.name}Options = Object.keys(this.${field.name}T);
#elseif($field.inputSelect || $field.inputMultibox)
#set($ret = $selections.add($field.type))
    ${field.backingListName}: Array<$field.angularTypeName> = [];
#end
#end
#end
#end
#end
#foreach($param in $finalParams)
    ${param.name}$: Observable<$param.angularTypeName>;
#end

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName} = injector.get(${view.useCase.controller.implementationName});
#foreach ($service in $view.useCase.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
#end
#foreach($controller in $view.targetControllers)
        this.$controller.variableName = injector.get(${controller.implementationName});
#end
        this._injector = injector;
#foreach($param in $finalParams)
#if(!$param.table)
        this.${param.name}$ = this.store.pipe(select(${view.useCase.actionClassName}Selectors.select$stringUtils.capitalize(${param.name})));
#end
#end
#foreach ($field in $view.variables)
#if($field.complex)
#foreach($attribute in $angularUtils.getTableAttributes($field))
        this.$attribute.getFormPropertyId($field)SearchField = new FormControl();
#end
#end
#end
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.${view.formName} = this.newForm(#if ($view.nonTableVariablesPresent)new $stringUtils.capitalize(${view.varsFormName})#end);

        this.${view.formName}.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    abstract handleFormChanges(change: any): void;

    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit() {
#if(${view.useCase.controller})
        this.${view.useCase.controller.variableName}.resetUseCaseScope();
#end
        this.doNgAfterViewInit();
    }

    newForm(${view.varsFormName}$: $stringUtils.capitalize(${view.varsFormName})): FormGroup {
        return this.formBuilder.group({
#if ($view.nonTableVariablesPresent)
#foreach( $variable in $view.variables )
#if(!$variable.table)
#*  *##if($variable.complex)
            $variable.name: this.create$stringUtils.capitalize($variable.name)Form(${view.varsFormName}$?.${variable.name}),
#*  *##else
#set ($validators = "")
#if($variable.required || $variable.inputEmail)
#set ($validators = ", [")
#if($variable.required)
#set ($validators = "${validators}Validators.required, ")
#end
#if($variable.inputEmail)
#set ($validators = "${validators}Validators.email, ")
#end
#set ($validators = "$validators]")
#end
            $variable.name: [${view.varsFormName}$?.$variable.name ? ${view.varsFormName}$.$variable.name$ : null$validators],
#*  *##end
#end
#end
#end
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([
                this.formBuilder.group({
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                    $angularUtils.getColumnName($column): [''],
#*   *##end
#* *##end
                })
            ]),
#end
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
#foreach($param in $finalParams)
#set ($d = '$')
##        this.${param.name}${d}.unsubscribe();
#end
    }

#foreach ($action in $view.actions)
#set ($actionFormCaps = $stringUtils.capitalize($action.formName))
#if (!$action.tableLink)
    get ${action.formName}(): $actionFormCaps {

        let form: $actionFormCaps = new ${actionFormCaps}();
#foreach( $parameter in $action.parameters )
#set ($tp = '')
#if( $parameter.many)
#set ($tp = 'getArrayControl')
#elseif( $parameter.complex)
#set ($tp = 'getGroupControl')
#else
#set ($tp = 'getItemControl')
#end
        form.$parameter.name = this.${tp}('$parameter.name').value;
#end

        return form;
    }
      
    /**
     * This method may be overwritten
     */
    abstract afterSet${actionFormCaps}(form: ${actionFormCaps}): void;

    set${actionFormCaps}(form: ${actionFormCaps}) {

#foreach($parameter in $action.parameters)
#if($angularUtils.isTable($parameter) || $parameter.many || $parameter.type.collectionType)
        this.${view.formName}.setControl('$parameter.name', this.set$stringUtils.capitalize($parameter.name)(form.$parameter.name));
#elseif($parameter.complex)
        this.${view.formName}.setControl('$parameter.name', this.create$stringUtils.capitalize($parameter.name)Form(form.$parameter.name));
#else
        this.${view.formName}.get('$parameter.name').setValue(form.$parameter.name);
#end
#end

        this.afterSet${actionFormCaps}(form);
    }

#set ($afterAction = "after$stringUtils.capitalize(${action.triggerName})")
#set ($beforeAction = "before$stringUtils.capitalize(${action.triggerName})")

    /**
     * This method may be overwritten
     */
    abstract ${beforeAction}(#if(!$action.formFields.empty)form: ${actionFormCaps}#end): void;

    /**
     * This method may be overwritten
     */
    abstract ${afterAction}(#if(!$action.formFields.empty)form: ${actionFormCaps}#end): void;
    
    ${action.triggerName}(): void {
#if(!$action.formFields.empty)
        let form: ${actionFormCaps} = this.${action.formName};
#end
        this.${beforeAction}(#if(!$action.formFields.empty)form#end);

#if(!$action.formFields.empty)
        this.${action.controller.variableName}.${action.triggerName}(#if(!$action.formFields.empty)form#else{}#end);
#end
        this.${afterAction}(#if(!$action.formFields.empty)form#end);
    }

#if(!$action.formFields.empty)
    get${actionFormCaps}(value: any): ${actionFormCaps} {
        
        let form: ${actionFormCaps} = new ${actionFormCaps}();

#foreach($parameter in $action.parameters)
        if(value?.$parameter.name) {
            form.$parameter.name = value?.$parameter.name;
        }

#end
        return form;
    }
#end

#end
#end
#if ($view.nonTableVariablesPresent)
    get ${view.varsFormName}(): FormGroup {
        return this.getGroupControl('${view.varsFormName}');
    }

    /**
     * This method may be overwritten
     */
    abstract afterSet$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)): void;

    set$stringUtils.capitalize(${view.varsFormName})(form: $stringUtils.capitalize($view.varsFormName)) {

#foreach($variable in $view.variables)
#if(!$variable.table)
#if($angularUtils.isTable($variable) || $variable.many || $variable.type.collectionType)
        this.${view.varsFormName}.setControl('$variable.name', this.set$stringUtils.capitalize($variable.name)(form.$variable.name));
#elseif($variable.complex)
        this.${view.varsFormName}.setControl('$variable.name', this.create$stringUtils.capitalize($variable.name)Form(form.$variable.name));
#else
        this.${view.varsFormName}.get('$variable.name').setValue(form.$variable.name);
#end
#end
#end

        this.afterSet$stringUtils.capitalize(${view.varsFormName})(form);
    }

#foreach ($variable in $view.variables)
#if(!$variable.table)
#if($angularUtils.isTable($variable) || $variable.many || $variable.type.collectionType)
#set ($controlType = "FormArray")
#elseif($variable.complex)
#set ($controlType = "FormGroup")
    create$stringUtils.capitalize($variable.name)Form($variable.name: $variable.angularTypeName): FormGroup {
        return this.formBuilder.group({
#foreach($attribute in $variable.attributes)
#if($angularUtils.isTable($attribute) || $attribute.many || $attribute.type.collectionType)
            $attribute.name: this.formBuilder.array(${variable.name}?.$attribute.name ? ${variable.name}.$attribute.name : []),
#elseif($attribute.complex)
            $attribute.name: this.formBuilder.group(${variable.name}?.$attribute.name),
#else
#set ($validators = "")
#if($attribute.required || $attribute.inputEmail)
#set ($validators = ", [")
#if($attribute.required)
#set ($validators = "${validators}Validators.required, ")
#end
#if($attribute.inputEmail)
#set ($validators = "${validators}Validators.email, ")
#end
#set ($validators = "$validators]")
#end
            $attribute.name: [${variable.name}?.$attribute.name ? ${variable.name}.${attribute.name} : null$validators],
#end
#end
        });
    }

#else
#set ($controlType = "FormControl")
#end
    get ${variable.name}(): $controlType {
        return this.getGroupControl('$variable.name') as $controlType;
    }

#if($variable.inputMultibox)
    on$stringUtils.capitalize($variable.name)Change($event: MatSelectChange) {
        if(!this.${variable.name}.value.includes($event.value)) {
            this.${variable.name}.push(new FormControl($event.value));
        }
        $event.source.value = '';
    }

    get$stringUtils.capitalize($variable.name)Label(value: string): string | undefined {
        return this.${variable.backingListName}BackingList.find(item => item.value === value)?.label;
    }

#end
#if ($variable.complex)
#foreach($attribute in $variable.attributes)
#if($angularUtils.isTable($attribute) || $attribute.many || $attribute.type.collectionType)
#set ($controlType = "FormArray")
#elseif($attribute.complex)
#set ($controlType = "FormGroup")
#else
#set ($controlType = "FormControl")
#end
#set ($propertyId = $attribute.getFormPropertyId($variable))
    get ${propertyId}(): $controlType {
        return this.${variable.name}.get('$attribute.name') as $controlType;
    }

#if($angularUtils.isTable($attribute))
#set ($propertyId = $attribute.getFormPropertyId($variable))
    abstract handle$stringUtils.capitalize($propertyId)AddDialog(): void;

    ${propertyId}AddDialog(): void {
        this.handle$stringUtils.capitalize($propertyId)AddDialog();
    }

    abstract handle$stringUtils.capitalize($propertyId)Search(): void;
    
    ${propertyId}Search(): void {
        this.handle$stringUtils.capitalize($propertyId)Search();
    }

    abstract handle$stringUtils.capitalize($propertyId)Selected(element: $attribute.angularTypeName, index: number): void;
    
    ${propertyId}Selected(element: $attribute.angularTypeName, index: number): void {
        this.handle$stringUtils.capitalize($propertyId)Selected(element, index);
    }
#end
#if($attribute.inputMultibox)
    /**
     * Add the selected item to the list only if it already exist.
     * Make sure to reset the selection.
     * @param $event
     */
    on$stringUtils.capitalize($propertyId)Change($event: MatSelectChange) {
        if(!this.${propertyId}.value.includes($event.value)){
            this.${propertyId}.push(new FormControl($event.value));
        }
        $event.source.value='';
    }

    /**
     * Retrieve the label to be displayes
     * @param value 
     * @returns 
     */
    get$stringUtils.capitalize($propertyId)Label(value: string): string | undefined {
        return this.${propertyId}BackingList.find(item => item.value === value)?.label;
    }

    /**
     * Delete an item from the list
     * @param index 
     */
    ${propertyId}Delete(index: number) {
        this.${propertyId}.controls.splice(index, 1);
    }

#end
#end
#end
#end
#end
#end
    getItemControl(name: string): FormControl {
        return this.${view.formName}.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.${view.formName}.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.${view.formName}.get(name) as FormArray;
    }

#foreach($table in $view.tables)
    set$stringUtils.capitalize(${table.name})(${table.name}: ${table.angularTypeName}): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach((item) => {
            ${table.name}Array.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!$column.many || !$column.type.collectionType || ( $column.type.attributes.size() > 0 && $column.type.enumeration))
                $columnName: [item.$columnName#if($column.type.dateType).toISOString()#end],
#end
#end
            }));
        });

        this.${view.formName}.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }

    get ${table.name}(): FormArray {
        return this.getArrayControl('$table.name');
    }

#end
#foreach($table in $view.tables)

    add${stringUtils.capitalize($table.name)}DummyData() {
        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper>1 || $column.upper==-1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 1)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-1'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));

        this.${table.name}.push(this.formBuilder.group({
#foreach ($column in $table.tableColumns)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#if(!($column.upper > 1 || $column.upper == -1))
#if($column.defaultValuePresent)
#set ($defaultValue = $column.defaultValue)
#else
#end
#if($column.angularTypeName=="number")
#set ($defaultValue = 2)
#elseif($column.angularTypeName=="Date")
#set ($defaultValue = "new Date()")
#else
#set ($defaultValue = "'${columnName}-2'")
#end
            $columnName: [$defaultValue],
#end
#end
        }));
    }
#end
}
