// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
#set ( $componentPath = $stringUtils.replaceChars($stringUtils.lowerCase(${view.packageName}), '\\.', '\\/') )
#set ( $fileName = $angularHelper.getComponentFileName("${view.name}"))
#set ($cr = "
")
import { Component, OnInit, Injector, ViewChild, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';
## Find all the fields in the actions of the view
#set ( $fields = [] )
#foreach ( $action in $view.actions )
#foreach ( $field in $action.formFields )
#set ( $rt = $fields.add($field))
#end
#end
#set ( $finalFields = [] )
#foreach ($finalField in $angularHelper.getFacadeSet($fields) )
#set ( $rt = $finalFields.add($finalField) )
#end
#set ( $attr = [] )
#set ( $types = [] )
#foreach ( $action in $view.actions )
#if (!$action.tableLink)
#set ( $actionPath = ${action.path} )
#set ( $actionName = $angularHelper.getComponentFileName("$action.name") )
import { $angularHelper.getComponentName($action.name, "-")ImplComponent } from 'src/app/impl/view${actionPath}.impl.component';
#foreach ($field in $action.formFields)
#if (!(${field.action} && $field.action.tableLinkName))
#if ($field.complex)
#set ( $rt = $attr.add($field ))
#set ( $rt = $types.add($field.type))
#end
#end
#end
#foreach ($tmp in $action.parameters)
#if($angularHelper.isComplex($tmp))
#set ( $rt = $types.add($tmp.type))
#foreach($attribute in $tmp.attributes)
#if($angularHelper.isComplex($attribute))
#set ( $rt = $types.add($attribute.type))
#end
#end
#end
#end
#end
#end
#foreach($table in $view.tables)
#set ( $tablePath = $stringUtils.replaceChars($stringUtils.lowerCase(${table.packageName}), '\\.', '\\/') )
#set ( $tableFile = $angularHelper.getComponentFileName("${table.view.name}-${table.name}") )
#set ( $className = $angularHelper.getComponentName($tableFile, "-"))
import { ${className}ImplComponent } from ${escTool.s}src/app/impl/view/${tablePath}/${tableFile}.impl.component${escTool.s};
#end
#set ( $finalAttr = [] ) ## No repetisions
#foreach ( $at in $angularHelper.getFacadeSet($types) )
#set ($rt = $finalAttr.add($at) )
#end

#foreach($a in $finalAttr)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${a.packageName}), '\\.', '\\/')" )
#set ( $name = $angularHelper.getComponentFileName("$a.name") )
import { $a.name } from 'src/app/gen/model/$path/$name';
#end

#set ( $path = $stringUtils.replaceChars($view.useCase.controller.packageName, '\\.', '\\/') )
#set ( $file =  ${angularHelper.getComponentFileName("${view.useCase.controller.name}Impl")})
import { ${view.useCase.controller.name}Impl } from 'src/app/impl/controller/$path/${file}';

#set ($tmpName = ${angularHelper.getComponentName("$fileName", "-")})
@Component({
  selector: '${fileName}-base',
  template: ''
})
export abstract class ${tmpName}Component implements OnInit {

	protected ${stringUtils.uncapitalize($tmpName)}Form: FormGroup;

    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected rxFormBuilder: RxFormBuilder;
    protected _injector: Injector;

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.rxFormBuilder = injector.get(RxFormBuilder);

        this._injector = injector;
    }

    abstract beforeOnInit();
	
    ngOnInit() {
        this.beforeOnInit();
        this.${stringUtils.uncapitalize($tmpName)}Form = this.newForm();

#if(${view.useCase.controller})
        this.${view.useCase.controller.beanName}.startUseCase();
#end
        this.${stringUtils.uncapitalize($tmpName)}Form.valueChanges.subscribe(
            change => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
#set ($y = 0)
#set ($x = 1)
#foreach ( $action in $view.actions )#set ($i = 1)
#* *##set ($y = 1)
#* *##foreach ($parameter in $action.parameters)
#set ($normals = $angularHelper.getStandardAttributes($parameter))
#set ($tables = $angularHelper.getTableAttributes($parameter))
#*    *##if($parameter.complex)
#*      *##set($name = $stringUtils.replaceChars(${action.trigger.name}, '\\ ', ''))
            $stringUtils.uncapitalize($name)$stringUtils.capitalize($parameter.name): this.formBuilder.group({
#*    *##set ($i = 1)
#*    *##foreach($attribute in $normals)
#*      *##if(!$angularHelper.isComplex($attribute) || $attribute.type.enumeration)
                $attribute.name: [],
#*      *##else
                $attribute.name: this.formBuilder.group({
#*       *##set($j = 1)
#*       *##set ($columns = $attribute.type.attributes)
#*       *##foreach( $column in $columns )
#*         *##if(!$angularHelper.isComplex($column) || $column.type.enumeration)
                    $column.name: [],
#*         *##end
#*         *##set($j = $j + 1)
#*       *##end
                }),
#*      *##end
#*      *##set($i = $i + 1)
#*    *##end
#*    *##foreach($table in $tables)
                $table.name: this.formBuilder.array([this.formBuilder.group({
#*      *##set ($i = 1)
#*      *##set ($columns = $table.type.attributes)
#*      *##foreach($column in $columns)
                    $column.name: [],
#*      *##end
                })]),
#*    *##end
            }),
#*  *##else
            ${action.trigger.name}$stringUtils.capitalize($parameter.name): [],
#*  *##end
#* *##end
#* *##set ($x = $x + 1)
#end
#set ($x = 1)
#foreach($table in $view.tables)#set ($i = 1)
            ${table.name}: this.formBuilder.array([this.formBuilder.group({
#* *##set($i = 1)
#* *##foreach ($column in $table.tableColumns)
#*   *##if(!($column.upper>1 || $column.upper == -1))
                $angularHelper.getColumnName($column): ['']#if($i < $table.tableColumns.size()),$cr#end
#*   *##end
#*   *##set($i = $i + 1)
#* *##end$cr
            })])#if($x < $view.tables.size()),#end$cr
#* *##set ($x = $x + 1)
#end
        });
    }

    abstract handleFormChanges(change: any);

    abstract afterOnInit();
    
    abstract doNgAfterViewInit();

    ngAfterViewInit() {
        this.doNgAfterViewInit();
    }

    getItemControl(name): FormControl {
        return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormControl;
    }

    getGroupControl(name): FormGroup {
        return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormGroup;
    }

    getArrayControl(name): FormArray {
        return this.${stringUtils.uncapitalize(${tmpName})}Form.get(name) as FormArray;
    }
#set ($x = 1)
#foreach($table in $view.tables)

    set$stringUtils.capitalize(${table.name})(${table.name}: Array<${table.type.name}>): FormArray {

        const ${table.name}Array = new FormArray([]);

        if(!${table.name} || ${table.name} === undefined || ${table.name} === null) {
            return ${table.name}Array;
        }

        ${table.name}.forEach(item => {
            ${table.name}Array.push(this.rxFormBuilder.group(item))
        });

        this.${stringUtils.uncapitalize(${tmpName})}Form.setControl('${table.name}', ${table.name}Array);

        return ${table.name}Array;
    }
#end
#foreach ( $action in $view.actions )
#* *##foreach ($parameter in $action.parameters)
#*   *##if($parameter.complex)
#*     *##set($returnType = "FormGroup")
#*   *##else
#*     *##set($returnType = "FormControl")
#*   *##end
#*   *##set($name = $stringUtils.replaceChars(${action.trigger.name}, '\\ ', ''))

    set$stringUtils.capitalize(${name})$stringUtils.capitalize($parameter.name)($parameter.name: $angularHelper.getDatatype($parameter.type.name)): $returnType {

        if(!${parameter.name} || ${parameter.name} === undefined || ${parameter.name} === null) {
            return #if($parameter.complex) this.newForm()#else new FormControl()#end;
        }

        const ${parameter.name}Form =#if($parameter.complex) this.rxFormBuilder.group#else new FormControl#end($parameter.name);

        this.${stringUtils.uncapitalize(${tmpName})}Form.setControl('$stringUtils.uncapitalize(${name})$stringUtils.capitalize($parameter.name)', ${parameter.name}Form);

        return ${parameter.name}Form;
    }
#* *##end
#end
#if(${view.useCase.controller})

    get ${view.useCase.controller.beanName}(): ${view.useCase.controller.name}Impl {
        
        return this._injector.get(${view.useCase.controller.name}Impl);
    }
#end
}
