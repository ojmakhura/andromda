// Generated by andromda-angular cartridge (view\action\view.action.ts.vsl) DO NOT EDIT! -->
#set ( $actionPath = "$stringUtils.replaceChars($stringUtils.lowerCase(${action.packageName}), '\\.', '\\/')" )
#set ( $fileName = $angularHelper.getComponentFileName("$action.name") )
#set ( $className = $angularHelper.getComponentName("$fileName", "-") )
import { Component, OnInit, Injector, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

#set ( $viewFile = $angularHelper.getComponentFileName("${action.source.name}") )
#set ( $viewName = $angularHelper.getComponentName($viewFile, '-') )
import { ${viewName}ImplComponent } from './${viewFile}.impl.component';
#set ( $parameters = [] )
#foreach( $parameter in $action.parameters )
#set ( $ret = $parameters.add($parameter) )
#end
###foreach ($field in $action.formFields)
###set ( $ret = $parameters.add($field) )
###end
#set ( $suffix = "" )
#foreach ($tmp in $angularHelper.getImports($parameters, "${action.packageName}", $suffix))
$tmp
#end
#set ($args = [])
#foreach ($service in $action.controller.allServices)
#set ($ret = $args.add($service))
#end
#set ($suffix = "Impl")
#foreach ($tmp in $angularHelper.getImports($args, "${action.packageName}", $suffix))
$tmp
#end

@Component({
  selector: '${action.name}-base',
  template: ''
})
export abstract class ${className}Component implements OnInit {

#set ($cr = "
")
#set ( $attr = [] )

#foreach ( $tmp in $action.parameters )
#if($angularHelper.isComplex($tmp))
#set ($i = 1)
#foreach($attribute in $tmp.attributes)
#if($attribute.inputTable)
	${attribute.name}Columns = [
#set($i = 0)
#foreach ($column in $angularHelper.getTableColumns($attribute))
        '$column'#if($i < $angularHelper.getTableColumns($attribute).size()),$cr#end
#set($i = $i + 1)
#end
    ];
	@ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
#end
#end
#end
#end

	protected ${stringUtils.uncapitalize($className)}Form: FormGroup;
	protected route: ActivatedRoute;
	protected router: Router;
#foreach ($service in $action.controller.allServices)
    protected $stringUtils.uncapitalize($service.name): ${service.name}Impl;
#end
    protected $stringUtils.uncapitalize($viewName): ${viewName}ImplComponent;
	protected formBuilder: RxFormBuilder;

    constructor(injector: Injector) {

        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
#foreach ($service in $action.controller.allServices)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.name}Impl);
#end
        this.$stringUtils.uncapitalize($viewName) = injector.get(${viewName}ImplComponent);
        this.formBuilder = injector.get(RxFormBuilder);
    }

    ngOnInit(): void {
	
		this.beforeOnInit();

#set ($i = 1)
#if($action.parameters.size() > 0)
		this.${stringUtils.uncapitalize(${className})}Form = this.formBuilder.group({
#foreach ( $tmp in $action.parameters )
#if($tmp.many || $tmp.table)
			$tmp.name: this.formBuilder.array([{
#if($tmp.table && $tmp.tableColumns.size() > 0)
#set ($j = 1)
#foreach($column in $tmp.tableColumns)
				$column.name: ''#if($j < $tmp.tableColumns.size()),#end$cr
#set ($j = $j + 1)
#end
#else
#if($angularHelper.isComplex($tmp))
### Each attribute
#set ($i = 1)
#foreach($attribute in $tmp.attributes)
#if(!$angularHelper.isComplex($attribute) && !$attribute.many) ### Only non complex attributes and non collection
				$attribute.name: ''#if($i < $tmp.attributes.size()),#end$cr
#set ($i = $i + 1)
#end
#end
#else
				$tmp.name: ''$cr
#end
#end
			}])#if($i < $attr.size()),#end$cr
#elseif($angularHelper.isComplex($tmp))
			$tmp.name: this.formBuilder.group(new $angularHelper.getDatatype($tmp.type.fullyQualifiedName)())#if($i < $attr.size()),#end$cr
#else
			$tmp.name: this.formBuilder.control()#if($i < $attr.size()),#end$cr
#end
#set ($i = $i + 1)
#end
		});
#end

		this.afterOnInit();
	}

    abstract ${action.triggerName}();

	abstract beforeOnInit();
	
	abstract afterOnInit();

	getItemControl(name): FormControl {
		return this.${stringUtils.uncapitalize(${className})}Form.get(name) as FormControl;
	}

	getGroupControl(name): FormGroup {
		return this.${stringUtils.uncapitalize(${className})}Form.get(name) as FormGroup;
	}

	getArrayControl(name): FormArray {
		return this.${stringUtils.uncapitalize(${className})}Form.get(name) as FormArray;
	}

#foreach ( $tmp in $action.parameters )
#if($angularHelper.isComplex($tmp))
#set ($i = 1)
#foreach($attribute in $tmp.attributes)
#if($attribute.inputTable)
	get ${attribute.name}(): FormArray {
		return this.getGroupControl('$tmp.name').get('$attribute.name') as FormArray;
	}
#end
#end
#end
#end
}
