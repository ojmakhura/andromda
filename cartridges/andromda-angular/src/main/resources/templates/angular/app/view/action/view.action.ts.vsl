// Generated by andromda-angular cartridge (view\action\view.action.ts.vsl) DO NOT EDIT! -->
#set ( $actionPath = $action.path )
#set ( $fileName = $angularHelper.getComponentFileName("$action.name") )
#set ( $className = $angularHelper.getComponentName("$fileName", "-") )
import { Component, OnInit, Injector, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

#set ( $viewFile = $angularHelper.getComponentFileName("${action.source.name}") )
#set ( $viewName = $angularHelper.getComponentName($viewFile, '-') )
import { ${viewName}ImplComponent } from 'src/app/impl/view${action.source.path}.impl.component';
#set ( $parameters = [] )
#set ( $enumerations = [] )
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#set ( $ret = $parameters.add($parameter.type) )
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
#set ( $ret = $enumerations.add($attribute.type) )
#end
#end
#end
#end
#foreach ($param in $angularHelper.getFacadeSet($parameters))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${param.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularHelper.getComponentFileName("${param.name}") )
import { ${param.name} } from 'src/app/gen/model/$path/$fname';
#end
#foreach ($enum in $angularHelper.getFacadeSet($enumerations))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${enum.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularHelper.getComponentFileName("${enum.name}") )
import { ${enum.name} } from 'src/app/gen/model/$path/$fname';
#end
#set ($args = [])
#foreach ($service in $action.controller.allServices)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${service.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularHelper.getComponentFileName("${service.name}Impl") )
import { ${service.name}Impl } from 'src/app/impl/service/$path/$fname';
#end
#if($action.controller)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${action.controller.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularHelper.getComponentFileName("${action.controller.name}Impl") )
import { ${action.controller.name}Impl } from 'src/app/impl/controller/$path/$fname';
#end
#if($action.parameters.size() > 0)
import { $action.formImplementationName } from 'src/app/gen/form${action.path}-form-impl';
#end

@Component({
  selector: '${action.name}-base',
  template: ''
})
export abstract class ${className}Component implements OnInit {
#set ($cr = "
")
#set ( $attr = [] )
#foreach ( $tmp in $action.parameters )
#if($angularHelper.isComplex($tmp))
#set ($i = 1)
#foreach($attribute in $angularHelper.getTableAttributes($tmp))
	${attribute.name}Columns = [
#set($i = 1)
#set ($columns = $angularHelper.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column'#if($i < $columns.size()),$cr#else$cr#end
#set($i = $i + 1)
#end
    ];
    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
#end
#end
#end
    
    @Input() protected $stringUtils.uncapitalize($viewName)Form: FormGroup;
#foreach ( $table in $action.source.tables )
	@Output() ${table.name}: EventEmitter<any> = new EventEmitter();
#end
#foreach ($act in $action.source.actions)
#foreach ($param in $act.parameters)
	@Output() $param.name: EventEmitter<any> = new EventEmitter();
#end
#end
    protected route: ActivatedRoute;
    protected router: Router;
#foreach ($service in $action.controller.allServices)
    protected $stringUtils.uncapitalize($service.name): ${service.name}Impl;
#end
    protected $stringUtils.uncapitalize($viewName): ${viewName}ImplComponent;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
    protected $attribute.name = $attribute.type.name;
    protected ${attribute.name}Options = [];
#elseif($attribute.inputSelect)
#set ($backingListName = ${attribute.getBackingListName($parameter)})
    protected $backingListName: Array<$attribute.type.name>;
#end
#end
#end
#end

    constructor(injector: Injector) {

        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
#foreach ($service in $action.controller.allServices)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.name}Impl);
#end
        this.$stringUtils.uncapitalize($viewName) = injector.get(${viewName}ImplComponent);
        this.formBuilder = injector.get(FormBuilder);
        this._injector = injector;
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
        this.${attribute.name}Options = Object.keys(this.$attribute.name);
#end
#end
#end
#end
    }

    ngOnInit(): void {
	
        this.beforeOnInit();

        this.afterOnInit();
    }

    abstract beforeOnInit();
	
    abstract afterOnInit();
    
    abstract doNgAfterViewInit();

    ngAfterViewInit() {
        this.doNgAfterViewInit();
    }

    getItemControl(name): FormControl {
        return this.${stringUtils.uncapitalize($viewName)}Form.get(name) as FormControl;
    }

    getGroupControl(name): FormGroup {
        return this.${stringUtils.uncapitalize($viewName)}Form.get(name) as FormGroup;
    }

    getArrayControl(name): FormArray {
        return this.${stringUtils.uncapitalize($viewName)}Form.get(name) as FormArray;
    }

#foreach ( $tmp in $action.parameters )
#if($angularHelper.isComplex($tmp))
#set ($i = 1)
#foreach($attribute in $tmp.attributes)
#if($attribute.inputTable)
    get ${attribute.name}(): FormArray {
        return this.getGroupControl('$tmp.name').get('$attribute.name') as FormArray;
    }
#end
#end
#end
#end
	
	abstract do$stringUtils.capitalize(${action.triggerName})();
    abstract after$stringUtils.capitalize(${action.triggerName})();
    
    ${action.triggerName}() {
		this.do$stringUtils.capitalize(${action.triggerName})();
#if($action.parameters.size() > 0)
#foreach ($parameter in $action.parameters)

        let $parameter.name = this.getItemControl('$parameter.name').value;
        let form = this.getForm();
        form = ${action.formImplementationName}.${parameter.setterName}(form, $parameter.name);
        this.setForm(form);
#end
#end
        this.${action.controller.beanName}.${action.triggerName}();

        this.after$stringUtils.capitalize(${action.triggerName})();
    }

#if($action.controller)
    get ${action.controller.beanName}(): ${action.controller.name}Impl {
        
        return this._injector.get(${action.controller.name}Impl);
    }
#end

#if($action.parameters.size() > 0)
    getForm(): $action.formImplementationName {
        
        let tmp = localStorage.getItem('$action.formBeanName');
        let form: $action.formImplementationName = new ${action.formImplementationName}();
        
        if(tmp && tmp !== 'undefined' && tmp !== 'null') {
            form = JSON.parse(tmp);
        }

        return form;
    }

    setForm(form: $action.formImplementationName) {
        localStorage.setItem('$action.formBeanName', JSON.stringify(form));
    }
#end
}
