// Generated by andromda-angular cartridge (view\action\view.action.ts.vsl) DO NOT EDIT! -->
import { Component, OnInit, Injector, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

#foreach ($import in $action.imports)
#if($import.tableComponentImplementationName)
import { $import.tableComponentImplementationName } from '@app/${import.implementationFilePath}';
#elseif($import.componentImplementationName)
import { $import.componentImplementationName } from '@app/${import.implementationFilePath}';
#elseif(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end

@Component({
  selector: '${action.selectorName}-base',
  template: ''
})
export abstract class ${action.componentName} implements OnInit {

#foreach ( $tmp in $action.parameters )
#if($angularUtils.isComplex($tmp))
#foreach($attribute in $angularUtils.getTableAttributes($tmp))
	${attribute.name}Columns = [
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#end
#end
    @Input() $action.formName: FormGroup;
    @Input() pageVariables: any;
#foreach ( $table in $action.source.tables )
	@Output() ${table.name}: EventEmitter<any> = new EventEmitter();
#end
    @Output() ${action.formEventName}: EventEmitter<any> = new EventEmitter();
    protected route: ActivatedRoute;
    protected router: Router;
#foreach ($service in $action.controller.allRestControllers)
    protected $stringUtils.uncapitalize($service.name): ${service.implementationName};
#end
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
#set ($selections = [])
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = [];
#elseif($attribute.inputSelect || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($parameter)})
#set($ret = $selections.add($attribute.type))
    $backingListName: Array<$angularUtils.getDatatype($attribute.type.name)> = [];
#end
#end
#else
#if($parameter.type.enumeration)
    ${parameter.name}T = $parameter.type.name;
    ${parameter.name}Options = Object.keys(this.${parameter.name}T);
#elseif($parameter.inputSelect)
#set($ret = $selections.add($parameter.type))
    @Input() ${parameter.backingListName}: Array<$angularUtils.getDatatype($parameter.type.name)> = [];
#end
#end
#end

    constructor(injector: Injector) {

        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
#foreach ($service in $action.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.implementationName});
#end
        this.formBuilder = injector.get(FormBuilder);
        this._injector = injector;
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
        this.${attribute.name}Options = Object.keys(this.${attribute.name}T);
#end
#end
#end
#end
    }

    ngOnInit(): void {
	
        this.beforeOnInit();
        this.afterOnInit();
    }

    abstract beforeOnInit(): void;
	
    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit(): void {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return <FormControl>this.${action.formName}.get(name);
    }

    getGroupControl(name: string): FormGroup {
        return <FormGroup>this.${action.formName}.get(name);
    }

    getArrayControl(name: string): FormArray {
        return <FormArray>this.${action.formName}.get(name);
    }

#foreach ( $parameter in $action.parameters )
#if($parameter.complex)
#foreach($attribute in $parameter.attributes)
#if($angularUtils.isTable($attribute))
    get ${attribute.name}(): FormArray {
        return <FormArray>this.getItemControl('$parameter.name').get('$attribute.name');
    }

#end
#end
#end
#end
    abstract before$stringUtils.capitalize(${action.triggerName})(): void;
    abstract after$stringUtils.capitalize(${action.triggerName})(): void;
    
    do$stringUtils.capitalize(${action.triggerName})(): void {

        this.before$stringUtils.capitalize(${action.triggerName})();
        this.${action.formEventName}.emit();
        this.after$stringUtils.capitalize(${action.triggerName})();
    }

#if($action.controller)
    get ${action.controller.variableName}(): ${action.controller.name}Impl {
        
        return this._injector.get(${action.controller.implementationName});
    }
#end
}
