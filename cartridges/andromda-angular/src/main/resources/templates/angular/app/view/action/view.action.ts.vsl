// Generated by andromda-angular cartridge (view\action\view.action.ts.vsl) DO NOT EDIT! -->
#set ( $actionPath = $action.path )
#set ( $fileName = $angularUtils.getComponentFileName("$action.name") )
#set ( $selectorName = $angularUtils.getSelectorName("$actionPath") )
#set ( $className = $angularUtils.getActionName("$actionPath") )
import { Component, OnInit, Injector, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RxFormBuilder } from '@rxweb/reactive-form-validators';
import { NgForm, FormGroup, FormControl, FormArray, FormBuilder } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { ControllerBase } from '@app/controller/utils/controller.base';

#set ( $viewFile = $angularUtils.getComponentFileName("${action.source.name}") )
#set ($params = $angularUtils.getFormFields($${action.source.actions}))

#set ( $viewName = $angularUtils.getComponentName($viewFile, '-') )
import { ${viewName}ImplComponent } from '@app/view${action.source.path}.impl.component';
#set ( $parameters = [] )
#set ( $enumerations = [] )
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#set ( $ret = $parameters.add($parameter.type) )
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
#set ( $ret = $enumerations.add($attribute.type) )
#elseif($angularUtils.isComplex($attribute))
#set ( $ret = $parameters.add($attribute.type) )
#end
#end
#end
#end
#foreach ($param in $angularUtils.getFacadeSet($parameters))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${param.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${param.name}") )
import { ${param.name} } from '@app/model/$path/$fname';
#end
#foreach ($enum in $angularUtils.getFacadeSet($enumerations))
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${enum.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${enum.name}") )
import { ${enum.name} } from '@app/model/$path/$fname';
#end
#set ($args = [])
#foreach ($service in $action.controller.allRestControllers)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${service.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${service.name}Impl") )
import { ${service.name}Impl } from '@app/service/$path/$fname';
#end
#if($action.controller)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${action.controller.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${action.controller.name}Impl") )
import { ${action.controller.name}Impl } from '@app/controller/$path/$fname';
#end
#foreach( $parameter in $action.parameters )
#if($parameter.type.enumeration)
#set ( $path = "$stringUtils.replaceChars($stringUtils.lowerCase(${parameter.type.packageName}), '\\.', '\\/')" )
#set ( $fname = $angularUtils.getComponentFileName("${parameter.type.name}") )
import { ${parameter.type.name} } from '@app/model/$path/$fname';
#end
#end

@Component({
  selector: '${selectorName}-base',
  template: ''
})
export abstract class ${className}Component implements OnInit {

#set ($cr = "
")
#set ( $attr = [] )
#foreach ( $tmp in $action.parameters )
#if($angularUtils.isComplex($tmp))
#set ($i = 1)
#foreach($attribute in $angularUtils.getTableAttributes($tmp))
	${attribute.name}Columns = [
#set($i = 1)
#set ($columns = $angularUtils.getTableColumns($attribute))
#foreach ($column in $columns)
        '$column',
#end
    ];

    @ViewChild('${attribute.name}Paginator', {static: true}) ${attribute.name}Paginator: MatPaginator;
    @ViewChild('${attribute.name}Sort', {static: true}) ${attribute.name}Sort: MatSort;
    
#end
#end
#end
    @Input() $stringUtils.uncapitalize($className)Form: FormGroup;
    @Input() pageVariables: any;
#foreach ( $table in $action.source.tables )
	@Output() ${table.name}: EventEmitter<any> = new EventEmitter();
#end
    @Output() ${stringUtils.uncapitalize($className)}Event: EventEmitter<any> = new EventEmitter();
###foreach ($param in $params)
##set($name = $stringUtils.replaceChars(${act.trigger.name}, '\\ ', ''))
##	@Output() $param.name: EventEmitter<any> = new EventEmitter();
###end
    protected route: ActivatedRoute;
    protected router: Router;
#foreach ($service in $action.controller.allRestControllers)
    protected $stringUtils.uncapitalize($service.name): ${service.name}Impl;
#end
    protected ${stringUtils.uncapitalize($viewName)}Component: ${viewName}ImplComponent;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    
#set ($selections = [])
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
    ${attribute.name}T = $attribute.type.name;
    ${attribute.name}Options: string[] = [];
#elseif($attribute.inputSelect || ($angularUtils.isComplex($attribute) && !$angularUtils.isTable($attribute)))
#set ($backingListName = ${attribute.getBackingListName($parameter)})
#set($ret = $selections.add($attribute.type))
    $backingListName: Array<$angularUtils.getDatatype($attribute.type.name)> = [];
#end
#end
#else
#if($parameter.type.enumeration)
    ${parameter.name}T = $parameter.type.name;
    ${parameter.name}Options = Object.keys(this.${parameter.name}T);
#elseif($parameter.inputSelect)
#set($ret = $selections.add($parameter.type))
    ${parameter.name}BackingList: Array<$angularUtils.getDatatype($parameter.type.name)> = [];
#end
#end
#end

    constructor(injector: Injector) {

        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
#foreach ($service in $action.controller.allRestControllers)
        this.$stringUtils.uncapitalize($service.name) = injector.get(${service.name}Impl);
#end
        this.${stringUtils.uncapitalize($viewName)}Component = injector.get(${viewName}ImplComponent);
        this.formBuilder = injector.get(FormBuilder);
        this._injector = injector;
#foreach( $parameter in $action.parameters )
#if($parameter.complex)
#foreach( $attribute in $parameter.attributes )
#if($attribute.type.enumeration)
        this.${attribute.name}Options = Object.keys(this.${attribute.name}T);
#end
#end
#end
#end
    }

    ngOnInit(): void {
	
        this.beforeOnInit();

        this.afterOnInit();
    }

    abstract beforeOnInit(): void;
	
    abstract afterOnInit(): void;
    
    abstract doNgAfterViewInit(): void;

    ngAfterViewInit(): void {
        this.doNgAfterViewInit();
    }

    getItemControl(name: string): FormControl {
        return <FormControl>this.${stringUtils.uncapitalize($className)}Form.get(name);
    }

    getGroupControl(name: string): FormGroup {
        return <FormGroup>this.${stringUtils.uncapitalize($className)}Form.get(name);
    }

    getArrayControl(name: string): FormArray {
        return <FormArray>this.${stringUtils.uncapitalize($className)}Form.get(name);
    }

#foreach ( $parameter in $action.parameters )
#if($angularUtils.isComplex($parameter))
#set ($i = 1)
#foreach($attribute in $parameter.attributes)
#if($angularUtils.isTable($attribute))
    get ${attribute.name}(): FormArray {
        return <FormArray>this.getItemControl('$parameter.name').get('$attribute.name');
    }

#end
#end
#end
#*   *##if($parameter.many)
#*     *##set($returnType = "FormArray")
#*   *##elseif($parameter.complex)
#*     *##set($returnType = "FormGroup")
#*   *##else
#*     *##set($returnType = "FormControl")
#*   *##end
    set$stringUtils.capitalize($parameter.name)($parameter.name: $angularUtils.getDatatype($parameter.type.name)#if($parameter.many)[]#end): $returnType {

        this.${stringUtils.uncapitalize(${className})}Form.get('$parameter.name').setValue($parameter.name);

        return this.${stringUtils.uncapitalize(${className})}Form.get('$parameter.name') as $returnType;
    }

#end
    abstract do$stringUtils.capitalize(${action.triggerName})(#if(!$action.formFields.empty)form: any#end): void;
    abstract after$stringUtils.capitalize(${action.triggerName})(#if(!$action.formFields.empty)form: any#end): void;
    
    ${action.triggerName}(): void {

#if(!$action.formFields.empty)
        let form = this.${stringUtils.uncapitalize($className)}Form?.value;
#end
        this.do$stringUtils.capitalize(${action.triggerName})(#if(!$action.formFields.empty)form#end);
        this.${action.controller.beanName}.${action.triggerName}(#if(!$action.formFields.empty)form#else{}#end);

        this.after$stringUtils.capitalize(${action.triggerName})(#if(!$action.formFields.empty)form#end);
    }

#if($action.controller)
    get ${action.controller.beanName}(): ${action.controller.name}Impl {
        
        return this._injector.get(${action.controller.name}Impl);
    }
#end
}
