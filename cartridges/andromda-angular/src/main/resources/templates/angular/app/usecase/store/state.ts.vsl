#set ($serviceName = "$stringUtils.uncapitalize(${service.name})")
import { inject } from '@angular/core';
import { patchState, signalStore, withMethods, withState } from '@ngrx/signals';
import { rxMethod } from '@ngrx/signals/rxjs-interop';
import { switchMap } from 'rxjs';
import { tapResponse } from '@ngrx/operators';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { AppState } from '@app/store/app-state';
import { ${service.name} } from ${escTool.s}@app/${service.filePath}${escTool.s};

const initialState: AppState<any, any> = {
  data: new any(),
  dataList: [],
  dataPage: new Page<any>(),
  searchCriteria: new SearchObject<any>(),
  error: null,
  loading: false,
  success: false,
};

export const ${service.name}Store = signalStore(
  { providedIn: 'root' },
  withState(initialState),
  withMethods((store) => {
    const ${serviceName} = inject(${service.name});
    return {
      reset: () => {
        patchState(store, initialState);
      },
#foreach ($operation in $service.allowedOperations)
#set($methodParams = "void")
#if(!$operation.arguments.empty)
#if(!$operation.arguments.size() == 1)
#set($methodParams = "void")
#else
#set($methodParams = "{ ")
#foreach ($arg in $operation.arguments)
#end
#set($methodParams = "$methodParams }")
#end
#end
      ${operation.name}: rxMethod<$methodParams>(
        switchMap((#if(!$operation.arguments.empty)data#end) => {
          patchState(store, { loading: true });
          return ${serviceName}.${operation.name}(#foreach($args in $service.arguments)data.${data.getterName}()#end).pipe(
            tapResponse({
              next: (data) => {
                // patchState(store, { data, loading: false, success: true });
              },
              error: (error) => {
                patchState(store, { error, loading: false, success: false });
              },
            }),
          );
        }),
      )
#end
  }),
);
