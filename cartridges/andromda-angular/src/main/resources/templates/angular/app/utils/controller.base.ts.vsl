// license-header java merge-point
// Generated by andromda-angular cartridge (utils\controller.base.ts.vsl) DO NOT EDIT!
#set ($generatedFile = "utils/controller.base.ts")
import { Injector } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

/**
 * Base class for all controllers
 */
export abstract class ControllerBase
{
    static USE_CASE_SCOPE_KEY = 'useCaseScope';
    static CURRENT_PAGE_VARIABLES_KEY = 'viewVariables';
    static PAGE_VARIABLES_SUFFIX = '-pageVariables';
    
    static USE_CASE_PARAMETERS_KEY = 'useCaseParameters';
    static USE_CASE_RETURN_VALUES_KEY = 'useCaseReturnValues';
    static USE_CASE_IN_DIALOG_KEY = '_dialog';
    static USE_CASE_PARAMETER_PREFIX = '_useCaseParameter.';
    static USE_CASE_JS_RETURN_VALUE_KEY = 'jsReturnValue';
    static USE_CASE_PARAMETER_NAMES = 'parameterNames';

    protected router: Router;

    constructor(injector: Injector) {
        this.router = injector.get(Router);
    }

    /**
     * Returns the page variables associated with the view.
     *
     * @param view the view
     */
    static getPageVariables(): any
    {
        const key = ControllerBase.PAGE_VARIABLES_SUFFIX;
        let useCaseScope = ControllerBase.getUseCaseScope();
        let pageVariables;
        if(useCaseScope[key])
        {
            pageVariables = useCaseScope[key];
        } 
        else
        {
            pageVariables = {};
            useCaseScope[key] = pageVariables;
        }
        return pageVariables;
    }
    
    /**
     * Returns the page variables associated with the view.
     *
     * @param view the view
     */
    static setPageVariables(pageVariables: any): void
    {
        const key = ControllerBase.PAGE_VARIABLES_SUFFIX;
        let useCaseScope = ControllerBase.getUseCaseScope();
        useCaseScope.pageVariables = pageVariables;
        localStorage.setItem(ControllerBase.USE_CASE_SCOPE_KEY, JSON.stringify(useCaseScope));

        return pageVariables;
    }

    /**
     * Returns the use case parameters.
     *
     * @return Object
     */
    getUseCaseParameters(): any
    {
        return ControllerBase.getUseCaseScope()[ControllerBase.USE_CASE_PARAMETERS_KEY];
    }
    
    /**
     * Returns the use case return values.
     *
     * @return java.util.Map<String,Object>
     */
    static getUseCaseReturnValues(): any
    {
        return ControllerBase.getUseCaseScope()[ControllerBase.USE_CASE_RETURN_VALUES_KEY];
    }
    
    /**
     * Removes all the forms and page variables from the current flash scope.
     */
    resetUseCaseScope(): any
    {
        let useCaseScope = {};

        useCaseScope[ControllerBase.USE_CASE_PARAMETERS_KEY] = {};
        useCaseScope[ControllerBase.USE_CASE_RETURN_VALUES_KEY] = {};

        ControllerBase.setUseCaseScope(useCaseScope);
        return useCaseScope;
    }

    /**
     * Returns the useCaseScope
     *
     * @return java.util.Map<String,Object>
     */
    static getUseCaseScope(): any
    {
        let useCaseScope = JSON.parse(localStorage.getItem(ControllerBase.USE_CASE_SCOPE_KEY));
        if(!useCaseScope) {
            useCaseScope = {};
        }

        return useCaseScope;
    }
    
    /**
     * Sets the current useCaseScope
     * 
     * @param useCaseScope the new value for useCaseScope
     */
    static setUseCaseScope(useCaseScope: any)
    {
        localStorage.setItem(ControllerBase.USE_CASE_SCOPE_KEY, JSON.stringify(useCaseScope));
        return useCaseScope;
    }
    
    //used in the ExceptionHandler
    //export static const LAST_POSTED_FORM_CLIENT_ID = this.constructor.name + '__LAST_POSTED_FORM_CLIENT_ID__';
    static LAST_POSTED_FORM_CLIENT_ID = 'ControllerBase__LAST_POSTED_FORM_CLIENT_ID__';

    /**
     * Sets the client identifier of the last posted form
     *
     * @param clientId the client identifier of the last posted form
     */
    setLastPostedFormClientId(clientId: string)
    {
        localStorage.setItem(ControllerBase.LAST_POSTED_FORM_CLIENT_ID, clientId);
    }
    
    /**
     * Gets the client identifier of the last posted form
     *
     * @return the client identifier of the last posted form
     */    
    getLastPostedFormClientId(): string
    {
        return localStorage.getItem(ControllerBase.LAST_POSTED_FORM_CLIENT_ID);
    }
 
    //start/finish use case
    
    protected abstract internalStartUseCase(pageVariables: any): string;

    /**
     * Starts a use case
     *
     * @return the start use case
     */
    startUseCase(): string
    {
        let pageVariables: Object = ControllerBase.getPageVariables();
   

        //reset the useCaseScope and put the parameters available.
        let useCaseScope = this.resetUseCaseScope();

        return this.internalStartUseCase(pageVariables);
    }

    /**
     * Checks if use case is in a dialog
     *
     * @return true if use case is in a dialog
     */    
    isUseCaseInDialog(): boolean
    {
        return ControllerBase.getUseCaseScope()[ControllerBase.USE_CASE_IN_DIALOG_KEY] === 'true';
    }
    
    /**
     * Informs if the use case is in a dialog
     * 
     * @param value flag that indicates if the use case is in a dialog
     */    
    protected setUseCaseInDialog(value: boolean): void
    {
        ControllerBase.getUseCaseScope()[ControllerBase.USE_CASE_IN_DIALOG_KEY] =  value;
    }

    /**
     * Returns from the dialog
     * 
     */    
    protected closeDialog(): string
    {
        return "/closeDialog";
    }
    
    /**
     * Sets the return values in useCaseReturnValues
     * 
     */    
    protected setReturnValues(names: Array<string>, values: Array<Object>): string
    {
        if(names != null)
        {
            const returnValues = ControllerBase.getUseCaseReturnValues();
            const jsResult = {};

            for(let i=0; i<names.length; i++)
            {
                returnValues[names[i]] =  values[i];
                jsResult[names[i]] = values[i];
            }
            
            returnValues[ControllerBase.USE_CASE_JS_RETURN_VALUE_KEY] = JSON.stringify(jsResult);
        }
        
        return this.closeDialog();
    }
    
    public nullAction(): string
    {
        return null;
    }
    
    // controller-base merge-point
}
