// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\ControllerBase.java.vsl) DO NOT EDIT!
#set ( $componentPath = $stringUtils.replaceChars('{$applicationPackage}.utils', '\\.', '\\/') )
#set ($generatedFile = "$componentPath/controller.base.ts")

/**
 * Base class for all controllers
 */
export abstract class ControllerBase
{
    export const USE_CASE_SCOPE_KEY = 'useCaseScope';
    export const CURRENT_PAGE_VARIABLES_KEY = 'viewVariables';
## *** should go to the namespace configuration
    export const PAGE_VARIABLES_SUFFIX = '-pageVariables';
    
    export const USE_CASE_PARAMETERS_KEY = 'useCaseParameters';
    export const USE_CASE_RETURN_VALUES_KEY = 'useCaseReturnValues';
    export const USE_CASE_IN_DIALOG_KEY = '_dialog';
    export const USE_CASE_PARAMETER_PREFIX = '_useCaseParameter.';
    export const USE_CASE_JS_RETURN_VALUE_KEY = 'jsReturnValue';
    export const USE_CASE_PARAMETER_NAMES = 'parameterNames';

    /**
     * Returns the page variables associated with the view.
     *
     * @param view the view
     */
    getPageVariables(view: string): any
    {
        const key=view+"-"+PAGE_VARIABLES_SUFFIX;
        let useCaseScope=getUseCaseScope();
        let pageVariables;
        if(useCaseScope.containsKey(key))
        {
            pageVariables = useCaseScope[key];
        } 
        else
        {
            pageVariables = {};
            useCaseScope[key] = pageVariables;
        }
        return pageVariables;
    }

    /**
     * Returns the use case parameters.
     *
     * @return Object
     */
    getUseCaseParameters(): any
    {
        return getUseCaseScope()[(USE_CASE_PARAMETERS_KEY];
    }
    
    /**
     * Returns the use case return values.
     *
     * @return java.util.Map<String,Object>
     */
    getUseCaseReturnValues(): any
    {
        return getUseCaseScope()[USE_CASE_RETURN_VALUES_KEY];
    }
    
    /**
     * Removes all the forms and page variables from the current flash scope.
     */
    protected resetUseCaseScope(): any
    {
        let useCaseScope = {
            USE_CASE_PARAMETERS_KEY: {},
            USE_CASE_RETURN_VALUES_KEY: {}
        };
        this.setUseCaseScope(useCaseScope);
        return useCaseScope;
    }

    /**
     * Returns the useCaseScope
     *
     * @return java.util.Map<String,Object>
     */
    static getUseCaseScope(): any
    {
        return localStorage.getItem(USE_CASE_SCOPE_KEY);
    }
    
    /**
     * Sets the current useCaseScope
     * 
     * @param useCaseScope the new value for useCaseScope
     */
    setUseCaseScope(useCaseScope: any)
    {
        localStorage.setItem(USE_CASE_SCOPE_KEY, useCaseScope);
        return useCaseScope;
    }
    
    //used in the ExceptionHandler
    export const LAST_POSTED_FORM_CLIENT_ID=ControllerBase.class.getName()+"__LAST_POSTED_FORM_CLIENT_ID__";

    /**
     * Sets the client identifier of the last posted form
     *
     * @param clientId the client identifier of the last posted form
     */
    protected setLastPostedFormClientId(clientId)
    {
        localStorage.setItem(LAST_POSTED_FORM_CLIENT_ID, clientId);
    }
    
    /**
     * Gets the client identifier of the last posted form
     *
     * @return the client identifier of the last posted form
     */    
    public getLastPostedFormClientId(): string
    {
        return localStorage.getItem(LAST_POSTED_FORM_CLIENT_ID);
    }
 
    //start/finish use case
    
    protected abstract internalStartUseCase(useCaseParameters: any): string;

    /**
     * Starts a use case
     *
     * @return the start use case
     */
    startUseCase(): string
    {
        const useCaseParameters: Object;
        
        if(ControllerBase.getUseCaseScope() === null)//can be null if executed from the url
        {
            useCaseParameters = {};
            //final javax.servlet.http.HttpServletRequest request=JsfUtils.getRequest();
            const parameterNames = localStorage.getItem(USE_CASE_PARAMETER_NAMES);
            
            for (let key in parameterNames) {
                const parameterName: string = parameterNames[key];
                if(parameterName.startsWith(USE_CASE_PARAMETER_PREFIX))
                {
                    useCaseParameters[parameterName.substring(USE_CASE_PARAMETER_PREFIX.length())] = localStorage.getItem(parameterName));
                }
            }
        }
        else
        {
            useCaseParameters=this.getUseCaseParameters();
        }

        //reset the useCaseScope and put the parameters available.
        this.resetUseCaseScope()[USE_CASE_PARAMETERS_KEY] = useCaseParameters;
        
        //setUseCaseInDialog(BooleanUtils.toBoolean(useCaseParameters[USE_CASE_IN_DIALOG_KEY]));

        return internalStartUseCase(useCaseParameters);
    }

    /**
     * Checks if use case is in a dialog
     *
     * @return true if use case is in a dialog
     */    
    isUseCaseInDialog(): boolean
    {
        return Boolean.TRUE.equals(getUseCaseScope().get(USE_CASE_IN_DIALOG_KEY));
    }
    
    /**
     * Informs if the use case is in a dialog
     * 
     * @param value flag that indicates if the use case is in a dialog
     */    
    protected setUseCaseInDialog(value: boolean): void
    {
        getUseCaseScope()[USE_CASE_IN_DIALOG_KEY] =  value;
    }

    /**
     * Returns from the dialog
     * 
     */    
    protected closeDialog(): string
    {
        return "/closeDialog.jsf";
    }
    
    /**
     * Sets the return values in useCaseReturnValues
     * 
     */    
    protected setReturnValues(names: Array<string>, values: Array<Object>): string
    {
        if(names != null)
        {
            const returnValues = getUseCaseReturnValues();
            const jsResult = {};

            for(int i=0; i<names.length; i++)
            {
                returnValues[names[i]] =  values[i];
                jsResult[names[i]] = values[i];
            }
            
            returnValues.put(USE_CASE_JS_RETURN_VALUE_KEY, JSON.stringify(jsResult));
        }
        
        return closeDialog();
    }
    
    public nullAction(): string
    {
        return null;
    }
    
    // controller-base merge-point
}
