#set ($componentPath = $stringUtils.replaceChars(${service.packageName}, "\\.", "\\/"))
#set ($fileName = $angularHelper.getComponentFileName($service.name))
#set ($args = [])
#set ($ret = false)
#foreach ($operation in $service.operations)
#foreach ( $argument in $operation.arguments)
#set ($ret = $args.add($argument))
#end
#set ( $ret = $args.add($operation.returnType))
#end
#if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))
#set ($basePath = "http://localhost:8080")
import { HttpClient} from '@angular/common/http';
import { Injector } from '@angular/core';
#end
import { Observable } from 'rxjs';
#set ($suffix = "")
#foreach ($tmp in $angularHelper.getImports($args, ${service.packageName}, $suffix))
$tmp
#end

export abstract class $service.name {

#if ($service.restCount>0)
#if ($stringUtils.isNotBlank($service.restPath))
    protected path: string;

#end
#end 
#if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))
    protected http: HttpClient;
    constructor(injector: Injector) {
        this.path = '$basePath$service.restPath';
        this.http = injector.get(HttpClient);
    }
#end
#foreach ($operation in $service.operations)
#set ($arguments = $angularHelper.getMethodSignatureArguments($operation.arguments))
#set ($argNames = $angularHelper.getMethodCallArguments($operation.arguments))
#set ($returnType = $angularHelper.getDatatype($operation.returnType.name))
#if (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "$returnType[]")
#end
#set ($returnType2 = "Observable<$returnType>")
    /**
     * 
##if ($operation.rest)
#if ($stringUtils.isNotBlank($operation.restRequestType))
     * $operation.restRequestType
#end
     * @Path($operation.restPath)
#if ($stringUtils.isNotBlank($operation.restProduces))
     * @Produces($operation.restProduces)
#end
#if ($stringUtils.isNotBlank($operation.restConsumes))
     * @javax.ws.rs.Consumes($operation.restConsumes)
#end
##end
     */
    public abstract ${operation.name}($arguments): $returnType2;

#end
}

