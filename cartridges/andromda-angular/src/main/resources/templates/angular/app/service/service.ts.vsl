// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
## import { $service.name } from '@app/$service.filePath';
#foreach ($import in $service.imports)
#if(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';

@Injectable({
  providedIn: 'root'
})
export class ${service.name} {
    
#if ($service.restCount>0)
#if ($stringUtils.isNotBlank($service.restPath))
    protected path = '$service.restPath';

#end
#end
#if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))
    private http = inject(HttpClient);
#end

#foreach ($operation in $service.allowedOperations)
    public $operation.signature {

#set ($methodName = $operation.restRequestType)

#if ( $methodName.equals("get") || $methodName.equals("delete")) 
        return this.http.${methodName}<$operation.returnTypeName>(this.path#if($operation.restPath.length() > 0) + `$operation.restPath`#end);
#else
        return this.http.${methodName}<$operation.returnTypeName>(this.path#if($operation.restPath.length() > 0) + `$operation.restPath`#end#if (!$operation.arguments.empty), $angularUtils.getMethodCallArguments($operation.arguments)#end);
#end

    }

#end
}
