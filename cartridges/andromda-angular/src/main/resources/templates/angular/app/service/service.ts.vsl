// Generated by andromda-angular cartridge (service\service.ts.vsl) DO NOT EDIT
## import { environment } from 'src/environments/environment'
## #if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))
## import { HttpClient} from '@angular/common/http';
## import { Injector } from '@angular/core';
## #end
## import { Observable } from 'rxjs';

## #foreach ($import in $service.imports)
## #if(${import.implementationFilePath})
## import { $import.implementationName } from '@app/${import.implementationFilePath}';
## #else
## import { $import.name } from '@app/${import.filePath}';
## #end
## #end

## export abstract class $service.name {

## #if ($service.restCount>0)
## #if ($stringUtils.isNotBlank($service.restPath))
##     protected path = '$service.restPath';

## #end
## #end
## #if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))
##     protected http: HttpClient;

##     constructor(injector: Injector) {
##         this.http = injector.get(HttpClient);
##     }
## #end
## #foreach ($operation in $service.allowedOperations)

##      /**
##       * 
## #if ($stringUtils.isNotBlank($operation.restRequestType))
##       * $operation.restRequestType
## #end
##       * @Path('$operation.restPath')
## #if ($stringUtils.isNotBlank($operation.restProduces))
##       * @Produces($operation.restProduces)
## #end
## #if ($stringUtils.isNotBlank($operation.restConsumes))
##       * @javax.ws.rs.Consumes($operation.restConsumes)
## #end
##       */
##      public abstract $operation.signature;
## #end
## }
// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
## import { $service.name } from '@app/$service.filePath';
#foreach ($import in $service.imports)
#if(${import.implementationFilePath})
import { $import.implementationName } from '@app/${import.implementationFilePath}';
#else
import { $import.name } from '@app/${import.filePath}';
#end
#end
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class ${service.name} {
#if ($service.restCount>0)
#if ($stringUtils.isNotBlank($service.restPath))
    protected path = '$service.restPath';

#end
#end

    constructor(#if ($service.restCount>0 && $stringUtils.isNotBlank($service.restPath))private http: HttpClient#end) {
    }

#foreach ($operation in $service.allowedOperations)
    public $operation.signature {

#set ($methodName = $operation.restRequestType)
#if(!$operation.arguments.empty)
#set($pathVars = "")
#set($count = 0)
#foreach ($arg in $operation.arguments)
#set ($begin = "{")
#set ($end = "}")
#set ($dollar = "$")
#set($pathVars = "$pathVars/$arg.name/$dollar${begin}${arg.name}$end")
#end
#end
#if ( $methodName.equals("get")) 
        return this.http.${methodName}<$operation.returnTypeName>(this.path#if($operation.restPath.length() > 0) + `$operation.restPath`#end);
#elseif ( $methodName.equals("delete")) 
        return this.http.${methodName}<$operation.returnTypeName>(this.path#if($operation.restPath.length() > 0) + `$operation.restPath`#end);
#else
        return this.http.${methodName}<$operation.returnTypeName>(this.path#if($operation.restPath.length() > 0) + `$operation.restPath`#end#if (!$operation.arguments.empty), $angularUtils.getMethodCallArguments($operation.arguments)#end);
#end

    }

#end
}
