#set ( $componentPath = "$stringUtils.replaceChars($stringUtils.lowerCase(${table.packageName}), '\\.', '\\/')" )
#set ( $fileName = $angularUtils.getComponentFileName("${table.view.name}-${table.name}") )
#set ( $viewFile = $angularUtils.getComponentFileName("${table.view.name}") )
#set ($viewName = $angularUtils.getComponentName($viewFile, '-') )
<!-- Generated by andromda-angular cartridge (angular\app\view\table\table.component.html.vsl) DO NOT EDIT! -->
<div class="card-body">
#set ($targetColumns = $table.targettedTableColumnNames)
#if (!$table.tableColumns.empty)
    <div class="table table-striped"#if($table.displayCondition) *ngIf="$table.displayCondition"#end>
        <div class="mb-3" >
          <!-- <button type="button" class="btn btn-info" (click)="matTableExporter.exportTable('xlsx', {fileName:'${table.name}', sheet: '${table.name}'})">XLSX</button>
          <button type="button" class="btn btn-info" (click)="matTableExporter.exportTable('csv', {fileName:'${table.name}'})">CSV</button>
          <button type="button" class="btn btn-info" (click)="matTableExporter.exportTable('json', {fileName:'${table.name}'})">JSON</button>
          <button type="button" class="btn btn-info" (click)="matTableExporter.exportTable('txt', {fileName:'${table.name}'})">Text</button> -->
        </div>
        <mat-table matSort matTableExporter [dataSource]="${table.name}DataSource" #${table.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
#foreach ($column in $table.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
#set ($tableColumnActions = $table.getTableColumnActions($columnName))
            <ng-container matColumnDef="${columnName}">
                <mat-header-cell *matHeaderCellDef mat-sort-header><span translate>$table.getTableColumnMessageKey($columnName)</span></mat-header-cell>
                <mat-cell *matCellDef="let row"> 
#if (!$tableColumnActions.empty)
#set ($action = $tableColumnActions.iterator().next())
                    <a routerLink=""  id="${columnName}Action" (click)='${action.triggerName}(row?.${stringUtils.replace("${columnName}", ".", "?.")})'>
                        {{ row?.${stringUtils.replace("${columnName}", ".", "?.")}#if($column.inputDate || $column.type.dateType) | date#end }}
                    </a> 
#else
                    {{ row?.${stringUtils.replace("${columnName}", ".", "?.")}#if($column.inputDate || $column.type.dateType) | date#end }}
#end
                </mat-cell>
            </ng-container>
#end
#if ($table.tableFormActions.size() > 0)
            <ng-container matColumnDef="actions">
                <mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
                <mat-cell *matCellDef="let row">
                    <div class = "form-group">
#foreach ($action in $table.tableFormActions)
                        <button type = "button" class="btn btn-info" (click)="${action.triggerName}(#renderAngularTableCommandLinkParameters())" translate>
#if($action.icon)
                            <mat-icon fontIcon="$action.icon" aria-hidden="false" aria-label="$action.icon"></mat-icon>
#end
                            $action.trigger.messageKey $action.
                        </button>
#end
                    </div>    
                </mat-cell>
            </ng-container>
#end
## - render any table hyperlink actions
#foreach ($action in $table.tableHyperlinkActions)
#if (!$action.tableLinkColumnName)
            <ng-container matColumnDef="actions">
                <mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
                <mat-cell *matCellDef="let row">
                    <div class = "form-group">
                        <a routerLink="" (click)="${action.triggerName}(#renderAngularTableCommandLinkParameters())" translate>$action.trigger.messageKey</a> 
                    </div>    
                </mat-cell>
            </ng-container>
#end
#end
            <mat-header-row *matHeaderRowDef="${table.name}Columns"></mat-header-row>
            <mat-row *matRowDef="let row; columns: ${table.name}Columns;"></mat-row>
        </mat-table>
        <mat-paginator 
            #${table.name}Paginator="matPaginator" 
            [length]="totalElements()"
            [pageSize]="10" 
            [pageSizeOptions]="[10, 50, 100, 250]" 
            showFirstLastButtons>
        </mat-paginator>
    </div>
#end
</div>
