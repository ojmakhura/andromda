
#macro(renderTableColumnNames $parameter $ident)
${ident}<thead>
${ident}   <tr>
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
${ident}        <th translate >$stringUtils.toResourceMessageKey(${column})</th>
#end
#else
#foreach ($column in $parameter.type.attributes)
${ident}        <th translate>$stringUtils.toResourceMessageKey(${column.name})</th>
#end
#end
${ident}    </tr>
${ident}</thead>
#end
##==========================
#macro(renderTableColumns $parameter $ident)
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
#if(!$column.hidden && !$column.inputFile)
#set ($value = "row.${column}")
${ident}    <td id="column_${column}">${value}</td>
#end
#end
#else
#foreach ($column in $parameter.type.attributes)
#if(!$column.hidden && !$column.inputFile)
#set($noOfColumns=$noOfColumns+1)   
#if($column.type.enumeration)
#set($theValue="row.${column.name}.getValue()")
#else
#set($theValue="row.${column.name}")
#end
${ident}    <td id="column_${column.name}">${theValue}#if ($column.type.dateType).toLocaleDateString()#end </td>
#end
#end
#end
#end
##==========================
##
## A macro that renders the appropriate action form input field
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderAngularActionInput $parameter $ownerParameter $ident)
#set($isComplex = $angularUtils.isComplex($parameter))
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#else
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#end
#set ($backingListName = $parameter.backingListName)
#set ($backingValueName = $parameter.backingValueName)
#else
#if($stringUtils.isBlank($ownerParameter)) 
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#set ($backingValueName = $parameter.backingValueName)
#if(!$parameter.backingListName || $stringUtils.isBlank($parameter.backingListName))
#set ($backingListName = "${parameter.name}BackingList")
#end
#else
#set ($propertyId = $metafacadeWebUtils.getFormPropertyId($parameter, $ownerParameter))
#set ($valuePropertyName = $metafacadeWebUtils.getFormPropertyName($parameter, $ownerParameter))
#set ($backingListName = $metafacadeWebUtils.getBackingListName($parameter, $ownerParameter))
#set ($backingValueName = $metafacadeWebUtils.getBackingValueName($parameter, $ownerParameter))
#end
#end
#set ($formValuePropertyName = "${valuePropertyName}")
#if($parameter.inputButton)
${ident}<div class="mb-3">
${ident}    <button mat-flat-button color="primary" (click)="on${stringUtils.capitalize(${propertyId})}Click()" id="${propertyId}" name="${propertyId}">
${ident}        <span translate>$parameter.messageKey</span>
${ident}    </button>
${ident}</div>
#elseif($parameter.inputType == "image" || $parameter.inputFile)
${ident}<mat-form-field class="col-md-8">
${ident}    <div>
${ident}        <mat-label id="${propertyId}_label" class="col-sm-2 col-form-label" for="${propertyId}"><span translate>$parameter.messageKey</span></mat-label>
${ident}    </div>
${ident}    <input matInput id="${propertyId}" form#if($parameter.many)Array#{else}Control#{end}Name="${propertyId}" [hidden]="true" /> 
#set ($deleteFunc = "deleteFromSelected$stringUtils.capitalize(${propertyId})(#if($parameter.many)$index#end)")
#if($parameter.inputType == "image")
#set( $displayName = "${propertyId}Preview#if($parameter.many)s#end")
#set ($item = "preview")
#else
#set( $displayName = "${propertyId}Control.value")
#set ($item = "file")
#end
${ident}    <mat-list#if(!$parameter.many) *ngIf="$displayName"#end>
${ident}        @for ($item of #if($parameter.many)$displayName#else[$displayName]#end; track $index) {
${ident}        <mat-list-item>
#if($parameter.inputType == "image")
                    <img mat-card-image [src]="$item" style="max-width: 100px" />
#else
${ident}            <div matListItemTitle>{{${item}.name}}</div>
#end
#if(!$parameter.readOnly && !$ownerParameter.readOnly)
${ident}            <button mat-icon-button color="primary" matListItemMeta  (click)="$deleteFunc">
${ident}                <mat-icon>delete</mat-icon>
${ident}            </button>
#end
${ident}        </mat-list-item>
${ident}        }
${ident}    </mat-list>
#if(!$parameter.readOnly && !$ownerParameter.readOnly)
${ident}    <input type="file" #if($parameter.inputType == "image")accept="image/*" #{end}id="${propertyId}FileInput" name="${propertyId}FileInput" (change)="${propertyId}SelectFile#if($parameter.many)s#{end}($event)" #if($parameter.many)multiple#end />
#end
${ident}</mat-form-field>
#elseif($angularUtils.isTable($parameter) && !($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$parameter.many))
${ident}	<div>
${ident}        <button mat-button (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon fontIcon="add_box" aria-hidden="false" aria-label="Add"></mat-icon>
${ident}        </button>
${ident}		<mat-table matSort [dataSource]="${propertyId}" #${parameter.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
${ident}			<ng-container matColumnDef="actions">
${ident}				<mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}                <mat-cell *matCellDef="let row; index as i">
${ident}                    <button mat-button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(i)" class="btn btn-info">
${ident}                        <mat-icon fontIcon="delete" aria-hidden="false" aria-label="Delete"></mat-icon>
${ident}                    </button>
${ident}                    <button mat-button color="accent" (click)="doEdit$stringUtils.capitalize(${propertyId})(row)" class="btn btn-info">
${ident}                        <mat-icon fontIcon="edit" aria-hidden="false" aria-label="Edit"></mat-icon>
${ident}                    </button>
${ident}                </mat-cell>
${ident}			</ng-container>
#foreach( $column in $parameter.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row?.${stringUtils.replace("${columnName}", ".", "?.")} }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${propertyId}ModalColumns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${propertyId}ModalColumns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${propertyId}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#elseif ($parameter.inputRadio)
${ident}<fieldset class="row form-group border p-3"#if($parameter.displayCondition) *ngIf="${parameter.displayCondition}"#end>
${ident}    <legend class="col-form-label col-sm-2 pt-0" translate>$parameter.messageKey</legend>
${ident}    <div class="mb-3">
#elseif($parameter.inputCheckbox || $parameter.type.booleanType)
${ident}    <section>
${ident}        <mat-checkbox id="$propertyId" formControlName="${parameter.name}"#if($parameter.required) required#end onLabel="#{yes}" offLabel="#{messages['no']}" onIcon="ui-icon-check" offIcon="ui-icon-close"#if($parameter.readOnly || $ownerParameter.readOnly) [readonly]="true"#end#if($parameter.minLength) minlength="$parameter.minLength"#end#if($parameter.minLength) maxlength="$parameter.maxLength"#end#if($parameter.min) min="$parameter.min"#end#if($parameter.max) max="$parameter.max"#end translate>
${ident}            $parameter.messageKey
${ident}        </mat-checkbox>
${ident}    </section>
#else
#if(!$angularUtils.isComplex($parameter) || $parameter.inputMultibox || $parameter.inputSelect || $parameter.type.enumeration || $angularUtils.isTable($parameter))
${ident}<mat-form-field class="col-md-8"#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$angularUtils.isTable($parameter)) formGroupName="${parameter.name}"#end#if($parameter.displayCondition) *ngIf="$parameter.displayCondition"#end>
${ident}    <mat-label id="${propertyId}_label" class="col-sm-2 #if ($parameter.inputMultibox || $parameter.type.booleanType)form-check-label#{else}col-form-label#end" for="${propertyId}"><span translate>$parameter.messageKey</span></mat-label>
#else
${ident}<fieldset class="mb-3" formGroupName="${parameter.name}"#if($parameter.displayCondition) *ngIf="$parameter.displayCondition"#end>
${ident}    <legend id="${propertyId}_label" class="col-sm-2 #if ($parameter.inputMultibox || $parameter.type.booleanType)form-check-label#{else}col-form-label#end" for="${propertyId}"><span translate>$parameter.messageKey</span>#if($parameter.required)*#end</legend>
#end
#if ($parameter.type.dateType || $parameter.inputDate)
${ident}    <input matInput type="$parameter.inputType" id="$propertyId" formControlName="${parameter.name}" #if($parameter.required) required#end #if($parameter.readOnly || $ownerParameter.readOnly) [readonly]="true" #{end}navigator="true" showOn="button"#if($parameter.minLength) minlength="$parameter.minLength"#end#if($parameter.minLength) maxlength="$parameter.maxLength"#end#if($parameter.minLenmingth) min="$parameter.min"#end#if($parameter.max) max="$parameter.max"#end/>
#elseif ($parameter.inputSelect || $parameter.type.enumeration)
#set ($multiSelect = $parameter.many || $parameter.type.collectionType || $parameter.type.arrayType)
${ident}    <mat-select#if ($multiSelect) multiple size="5"#end id="$propertyId"#if($isComplex && !$parameter.type.enumeration) [compareWith]="${valuePropertyName}Compare"#end formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end" #if($parameter.required) required#end#if($parameter.minLength) minlength="$parameter.minLength"#end#if($parameter.minLength) maxlength="$parameter.maxLength"#end#if($parameter.min) min="$parameter.min"#end#if($parameter.max) max="$parameter.max"#end>
#if ($parameter.type.enumeration)
${ident}        <mat-option>
${ident}        </mat-option>
${ident}        @for(key of ${parameter.name}Options; track key) {
${ident}        <mat-option [value]="key">
${ident}            {{ ${parameter.name}T[key] }}
${ident}        </mat-option>
${ident}        }
#else
${ident}        <mat-option>
#if($isComplex)
${ident}            <ngx-mat-select-search [placeholderLabel]="'Search'" [formControl]="${valuePropertyName}FilterCtrl" (keyup.enter)="filter$stringUtils.capitalize(${valuePropertyName})()"
${ident}                     [noEntriesFoundLabel]="'No Entries Found'"></ngx-mat-select-search>
#end
${ident}        </mat-option>
#if(!$parameter.required)
${ident}        <mat-option>
${ident}        </mat-option>
#end
${ident}        @for(item of ${valuePropertyName}FilteredList | async; track item) {
${ident}        <mat-option [value]="item.value">{{ item.label }}</mat-option>
${ident}        }
#end
${ident}    </mat-select>
#elseif ($parameter.inputTextarea)
${ident}	<textarea matInput id="$propertyId" formControlName="${parameter.name}" #if($parameter.required) required#end#if($parameter.readOnly || $ownerParameter.readOnly) [readonly]="true"#end#if($parameter.minLength) minlength="$parameter.minLength"#end#if($parameter.minLength) maxlength="$parameter.maxLength"#end#if($parameter.min) min="$parameter.min"#end#if($parameter.max) max="$parameter.max"#end></textarea>
#elseif ($parameter.inputMultibox)
${ident}    <mat-chip-grid #${propertyId}ChipGrid>
${ident}        @for (selectItem of ${propertyId}; track selectItem; let i = $index) {
${ident}            <mat-chip-row (removed)="${propertyId}Remove(i)">
${ident}              {{ selectItem }}
${ident}              <button matChipRemove [attr.aria-label]="'remove ' + selectItem">
${ident}                <mat-icon fontIcon="cancel" aria-hidden="false" aria-label="Cancel"></mat-icon>
${ident}              </button>
${ident}            </mat-chip-row>
${ident}        }
${ident}    </mat-chip-grid>
${ident}    <input placeholder="Select ..." #${propertyId}Input [formControl]="${propertyId}ChipControl"
${ident}          [matChipInputFor]="${propertyId}ChipGrid" [matAutocomplete]="auto"
${ident}          [matChipInputSeparatorKeyCodes]="separatorKeysCodes"
${ident}          (matChipInputTokenEnd)="${propertyId}Add($event)"/>
${ident}    <mat-autocomplete #auto="matAutocomplete" (optionSelected)="${propertyId}Selected($event)">
${ident}         @for (item of ${propertyId}FilteredList$ | async; track item) {
${ident}            <mat-option [value]="item.value">{{item.label}}</mat-option>
${ident}         }
${ident}    </mat-autocomplete>
#elseif($parameter.inputTable  && !($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$parameter.many))
${ident}	<div>
${ident}        <button mat-button (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon fontIcon="add_box" aria-hidden="false" aria-label="Add"></mat-icon>
${ident}        </button>
${ident}		<mat-table matSort [dataSource]="${propertyId}" #${propertyId}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
${ident}			<ng-container matColumnDef="actions">
${ident}				<mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}                <mat-cell *matCellDef="let row; index as i">
${ident}                    <button mat-button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(i)" class="btn btn-info">
${ident}                        <mat-icon fontIcon="delete" aria-hidden="false" aria-label="Delete"></mat-icon>
${ident}                    </button>
${ident}                    <button mat-button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(row)" class="btn btn-info">
${ident}                        <mat-icon fontIcon="delete" aria-hidden="false" aria-label="Delete"></mat-icon>
${ident}                    </button>
${ident}                </mat-cell>
${ident}			</ng-container>
#foreach( $column in $parameter.tableColumnNames)
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row?.${stringUtils.replace("${columnName}", ".", "?.")} }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${propertyId}ModalColumns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${propertyId}ModalColumns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${propertyId}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#else
#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$parameter.many)
${ident}    <div class="col my-3 view-buttons">
${ident}        <button mat-button (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon fontIcon="add_box" aria-hidden="false" aria-label="Add"></mat-icon>
${ident}        </button>
${ident}        <button mat-button (click)="${propertyId}Clear()" class="btn btn-primary">
${ident}            <mat-icon fontIcon="clear" aria-hidden="false" aria-label="Clear"></mat-icon>
${ident}        </button>
${ident}    </div>
#foreach($column in $parameter.tableColumns)
#if($column.name)
#set ($columnName = $column.name)
#else
#set ($columnName = $column)
#end
#set ($colId = "${propertyId}$stringUtils.capitalize($columnName)")
#set ($cname = "$angularUtils.getLastProperty($columnName)")
#if($parameter.displayCondition)${ident}    @if(${parameter.displayCondition}) {#end
${ident}    <div class="row">
${ident}        <mat-form-field class="col-md-8">
${ident}            <mat-label for="$colId" class="col-sm-2 col-form-label" translate>$stringUtils.toResourceMessageKey($cname)</mat-label>
${ident}            <input matInput type="text" [readonly]="true" id="$colId" value="{{${propertyId}?.$stringUtils.replace("${columnName}", ".", "?.") #if(${column.inputDate} || ${column.type.dateType}) | date#end}}">
${ident}        </mat-form-field>
${ident}    </div>
#if($parameter.displayCondition)${ident}    }#end
#end
#else
${ident}    <input matInput type="$parameter.inputType" id="${propertyId}" name="$parameter.name" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end"#if($parameter.required) required#end#if($parameter.minLength) minlength="$parameter.minLength"#end#if($parameter.minLength) maxlength="$parameter.maxLength"#end#if($parameter.min) min="$parameter.min"#end#if($parameter.max) max="$parameter.max"#end #if($parameter.readOnly || $ownerParameter.readOnly) [readonly]="true"#{end}/>
#end
#end
#if($parameter.required || $parameter.minLength || $parameter.maxLength || $parameter.min || $parameter.max || $parameter.inputEmail)
#if($parameter.required)
${ident}    @if(${propertyId}Control.hasError('required')) {
${ident}    <ng-container>
${ident}        <mat-error translate>${parameter.messageKey}.required</mat-error>
${ident}    </ng-container>
${ident}    }
#end
#if($parameter.minLength)
${ident}    @if(${propertyId}Control.hasError('required')) {
${ident}    <ng-container>
${ident}        <mat-error translate>${parameter.messageKey}.minlength</mat-error>
${ident}    </ng-container>
${ident}    }
#end
#if($parameter.maxLength)
${ident}    @if(${propertyId}Control.hasError('required')) {
${ident}    <ng-container>
${ident}        <mat-error translate>{parameter.messageKey}.maxlength</mat-error>
${ident}    </ng-container>
${ident}    }
#end
#if($parameter.min)
${ident}    @if(${propertyId}Control.hasError('required')) {
${ident}    <ng-container>
${ident}        <mat-error translate>{parameter.messageKey}.min/mat-error>
${ident}    </ng-container>
${ident}    }
#end
#if($parameter.max)
${ident}    @if(${propertyId}Control.hasError('max')) {
${ident}    <ng-container>
${ident}        <mat-error translate>${parameter.messageKey}.max</mat-error>
${ident}    </ng-container>
${ident}    }
#end
#if($parameter.inputMax)
${ident}    @if(${propertyId}Control.hasError('email') && !emailFormControl.hasError('required')) {
${ident}    <ng-container>
${ident}        <mat-error translate>${parameter.messageKey}.email</mat-error>
${ident}    </ng-container>
${ident}    }
#end
#end
#if ($parameter.inputRadio)
${ident}    </div>
${ident}</fieldset>
#else
#if(!$angularUtils.isComplex($parameter) || $parameter.inputMultibox || $parameter.inputSelect || $parameter.type.enumeration || $parameter.type.enumeration || $angularUtils.isTable($parameter))
${ident}</mat-form-field>
#else
${ident}</fieldset>
#end
#end
#end
#end
##==========================
##
## A macro that renders the appropriate table for the input
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderTableInput $parameter $ownerParameter $ident $radio)
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#if($parameter.many)
#set ($dataSource = "${propertyId}DataSource")
#else
#set ($dataSource = "$stringUtils.pluralize(${propertyId})DataSource")
#end
$ident<mat-table matSort [dataSource]="$dataSource" #${propertyId}ModalSort="matSort" class="table table-bordered" style="width: 100%;">
#if($parameter.tableColumnNames)
#set ($columns = $parameter.tableColumnNames)
#else
#set ($columns = $parameter.attributes)
#end
${ident}    <ng-container matColumnDef="actions">
${ident}        <mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row; let i=index">
#if($radio)
#set ($iter = $columns.iterator())
#if($iter.hasNext())
#set ($col = $iter.next())
#end
#if($col.name)
#set ($columnName = $col.name)
#else
#set ($columnName = $col)
#end
${ident}            <mat-radio-group (change)="${propertyId}Selected($event, row)">
${ident}                <mat-radio-button [value]="row" [checked]='${propertyId}Select.${stringUtils.replace("${columnName}", ".", "?.")} === row?.${stringUtils.replace("${columnName}", ".", "?.")}'></mat-radio-button>
${ident}            </mat-radio-group>
#else
${ident}            <mat-checkbox (change)="${propertyId}Selected($event, row)"></mat-checkbox>
#end
${ident}        </mat-cell>
${ident}    </ng-container>
#foreach($column in $columns)
#if($column.name)
#set ($columnName = $column.name)
#else
#set ($columnName = $column)
#end
${ident}    <ng-container matColumnDef="$columnName">
${ident}        <mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row"> {{ row.${stringUtils.replace("${columnName}", ".", "?.")} }} </mat-cell>
${ident}    </ng-container>
#end
${ident}    <mat-header-row *matHeaderRowDef="${propertyId}ModalColumns"></mat-header-row>
${ident}    <mat-row *matRowDef="let row; columns: ${propertyId}ModalColumns;"></mat-row>
$ident</mat-table>
$ident<mat-paginator #${propertyId}ModalPaginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
#end
##==========================
##
## A macro that renders the appropriate input modal
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderModalInput $parameter $ownerParameter $ident $radio)
#if(!$parameter.inputHidden && !$ownerParameter.inputHidden)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#else
#set ($propertyId = $parameter.name)
#end
#else
#set ($propertyId2 = $parameter.getFormPropertyId($ownerParameter))
#if(!$propertyId2)
#set ($propertyId2 = "${ownerParameter.name}${stringUtils.capitalize($parameter.name)}")
#end
#set ($propertyId = $propertyId2)
#end
<div class="modal fade" id="${propertyId}Modal" tabindex="-1" aria-labelledby="${propertyId}Label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="${propertyId}AddLabel" translate>
                    action.select
                    <span translate>$parameter.messageKey</span>
                </h5>
                <button mat-button class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <form>
                        <mat-form-field class="col-md-4">
                            <mat-label translate>search</mat-label>
                            <input matInput type="text" [formControl]="${propertyId}SearchField"
                                id="${propertyId}SearchField" />
                        </mat-form-field>
                        <button mat-button (click)="${propertyId}Search()" class="btn btn-primary">
                            <mat-icon fontIcon="search" aria-hidden="false" aria-label="Search"></mat-icon>
                        </button>
                    </form>
                </div>
#renderTableInput($parameter $ownerParameter "             " $radio)
            </div>
            <div class="modal-footer">
                <button mat-button class="btn btn-secondary" data-bs-dismiss="modal" translate>action.close</button>
                <button mat-button class="btn btn-primary" (click)="addSelected$stringUtils.capitalize(${propertyId})()" data-bs-dismiss="modal" translate>save</button>
            </div>
        </div>
    </div>
</div>
#end
#end
