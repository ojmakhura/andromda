
#macro(renderTableColumnNames $parameter $ident)
${ident}<thead>
${ident}   <tr>
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
${ident}        <th translate >$stringUtils.toResourceMessageKey(${column})</th>
#end
#else
#foreach ($column in $parameter.type.attributes)
${ident}        <th translate>$stringUtils.toResourceMessageKey(${column.name})</th>
#end
#end
${ident}    </tr>
${ident}</thead>
#end
##==========================
#macro(renderTableColumns $parameter $ident)
#if($parameter.inputTableIdentifierColumns)
#foreach ($column in $parameter.inputTableIdentifierColumns.split(","))
#if(!$column.hidden && !$column.inputFile)
#set ($value = "row.${column}")
${ident}    <td id="column_${column}">${value}</td>
#end
#end
#else
#foreach ($column in $parameter.type.attributes)
#if(!$column.hidden && !$column.inputFile)
#set($noOfColumns=$noOfColumns+1)   
#if($column.type.enumeration)
#set($theValue="row.${column.name}.getValue()")
#else
#set($theValue="row.${column.name}")
#end
${ident}    <td id="column_${column.name}">${theValue}#if ($column.type.dateType).toLocaleDateString()#end </td>
#end
#end
#end
#end
##==========================
##
## A macro that renders the appropriate action form input field
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderAngularActionInput $parameter $ownerParameter $ident)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#else
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#end
#set ($backingListName = $parameter.backingListName)
#set ($backingValueName = $parameter.backingValueName)
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#set ($backingListName = ${parameter.getBackingListName($ownerParameter)})
#set ($backingValueName = ${parameter.getBackingValueName($ownerParameter)})
#end
#set ($formValuePropertyName = "${valuePropertyName}")
#if($angularUtils.isTable($parameter))
${ident}	<div class="mat-elevation-z8">
${ident}        <button type="button" (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon>add_box</mat-icon>
${ident}        </button>
${ident}		<mat-table matSort [dataSource]="${propertyId}.value" #${parameter.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
${ident}			<ng-container matColumnDef="actions">
${ident}				<mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}                <mat-cell *matCellDef="let row; index as i">
${ident}                    <button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(i)" class="btn btn-info">
${ident}                        <mat-icon>delete</mat-icon>
${ident}                    </button>
${ident}                </mat-cell>
${ident}			</ng-container>
#foreach( $column in $angularUtils.getTableColumns($parameter))
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row.${columnName} }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${parameter.name}ModalColumns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${parameter.name}ModalColumns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${parameter.name}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#elseif ($parameter.inputRadio)
${ident}<fieldset class="row mb-3">
${ident}    <legend class="col-form-label col-sm-2 pt-0" >$parameter.messageKey}</legend>
${ident}    <div class="mb-3">
#else
${ident}<div class="mb-3"#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$angularUtils.isTable($parameter)) formGroupName="${parameter.name}"#end>
${ident}    <label id="${propertyId}_label" class="col-sm-2 #if ($parameter.inputMultibox || $parameter.type.booleanType)form-check-label#{else}col-form-label#end" for="${propertyId}" translate>$parameter.messageKey</label>
###end
#if ($parameter.type.dateType || $parameter.inputDate)
${ident}    <input type="$parameter.inputType" id="$propertyId" class="form-control" formControlName="${parameter.name}" #if($parameter.required) required#end #if($parameter.readOnly) readonly#end navigator="true" pattern="$parameter.format" showOn="button"/>
#elseif ($parameter.inputCheckbox || $parameter.type.booleanType)
${ident}    <input type="checkbox" id="$propertyId" class="form-check-input" formControlName="${parameter.name}"#if($parameter.required) required#end onLabel="#{yes}" offLabel="#{messages['no']}" onIcon="ui-icon-check" offIcon="ui-icon-close"#if($parameter.readOnly) readonly#end/>
#elseif ($parameter.inputSelect || $parameter.type.enumeration)
#set ($multiSelect = $parameter.many || $parameter.type.collectionType || $parameter.type.arrayType)
#set ($selectBoxType = "selectOneMenu")
#if ($multiSelect)
#set ($selectBoxType = "selectManyMenu")
#end
${ident}    <select#if ($multiSelect) multiple size="5"#end id="$propertyId" class="form-select" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end" #if($parameter.required) required#end#if($parameter.readOnly) readonly#end>
#if ($parameter.type.enumeration)
${ident}        <option value=""></option>
${ident}        <option *ngFor="let key of ${parameter.name}Options" [value]="key">
${ident}            {{ ${parameter.name}T[key] }}
${ident}        </option>
#else
#if(!$parameter.required)
${ident}        <option value=""></option>
#end
${ident}        <option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</option>
#end
${ident}    </select>
#elseif ($parameter.inputTextarea)
${ident}	<textarea id="$propertyId" class="form-control" formControlName="${parameter.name}" #if($parameter.required) required#end#if($parameter.readOnly) readonly#end></textarea>
#elseif ($parameter.inputFile)
${ident}    <input type="file" id="$propertyId" class="form-control" formControlName="${parameter.name}" #if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
#elseif ($parameter.inputMultibox)
${ident}    <article formArrayName="${parameter.name}" id="${propertyId}Article">
${ident}        <mat-form-field class="form-group">
${ident}            <mat-label translate>select.value.text</mat-label>
${ident}            <mat-select name="${propertyId}Selector" id="${propertyId}Selector" (selectionChange)="on$stringUtils.capitalize(${propertyId})Change($event)">
${ident}                <mat-option *ngFor="let item of $backingListName" [value]="item.value">
${ident}                    {{ item.label }}
${ident}                </mat-option>
${ident}            </mat-select>
${ident}        </mat-form-field>
${ident}        <ul class="list-group" *ngFor="let control of ${propertyId}.controls; let i = index">
${ident}            <li class="list-group-item">
${ident}                <button type="button" class="btn btn-info" (click)="${propertyId}Delete(i)">
${ident}                    <i class="bi bi-trash"></i>
${ident}                </button>
${ident}                {{ get$stringUtils.capitalize(${propertyId})Label(control.value) }} 
${ident}            </li>
${ident}        </ul>
${ident}    </article>
## #elseif ($parameter.inputRadio)
## ${ident}    <div class="form-check" th:each="item : *{${backingListName}}">
## ${ident}        <label class="form-check-label" th:for="${item.value}" th:text="${item.label}"></label>
## ${ident}        <input type="radio" id="$propertyId" class="form-check-input" formControlName="*{${parameter.name}}" th:value="${item.value}"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
## ${ident}    </div>
#elseif($parameter.inputTable)
${ident}	<div class="mat-elevation-z8">
${ident}        <button type="button" (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon>add_box</mat-icon>
${ident}        </button>
${ident}		<mat-table matSort [dataSource]="${propertyId}.value" #${parameter.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
${ident}			<ng-container matColumnDef="actions">
${ident}				<mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}                <mat-cell *matCellDef="let row; index as i">
${ident}                    <button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(i)" class="btn btn-info">
${ident}                        <mat-icon>delete</mat-icon>
${ident}                    </button>
${ident}                </mat-cell>
${ident}			</ng-container>
#foreach( $column in $angularUtils.getTableColumns($parameter))
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row.${columnName} }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${parameter.name}ModalColumns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${parameter.name}ModalColumns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${parameter.name}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#else
${ident}    <input type="$parameter.inputType" id="$propertyId" class="form-#if($parameter.inputRange)range#{else}control#end" name="$parameter.name" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end"#if($parameter.required) required#end#if($parameter.readOnly) readonly#end/>
#end
#if ($parameter.inputRadio)
${ident}    </div>
${ident}</fieldset>
#else
${ident}</div>
#end
#end
#end
##==========================
##
## A macro that renders the appropriate table for the input
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderTableInput $parameter $ownerParameter $ident)
$ident<mat-table matSort [dataSource]="${table.name}$ | async" #${parameter.name}ModalSort="matSort" class="table table-bordered" style="width: 100%;">
#if($parameter.inputTableIdentifierColumns)
#set ($columns = $parameter.tableColumns)
#else
#set ($columns = $parameter.attributes)
#end
${ident}    <ng-container matColumnDef="actions">
${ident}        <mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row; let i=index">
${ident}            <mat-checkbox (change)="${parameter.getFormPropertyId($ownerParameter)}Selected($event, row)"></mat-checkbox>
${ident}        </mat-cell>
${ident}    </ng-container>
#foreach($column in $columns)
#if($column.name)
#set ($columnName = $column.name)
#else
#set ($columnName = $column)
#end
${ident}    <ng-container matColumnDef="$columnName">
${ident}        <mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row"> {{ row.${columnName} }} </mat-cell>
${ident}    </ng-container>
#end
${ident}    <mat-header-row *matHeaderRowDef="${table.name}ModalColumns"></mat-header-row>
${ident}    <mat-row *matRowDef="let row; columns: ${table.name}ModalColumns;"></mat-row>
$ident</mat-table>
$ident<mat-paginator #${parameter.name}ModalPaginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
#end
##==========================
##
## A macro that renders the appropriate input modal
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderModalInput $parameter $ownerParameter $ident)
#if(!$parameter.inputHidden && !$ownerParameter.inputHidden)
#if($angularUtils.isTable($parameter))
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#else
#set ($propertyId = $parameter.name)
#end
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#end
<div class="modal fade" id="${propertyId}Modal" tabindex="-1" aria-labelledby="${propertyId}Label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="${propertyId}AddLabel" translate>
                    action.select
                    <span translate>$parameter.messageKey</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <form>
                        <div>
                            <mat-form-field>
                            <mat-label translate>search</mat-label>
                            <input matInput type="text" [formControl]="${propertyId}SearchField"
                                id="${propertyId}SearchField" />
                            </mat-form-field>
                        </div>
                        <button type="button" (click)="${propertyId}Search()" class="btn btn-primary">
                            <mat-icon>search</mat-icon>
                        </button>
                    </form>
                </div>
#renderTableInput($parameter $ownerParameter "             ")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" translate>action.close</button>
                <button type="button" class="btn btn-primary" (click)="addSelected$stringUtils.capitalize(${propertyId})()" data-bs-dismiss="modal" translate>save changes</button>
            </div>
        </div>
    </div>
</div>
#end
#end
#end
