##
## A macro that renders the appropriate action form input field
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderAngularActionInput $parameter $ownerParameter $ident $vrender)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#else
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#end
#set ($backingListName = $parameter.backingListName)
#set ($backingValueName = $parameter.backingValueName)
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#set ($backingListName = ${parameter.getBackingListName($ownerParameter)})
#set ($backingValueName = ${parameter.getBackingValueName($ownerParameter)})
#end
#set ($formValuePropertyName = "${valuePropertyName}")
${ident}<div #if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$angularUtils.isTable($parameter))formGroupName="${parameter.name}"#end #if ($parameter.inputHidden)[hidden]="true"#end> 
#if($angularUtils.isTable($parameter))
${ident}	<div class="mat-elevation-z8">
${ident}		<mat-table matSort [dataSource]="${parameter.name}.controls" #${parameter.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
#foreach( $column in $angularUtils.getTableColumns($parameter))
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row.get('${columnName}').value }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${parameter.name}Columns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${parameter.name}Columns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${parameter.name}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#elseif($parameter.inputCheckbox)
${ident}    <mat-checkbox class="$propertyId" translate>$parameter.messageKey</mat-checkbox>
## #elseif($parameter.inputRadio)
##             <mat-radio-group formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
##                 <mat-radio-button class="example-radio-button">
##                 </mat-radio-button>
##             </mat-radio-group>
#else
${ident}	<mat-form-field>
${ident}		<mat-label translate>$parameter.messageKey</mat-label> 
#if ($parameter.inputSelect || $parameter.type.enumeration || $parameter.inputMultibox)
${ident}		<mat-select name="$propertyId" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end" id="$propertyId"#if($parameter.inputMultibox) multiple#end>
#if(!$parameter.inputMultibox)
${ident}			<mat-option value = "">Select one ...</mat-option>
#end
#if ($parameter.type.enumeration)
${ident}			<mat-option *ngFor="let key of ${parameter.name}Options" [value]="key">{{ ${parameter.name}T[key] }}</mat-option>
#else
${ident}			<mat-option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</mat-option>
#end
${ident}		</mat-select>
#elseif ($parameter.inputTextarea)
${ident}		<textarea matInput formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end></textarea>
#elseif ($parameter.inputText)
${ident}		<input matInput type="$parameter.inputType" formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
#else
#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$angularUtils.isTable($parameter))
${ident}		<mat-select name="$propertyId" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end" id="$propertyId">
${ident}			<mat-option value = "">Select one ...</mat-option>
${ident}			<mat-option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</mat-option>
${ident}		</mat-select>
#else
#if($parameter.inputNumber)
#set ($type = "number")
#else
#set ($type = "$parameter.inputType")
#end
${ident}		<input matInput type="$type" formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
#end
#end
#if($parameter.inputEmail)
## ${ident}        <mat-error *ngIf="getItemControl('${parameter.name}').hasError('email') && !getItemControl('${parameter.name}').hasError('required')">
## ${ident}            Please enter a valid email address
## ${ident}        </mat-error>
#end
#if($parameter.required)
## ${ident}        <mat-error *ngIf="getItemControl('${parameter.name}').hasError('required')">
## ${ident}            $stringUtils.capitalize(${parameter.name}) is required.
## ${ident}        </mat-error>
#end
${ident}	</mat-form-field>
#end
${ident}</div>
#end