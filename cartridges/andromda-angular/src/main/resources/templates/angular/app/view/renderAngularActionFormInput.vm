##
## A macro that renders the appropriate action form input field
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderAngularActionInput $parameter $ownerParameter $ident $vrender)
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#else
#set ($propertyId = $parameter.name)
#set ($valuePropertyName = $parameter.name)
#end
#set ($backingListName = $parameter.backingListName)
#set ($backingValueName = $parameter.backingValueName)
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#set ($valuePropertyName = ${parameter.getFormPropertyName($ownerParameter)})
#set ($backingListName = ${parameter.getBackingListName($ownerParameter)})
#set ($backingValueName = ${parameter.getBackingValueName($ownerParameter)})
#end
#set ($formValuePropertyName = "${valuePropertyName}")
${ident}<div#if ($parameter.inputHidden)[hidden]="true"#end> 
#if($angularUtils.isTable($parameter))
${ident}	<div class="mat-elevation-z8">
${ident}        <button type="button" (click)="${propertyId}AddDialog()" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#${propertyId}Modal">
${ident}            <mat-icon>add_box</mat-icon>
${ident}        </button>
${ident}		<mat-table matSort [dataSource]="${propertyId}.value" #${parameter.name}Sort="matSort" class="table table-bordered table-striped" style="width: 100%;">
${ident}			<ng-container matColumnDef="actions">
${ident}				<mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}                <mat-cell *matCellDef="let row; index as i">
${ident}                    <button color="accent" (click)="deleteFrom$stringUtils.capitalize(${propertyId})(i)" class="btn btn-info">
${ident}                        <mat-icon>delete</mat-icon>
${ident}                    </button>
${ident}                </mat-cell>
${ident}			</ng-container>
#foreach( $column in $angularUtils.getTableColumns($parameter))
#if($column.name)
#set($columnName = $column.name)
#else
#set($columnName = $column)
#end
${ident}			<ng-container matColumnDef="$columnName">
#if($column.name)
${ident}				<mat-header-cell *matHeaderCellDef translate>$column.messageKey</mat-header-cell>
#else
${ident}				<mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
#end
${ident}                <mat-cell *matCellDef="let row"> {{ row.${columnName} }} </mat-cell>
${ident}			</ng-container>
#end
${ident}			<mat-header-row *matHeaderRowDef="${parameter.name}ModalColumns"></mat-header-row>
${ident}			<mat-row *matRowDef="let row; columns: ${parameter.name}ModalColumns;"></mat-row>
${ident}		</mat-table>
${ident}		<mat-paginator #${parameter.name}Paginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
${ident}	</div>
#elseif($parameter.inputMultibox)
${ident}    <article formArrayName="${parameter.name}" id="${propertyId}Article">
${ident}        <mat-form-field class="form-group">
${ident}            <mat-label translate>select.value.text</mat-label>
${ident}            <mat-select name="${propertyId}Selector" id="${propertyId}Selector" (selectionChange)="on$stringUtils.capitalize(${propertyId})Change($event)">
${ident}                <mat-option *ngFor="let item of $backingListName" [value]="item.value">
${ident}                    {{ item.label }}
${ident}                </mat-option>
${ident}            </mat-select>
${ident}        </mat-form-field>
${ident}        <mat-list *ngFor="let control of ${propertyId}.controls; let i = index">
${ident}            <mat-list-item> 
${ident}                <button mat-mini-fab (click)="${propertyId}Delete(i)">
${ident}                    <mat-icon class="add-course-btn">delete</mat-icon>
${ident}                </button>
${ident}                {{ get$stringUtils.capitalize(${propertyId})Label(control.value) }} 
${ident}            </mat-list-item> 
${ident}        </mat-list>
${ident}    </article>
#elseif($parameter.inputCheckbox)
${ident}    <mat-checkbox class="$propertyId" translate>$parameter.messageKey</mat-checkbox>
## #elseif($parameter.inputRadio)
##             <mat-radio-group formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
##                 <mat-radio-button class="example-radio-button">
##                 </mat-radio-button>
##             </mat-radio-group>
#else
${ident}	<mat-form-field>
${ident}		<mat-label translate>$parameter.messageKey</mat-label> 
#if ($parameter.inputSelect || $parameter.type.enumeration)
${ident}		<mat-select name="$propertyId" formControlName="${parameter.name}" id="$propertyId">
#if(!$parameter.inputMultibox)
${ident}			<mat-option value = "">Select one ...</mat-option>
#end
#if ($parameter.type.enumeration)
${ident}			<mat-option *ngFor="let key of ${parameter.name}Options" [value]="key">{{ ${parameter.name}T[key] }}</mat-option>
#else
${ident}			<mat-option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</mat-option>
#end
${ident}		</mat-select>
#elseif ($parameter.inputTextarea)
${ident}		<textarea matInput formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end></textarea>
#elseif ($parameter.inputText)
${ident}		<input matInput type="$parameter.inputType" formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
#else
#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration && !$angularUtils.isTable($parameter))
${ident}		<mat-select name="$propertyId" formControlName="#if($angularUtils.isComplex($parameter) && !$parameter.type.enumeration)id#else${parameter.name}#end" id="$propertyId">
${ident}			<mat-option value = "">Select one ...</mat-option>
${ident}			<mat-option *ngFor="let item of ${backingListName}" [value]="item.value">{{ item.label }}</mat-option>
${ident}		</mat-select>
#else
#if($parameter.inputNumber)
#set ($type = "number")
#else
#set ($type = "$parameter.inputType")
#end
${ident}		<input matInput type="$parameter.inputType" formControlName="${parameter.name}" id="$propertyId"#if($vrender) disabled#else#if($parameter.required) required#end#end>
#end
#end
#if($parameter.inputEmail)
## ${ident}        <mat-error *ngIf="getItemControl('${parameter.name}').hasError('email') && !getItemControl('${parameter.name}').hasError('required')">
## ${ident}            Please enter a valid email address
## ${ident}        </mat-error>
#end
#if($parameter.required)
## ${ident}        <mat-error *ngIf="getItemControl('${parameter.name}').hasError('required')">
## ${ident}            $stringUtils.capitalize(${parameter.name}) is required.
## ${ident}        </mat-error>
#end
${ident}	</mat-form-field>
#end
${ident}</div>
#end

##==========================
##
## A macro that renders the appropriate table for the input
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderTableInput $parameter $ownerParameter $ident)
$ident<mat-table matSort [dataSource]="${table.name}$ | async" #${parameter.name}ModalSort="matSort" class="table table-bordered" style="width: 100%;">
#if($parameter.inputTableIdentifierColumns)
#set ($columns = $parameter.tableColumns)
#else
#set ($columns = $parameter.attributes)
#end
${ident}    <ng-container matColumnDef="actions">
${ident}        <mat-header-cell *matHeaderCellDef translate>actions</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row; let i=index">
${ident}            <mat-checkbox (change)="${parameter.getFormPropertyId($ownerParameter)}Selected($event, row)"></mat-checkbox>
${ident}        </mat-cell>
${ident}    </ng-container>
#foreach($column in $columns)
#if($column.name)
#set ($columnName = $column.name)
#else
#set ($columnName = $column)
#end
${ident}    <ng-container matColumnDef="$columnName">
${ident}        <mat-header-cell *matHeaderCellDef translate>$stringUtils.toResourceMessageKey($columnName)</mat-header-cell>
${ident}        <mat-cell *matCellDef="let row"> {{ row.${columnName} }} </mat-cell>
${ident}    </ng-container>
#end
${ident}    <mat-header-row *matHeaderRowDef="${table.name}ModalColumns"></mat-header-row>
${ident}    <mat-row *matRowDef="let row; columns: ${table.name}ModalColumns;"></mat-row>
$ident</mat-table>
$ident<mat-paginator #${parameter.name}ModalPaginator="matPaginator" [pageSize]="10" [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>
#end
##==========================
##
## A macro that renders the appropriate input modal
##
## parameters:
##     o  $parameter - the actual parameter to render
##     o  $ownerParameter - the parameter that is the owner of this parameter (in the case of complex objects)
##
#macro(renderModalInput $parameter $ownerParameter $ident)
#if(!$parameter.inputHidden && !$ownerParameter.inputHidden)
#if($angularUtils.isTable($parameter))
#if ($parameter.backingListName)
#if ($ownerParameter.type.hasStereotype('Entity'))
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#else
#set ($propertyId = $parameter.name)
#end
#else
#set ($propertyId = $parameter.getFormPropertyId($ownerParameter))
#end
<div class="modal fade" id="${propertyId}Modal" tabindex="-1" aria-labelledby="${propertyId}Label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="${propertyId}AddLabel" translate>
                    action.select
                    <span translate>$parameter.messageKey</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            <div>
                <form>
                    <div>
                        <mat-form-field>
                        <mat-label translate>search</mat-label>
                        <input matInput type="text" [formControl]="${propertyId}SearchField"
                            id="${propertyId}SearchField" />
                        </mat-form-field>
                    </div>
                    <button type="button" (click)="${propertyId}Search()" class="btn btn-primary">
                        <mat-icon>search</mat-icon>
                    </button>
                </form>
            </div>
#renderTableInput($parameter $ownerParameter "             ")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" translate>action.close</button>
                <button type="button" class="btn btn-primary" (click)="addSelected$stringUtils.capitalize(${propertyId})()" data-bs-dismiss="modal" translate>save changes</button>
            </div>
        </div>
    </div>
</div>
#end
#end
#end