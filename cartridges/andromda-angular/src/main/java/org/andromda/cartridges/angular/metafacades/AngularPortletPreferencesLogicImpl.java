// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.Collection;

import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.UseCaseFacade;

/**
 * Represents the portlet preferences for a given use case (assuming the JSF application being
 * generated is a portlet).
 * MetafacadeLogic implementation for org.andromda.cartridges.angular.metafacades.AngularPortletPreferences.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularPortletPreferences
 */
public class AngularPortletPreferencesLogicImpl
    extends AngularPortletPreferencesLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularPortletPreferencesLogicImpl
     * @see org.andromda.cartridges.angular.metafacades.AngularPortletPreferences
     */
    public AngularPortletPreferencesLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * Any portlet preferences associated to this use case.
     * @see org.andromda.cartridges.angular.metafacades.AngularPortletPreferences#getUseCase()
     */
    protected Object handleGetUseCase()
    {
        UseCaseFacade useCase = null;
        final Collection<DependencyFacade> dependencies = this.getTargetDependencies();
        if (dependencies != null && !dependencies.isEmpty())
        {
            for (final DependencyFacade dependency : dependencies)
            {
                final ModelElementFacade source = dependency.getSourceElement();
                if (source instanceof UseCaseFacade)
                {
                    useCase = (UseCaseFacade)source;
                    break;
                }
            }
        }
        return useCase;
    }
}