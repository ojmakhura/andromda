// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.andromda.cartridges.angular.AngularGlobals;
import org.andromda.cartridges.angular.AngularHelper;
import org.andromda.cartridges.angular.AngularProfile;
import org.andromda.metafacades.uml.AttributeFacade;
import org.andromda.metafacades.uml.FrontEndAction;
import org.andromda.metafacades.uml.FrontEndForward;
import org.andromda.metafacades.uml.FrontEndParameter;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.UseCaseFacade;
import org.andromda.utils.StringUtilsHelper;
import org.apache.commons.lang3.StringUtils;

/**
 * Represents a JSF view for a front-end application. MetafacadeLogic
 * implementation for org.andromda.cartridges.angular.metafacades.AngularView.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularView
 */
public class AngularViewLogicImpl extends AngularViewLogic {
    private static final long serialVersionUID = 34L;

    /**
     * Public constructor for AngularViewLogicImpl
     * 
     * @see org.andromda.cartridges.angular.metafacades.AngularView
     */
    public AngularViewLogicImpl(Object metaObject, String context) {
        super(metaObject, context);
    }

    /**
     * The full path of the view resources (i.e. the JSP page).
     * 
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getPath()
     */
    protected String handleGetPath() {
        final StringBuilder path = new StringBuilder();
        final String packageName = this.getPackageName();
        if (StringUtils.isNotBlank(packageName)) {
            path.append(packageName + '.');
        }
        path.append(AngularHelper.toWebResourceName(StringUtils.trimToEmpty(this.getName())).replace(
                '.',
                '/'));
        return '/' + path.toString().replace(
            '.',
            '/');
    }

    /**
     * A resource message key suited for the view's title.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getTitleKey()
     */
    protected String handleGetTitleKey()
    {
        return this.getMessageKey() + '.' + AngularGlobals.TITLE_MESSAGE_KEY_SUFFIX;
    }

    /**
     * A default resource message value suited for the page's title.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getTitleValue()
     */
    protected String handleGetTitleValue()
    {
        return StringUtilsHelper.toPhrase(getName());
    }

    /**
     * The default resource message key for this view.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getMessageKey()
     */
    protected String handleGetMessageKey()
    {
        final StringBuilder messageKey = new StringBuilder();

        if (!this.isNormalizeMessages())
        {
            final UseCaseFacade useCase = this.getUseCase();
            if (useCase != null)
            {
                messageKey.append(StringUtilsHelper.toResourceMessageKey(useCase.getName()));
                messageKey.append('.');
            }
        }

        messageKey.append(StringUtilsHelper.toResourceMessageKey(getName()));
        return messageKey.toString();
    }

    /**
     * Indicates whether or not we should normalize messages.
     *
     * @return true/false
     */
    private boolean isNormalizeMessages()
    {
        final String normalizeMessages = (String)getConfiguredProperty(AngularGlobals.NORMALIZE_MESSAGES);
        return Boolean.valueOf(normalizeMessages).booleanValue();
    }

    /**
     * A resource message key suited for the page's documentation.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getDocumentationKey()
     */
    protected String handleGetDocumentationKey()
    {
        return getMessageKey() + '.' + AngularGlobals.DOCUMENTATION_MESSAGE_KEY_SUFFIX;
    }

    /**
     * A resource message value suited for the view's documentation.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getDocumentationValue()
     */
    protected String handleGetDocumentationValue()
    {
        final String value = StringUtilsHelper.toResourceMessage(getDocumentation(""));
        return value == null ? "" : value;
    }

    /**
     * A displayable version of this view's name.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getMessageValue()
     */
    protected String handleGetMessageValue()
    {
        return StringUtilsHelper.toPhrase(getName());
    }

    /**
     * The fully qualified name of this view's form populator.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getFullyQualifiedPopulator()
     */
    protected String handleGetFullyQualifiedPopulator()
    {
        final StringBuilder name = new StringBuilder();
        final String packageName = this.getPackageName();
        if (StringUtils.isNotBlank(packageName))
        {
            name.append(packageName);
            name.append('.');
        }
        name.append(this.getPopulator());
        return name.toString();
    }

    /**
     * The name of the form populator for this view.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getPopulator()
     */
    protected String handleGetPopulator()
    {
        return Objects.toString(this.getConfiguredProperty(AngularGlobals.VIEW_POPULATOR_PATTERN)).replaceAll(
            "\\{0\\}",
            StringUtilsHelper.upperCamelCaseName(this.getName()));
    }

    /**
     * The path to the form populator.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getPopulatorPath()
     */
    protected String handleGetPopulatorPath()
    {
        return this.getFullyQualifiedPopulator().replace(
            '.',
            '/');
    }

    /**
     * Indicates if a populator is required for this view.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isPopulatorRequired()
     */
    protected boolean handleIsPopulatorRequired()
    {
        return !this.getFormActions().isEmpty() || !this.getVariables().isEmpty();
    }

    /**
     * Indicates whether or not at least one parameter of an outgoing action in this view requires
     * validation.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isValidationRequired()
     */
    protected boolean handleIsValidationRequired()
    {
        boolean required = false;
        for (final FrontEndAction action : this.getActions())
        {
            if (((AngularAction)action).isValidationRequired())
            {
                required = true;
                break;
            }
        }
        return required;
    }

    /**
     * Indicates if this view represents a popup.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isPopup()
     */
    protected boolean handleIsPopup()
    {
        return Objects.toString(this.findTaggedValue(AngularProfile.TAGGEDVALUE_VIEW_TYPE)).equalsIgnoreCase(
            AngularGlobals.ACTION_TYPE_POPUP);
    }

    /**
     * Indicates whether or not any non-table view variables are present in this view.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isNonTableVariablesPresent()
     */
    protected boolean handleIsNonTableVariablesPresent()
    {
        boolean present = false;
        for (final FrontEndParameter variable : this.getVariables())
        {
            if (!variable.isTable())
            {
                present = true;
                break;
            }
        }
        return present;
    }

    /**
     * Indicates whether or not this view has the same name as the use case in which it is
     * contained.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isHasNameOfUseCase()
     */
    protected boolean handleIsHasNameOfUseCase()
    {
        boolean sameName = false;
        final ModelElementFacade useCase = this.getUseCase();
        final String useCaseName = useCase != null ? useCase.getName() : null;
        if (useCaseName != null && useCaseName.equalsIgnoreCase(this.getName()))
        {
            sameName = true;
        }
        return sameName;
    }

    /**
     * The key that stores the form in which information is passed from one action to another.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getFormKey()
     */
    protected String handleGetFormKey()
    {
        final Object formKeyValue = this.findTaggedValue(AngularProfile.TAGGEDVALUE_ACTION_FORM_KEY);
        return formKeyValue == null ? Objects.toString(this.getConfiguredProperty(AngularGlobals.ACTION_FORM_KEY))
                                    : String.valueOf(formKeyValue);
    }

    /**
     * The name that corresponds to the from-outcome in an navigational rule.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getFromOutcome()
     */
    protected String handleGetFromOutcome()
    {
        return AngularHelper.toWebResourceName(this.getUseCase().getName() + "-" + this.getName());
    }

    /**
     * TODO: Model Documentation for
     * org.andromda.cartridges.angular.metafacades.AngularView.needsFileUpload
     * @see org.andromda.cartridges.angular.metafacades.AngularView#isNeedsFileUpload()
     */
    protected boolean handleIsNeedsFileUpload()
    {
        if(this.getAllActionParameters().size() == 0)
        {
            return false;
        }

        for (final FrontEndParameter feParameter : this.getAllActionParameters())
        {
            if (feParameter instanceof AngularParameter)
            {
                final AngularParameter parameter = (AngularParameter)feParameter;
                if(parameter.isInputFile())
                {
                    return true;
                }
                if(parameter.isComplex())
                {
                    for(final Iterator attributes = parameter.getAttributes().iterator(); attributes.hasNext();)
                    {
                        if(((AngularAttribute)attributes.next()).isInputFile())
                        {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Represents a JSF view for a front-end application.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getForwards()
     */
    protected List<ModelElementFacade> handleGetForwards()
    {
        final Map<String, ModelElementFacade> forwards = new LinkedHashMap<String, ModelElementFacade>();
        for (final FrontEndAction action : this.getActions())
        {
            if (action != null && !action.isUseCaseStart())
            {
                for (final FrontEndForward forward : action.getActionForwards())
                {
                    if (forward instanceof AngularForward)
                    {
                        forwards.put(((AngularForward)forward).getName(), forward);
                    }
                    else if (forward instanceof AngularAction)
                    {
                        forwards.put(((AngularAction)forward).getName(), forward);
                    }
                }
            }
        }
        return new ArrayList<ModelElementFacade>(forwards.values());
    }

    /**
     * Represents a JSF view for a front-end application.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getBackingValueVariables()
     */
    protected List<AngularParameter> handleGetBackingValueVariables()
    {
        final Map<String, AngularParameter> variables = new LinkedHashMap<String, AngularParameter>();
        for (final FrontEndParameter frontEndParameter : this.getAllActionParameters())
        {
            if (frontEndParameter instanceof AngularParameter)
            {
                final AngularParameter parameter = (AngularParameter)frontEndParameter;
                final String parameterName = parameter.getName();
                final Collection<AttributeFacade> attributes = parameter.getAttributes();
                if (parameter.isBackingValueRequired() || parameter.isSelectable())
                {
                    if (parameter.isBackingValueRequired() || parameter.isSelectable())
                    {
                        variables.put(parameterName, parameter);
                    }
                }
                else
                {
                    boolean hasBackingValue = false;
                    for (final AttributeFacade attribute : attributes)
                    {
                        final AngularAttribute jsfAttribute = (AngularAttribute)attribute;
                        if (jsfAttribute.isSelectable(parameter) || jsfAttribute.isBackingValueRequired(parameter))
                        {
                            hasBackingValue = true;
                            break;
                        }
                    }
                    if (hasBackingValue)
                    {
                        variables.put(parameterName, parameter);
                    }
                }
            }
        }
        return new ArrayList<AngularParameter>(variables.values());
    }

    /**
     * Represents a JSF view for a front-end application.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getFormActions()
     */
    protected List<FrontEndAction> handleGetFormActions()
    {
        final List<FrontEndAction> actions = new ArrayList<FrontEndAction>(this.getActions());
        for (final Iterator<FrontEndAction> iterator = actions.iterator(); iterator.hasNext();)
        {
            final FrontEndAction action = iterator.next();
            if (action.getFormFields().isEmpty())
            {
                iterator.remove();
            }
        }
        return actions;
    }

    /**
     * Represents a JSF view for a front-end application.
     * @see org.andromda.cartridges.angular.metafacades.AngularView#getActionForwards()
     */
    protected List<AngularForward> handleGetActionForwards()
    {
        final List<AngularForward> actionForwards = new ArrayList<AngularForward>(this.getForwards());
        for (final Iterator<AngularForward> iterator = actionForwards.iterator(); iterator.hasNext();)
        {
            if (!(iterator.next() instanceof AngularAction))
            {
                iterator.remove();
            }
        }
        return actionForwards;
    }
}