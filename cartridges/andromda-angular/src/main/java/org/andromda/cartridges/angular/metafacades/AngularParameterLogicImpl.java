// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.andromda.cartridges.angular.AngularGlobals;
import org.andromda.cartridges.angular.AngularHelper;
import org.andromda.cartridges.angular.AngularProfile;
import org.andromda.metafacades.uml.AssociationEndFacade;
import org.andromda.metafacades.uml.AttributeFacade;
import org.andromda.metafacades.uml.ClassifierFacade;
import org.andromda.metafacades.uml.FrontEndAction;
import org.andromda.metafacades.uml.FrontEndActivityGraph;
import org.andromda.metafacades.uml.FrontEndParameter;
import org.andromda.metafacades.uml.FrontEndView;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.TransitionFacade;
import org.andromda.metafacades.uml.UseCaseFacade;
import org.andromda.utils.StringUtilsHelper;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.lang3.StringUtils;

/**
 * Represents a parameter in a JSF front-end.
 * MetafacadeLogic implementation for org.andromda.cartridges.angular.metafacades.AngularParameter.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularParameter
 */
public class AngularParameterLogicImpl
    extends AngularParameterLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularParameterLogicImpl
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter
     */
    public AngularParameterLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * The default message key for this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getMessageKey()
     */
    protected String handleGetMessageKey()
    {
        final StringBuilder messageKey = new StringBuilder();

        if (!this.isNormalizeMessages())
        {
            if (this.isActionParameter())
            {
                final AngularAction action = (AngularAction)this.getAction();
                if (action != null)
                {
                    messageKey.append(action.getMessageKey());
                    messageKey.append('.');
                }
            }
            else
            {
                final AngularView view = (AngularView)this.getView();
                if (view != null)
                {
                    messageKey.append(view.getMessageKey());
                    messageKey.append('.');
                }
            }
            messageKey.append("param.");
        }

        messageKey.append(StringUtilsHelper.toResourceMessageKey(super.getName()));
        return messageKey.toString();
    }

    /**
     * Indicates whether or not we should normalize messages.
     *
     * @return true/false
     */
    private boolean isNormalizeMessages()
    {
        final String normalizeMessages = (String)getConfiguredProperty(AngularGlobals.NORMALIZE_MESSAGES);
        return Boolean.valueOf(normalizeMessages).booleanValue();
    }

    /**
     * The default message value for this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getMessageValue()
     */
    protected String handleGetMessageValue()
    {
        return StringUtilsHelper.toPhrase(super.getName()); // the actual name is used for displaying
    }

    /**
     * A resource message key suited for the parameter's documentation.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getDocumentationKey()
     */
    protected String handleGetDocumentationKey()
    {
        return getMessageKey() + '.' + AngularGlobals.DOCUMENTATION_MESSAGE_KEY_SUFFIX;
    }

    /**
     * A resource message value suited for the parameter's documentation.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getDocumentationValue()
     */
    protected String handleGetDocumentationValue()
    {
        final String value = StringUtilsHelper.toResourceMessage(this.getDocumentation(
                    "",
                    64,
                    false));
        return value == null ? "" : value;
    }

    /**
     * @return the default date format pattern as defined using the configured property
     */
    private String getDefaultDateFormat()
    {
        return (String)this.getConfiguredProperty(AngularGlobals.PROPERTY_DEFAULT_DATEFORMAT);
    }

    /**
     * @return the default time format pattern as defined using the configured property
     */
    private String getDefaultTimeFormat()
    {
        return (String)this.getConfiguredProperty(AngularGlobals.PROPERTY_DEFAULT_TIMEFORMAT);
    }

    /**
     * If this parameter represents a date or time this method will return the format in which it
     * must be represented. In the event this format has not been specified by the any tagged value
     * the default will be used.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getFormat()
     */
    protected String handleGetFormat()
    {
        return AngularHelper.getFormat(
            (ModelElementFacade)this.THIS(),
            this.getType(),
            this.getDefaultDateFormat(),
            this.getDefaultTimeFormat());
    }

    /**
     * Indicates where or not the date format is to be strictly respected. Otherwise the date
     * formatter used for the representation of this date is to be set to lenient.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isStrictDateFormat()
     */
    protected boolean handleIsStrictDateFormat()
    {
        return AngularHelper.isStrictDateFormat((ModelElementFacade)this.THIS());
    }

    /**
     * The name of the date formatter for this parameter (if this parameter represents a date).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getDateFormatter()
     */
    protected String handleGetDateFormatter()
    {
        final ClassifierFacade type = this.getType();
        return type != null && type.isDateType() ? this.getName() + "DateFormatter" : null;
    }

    /**
     * The name of the time formatter (if this parameter represents a time).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTimeFormatter()
     */
    protected String handleGetTimeFormatter()
    {
        final ClassifierFacade type = this.getType();
        return type != null && type.isTimeType() ? this.getName() + "TimeFormatter" : null;
    }
    
    /**
     * Gets the current value of the specified input type (or an empty string
     * if one isn't specified).
     *
     * @return the input type name.
     */
    private String getInputType()
    {
        return Objects.toString(this.findTaggedValue(AngularProfile.TAGGEDVALUE_INPUT_TYPE)).trim();
    }

    /**
     * Indicates whether or not this parameter is of the given input type.
     *
     * @param inputType the name of the input type to check for.
     * @return true/false
     */
    private boolean isInputType(final String inputType)
    {
        return inputType.equalsIgnoreCase(this.getInputType());
    }

    /**
     * Indicates if this parameter represents a checkbox widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputCheckbox()
     */
    protected boolean handleIsInputCheckbox()
    {
        boolean checkbox = this.isInputType(AngularGlobals.INPUT_CHECKBOX);
        if (!checkbox && this.getInputType().length() == 0)
        {
            final ClassifierFacade type = this.getType();
            checkbox = type != null ? type.isBooleanType() : false;
        }
        return checkbox;
    }

    /**
     * Indicates if this parameter represents as an input text area widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputTextarea()
     */
    protected boolean handleIsInputTextarea()
    {
        return this.isInputType(AngularGlobals.INPUT_TEXTAREA);
    }

    /**
     * Indicates whether or not this parameter represents an input select widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputSelect()
     */
    protected boolean handleIsInputSelect()
    {
        return this.isInputType(AngularGlobals.INPUT_SELECT);
    }

    /**
     * Indicates whether or not this parameter represents an input "secret" widget (i.e. password).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputSecret()
     */
    protected boolean handleIsInputSecret()
    {
        return this.isInputType(AngularGlobals.INPUT_PASSWORD);
    }

    /**
     * Indicates whether or not this parameter represents a hidden input widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputHidden()
     */
    protected boolean handleIsInputHidden()
    {
        return this.isInputType(AngularGlobals.INPUT_HIDDEN);
    }

    /**
     * Indicates whether or not this field should be rendered as plain text (not as a widget).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isPlaintext()
     */
    protected boolean handleIsPlaintext()
    {
        return this.isInputType(AngularGlobals.PLAIN_TEXT);
    }

    /**
     * Indicates whether or not this parameter should be rendered as an input radio widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputRadio()
     */
    protected boolean handleIsInputRadio()
    {
        return this.isInputType(AngularGlobals.INPUT_RADIO);
    }

    /**
     * Indicates whether or not this parameter should be rendered as a text input widget.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputText()
     */
    protected boolean handleIsInputText()
    {
        return this.isInputType(AngularGlobals.INPUT_TEXT);
    }

    /**
     * The backing list name for this parameter. This is useful if you want to be able to select the
     * parameter value from a list (i.e. a drop-down select input type).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getBackingListName()
     */
    protected String handleGetBackingListName()
    {
        return Objects.toString(this.getConfiguredProperty(AngularGlobals.BACKING_LIST_PATTERN), "").replaceAll(
            "\\{0\\}",
            this.getName());
    }

    /**
     * The name of the label list for this parameter. The label list name is the name of the list
     * storing the labels for the possible values of this parameter (typically used for the labels
     * of a drop-down select lists).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getLabelListName()
     */
    protected String handleGetLabelListName()
    {
        return Objects.toString(this.getConfiguredProperty(AngularGlobals.LABEL_LIST_PATTERN), "").replaceAll(
            "\\{0\\}",
            this.getName());
    }

    /**
     * Stores the name of the value list for this parameter; this list stores the possible values
     * that this parameter may be (typically used for the values of a drop-down select list).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValueListName()
     */
    protected String handleGetValueListName()
    {
        return Objects.toString(this.getConfiguredProperty(AngularGlobals.VALUE_LIST_PATTERN), "").replaceAll(
            "\\{0\\}",
            this.getName());
    }

    /**
     * Indicates whether or not this parameter is selectable or not (that is: it can be selected
     * from a list of values).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isSelectable()
     */
    protected boolean handleIsSelectable()
    {
        boolean selectable = false;
        if (this.isActionParameter())
        {
            selectable = this.isInputMultibox() || this.isInputSelect() || this.isInputRadio();
            final ClassifierFacade type = this.getType();

            if (!selectable && type != null)
            {
                final String name = this.getName();
                final String typeName = type.getFullyQualifiedName();

                // - if the parameter is not selectable but on a targetting page it IS selectable we must
                //   allow the user to set the backing list too
                final Collection<FrontEndView> views = this.getAction().getTargetViews();
                for (final Iterator<FrontEndView> iterator = views.iterator(); iterator.hasNext() && !selectable;)
                {
                    final Collection<FrontEndParameter> parameters = iterator.next().getAllActionParameters();
                    for (final Iterator<FrontEndParameter> parameterIterator = parameters.iterator();
                        parameterIterator.hasNext() && !selectable;)
                    {
                        final Object object = parameterIterator.next();
                        if (object instanceof AngularParameter)
                        {
                            final AngularParameter parameter = (AngularParameter)object;
                            final String parameterName = parameter.getName();
                            final ClassifierFacade parameterType = parameter.getType();
                            if (parameterType != null)
                            {
                                final String parameterTypeName = parameterType.getFullyQualifiedName();
                                if (name.equals(parameterName) && typeName.equals(parameterTypeName))
                                {
                                    selectable =
                                        parameter.isInputMultibox() || parameter.isInputSelect() ||
                                        parameter.isInputRadio();
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (this.isControllerOperationArgument())
        {
            final String name = this.getName();
            final Collection actions = this.getControllerOperation().getDeferringActions();
            for (final Iterator actionIterator = actions.iterator(); actionIterator.hasNext();)
            {
                final AngularAction action = (AngularAction)actionIterator.next();
                final Collection<FrontEndParameter>  formFields = action.getFormFields();
                for (final Iterator<FrontEndParameter>  fieldIterator = formFields.iterator();
                    fieldIterator.hasNext() && !selectable;)
                {
                    final Object object = fieldIterator.next();
                    if (object instanceof AngularParameter)
                    {
                        final AngularParameter parameter = (AngularParameter)object;
                        if (!parameter.equals(this))
                        {
                            if (name.equals(parameter.getName()))
                            {
                                selectable = parameter.isSelectable();
                            }
                        }
                    }
                }
            }
        }
        return selectable;
    }
    
    /**
     * Stores the initial value of each type.
     */
    private final Map<String, String> initialValues = new HashMap<String, String>();

    /**
     * The dummy value for this parameter. The dummy value is used for setting the dummy information
     * when dummyData is enabled.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getDummyValue()
     */
    protected String handleGetDummyValue()
    {
        final ClassifierFacade type = this.getType();
        final String typeName = type != null ? type.getFullyQualifiedName() : "";
        String initialValue = null;
        if (type != null)
        {
            if (type.isSetType() || type.isCollectionType() || type.isArrayType())
            {
                initialValue = this.constructDummyArray();
            }
            final String name = this.getName() != null ? this.getName() : "";
            if (this.initialValues.isEmpty())
            {
                initialValues.put(
                    boolean.class.getName(),
                    "false");
                initialValues.put("number", "" + name.hashCode());

                initialValues.put(
                    "string",
                    "\"" + name + "-test" + "\"");
                initialValues.put(
                    "Date",
                    "new Date()");
            }
            if (initialValue == null)
            {
                initialValue = this.initialValues.get(typeName);
            }
        }
        if (initialValue == null)
        {
            initialValue = "null";
        }
        return initialValue;
    }

    /**
     * Constructs a string representing an array initialization in Java.
     *
     * @return A String representing Java code for the initialization of an array.
     */
    private String constructDummyArray()
    {
        return AngularHelper.constructDummyArrayDeclaration(
            this.getName(),
            AngularGlobals.DUMMY_ARRAY_COUNT);
    }

    /**
     * The dummy value for a value list.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValueListDummyValue()
     */
    protected String handleGetValueListDummyValue()
    {
        return this.constructDummyArray();
    }

    /**
     * The name of the property storing the column to sort by if this parameter represents a table.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableSortColumnProperty()
     */
    protected String handleGetTableSortColumnProperty()
    {
        return this.getName() + "SortColumn";
    }

    /**
     * The name of the property that Indicates whether or not the table should be sorted ascending
     * (if this parameter represents a table).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableSortAscendingProperty()
     */
    protected String handleGetTableSortAscendingProperty()
    {
        return this.getName() + "SortAscending";
    }

    /**
     * The name of the property used for indicating whether or not a form attribute has been set at
     * least once.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getFormAttributeSetProperty()
     */
    protected String handleGetFormAttributeSetProperty()
    {
        return this.getName() + "Set";
    }

    /**
     * Indicates if this parameter can only be read and not modified.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isReadOnly()
     */
    protected boolean handleIsReadOnly()
    {
        return AngularHelper.isReadOnly(this);
    }

    /**
     * Indicates whether or not this parameter requires some kind of validation (the collection of
     * validator types is not empty).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isValidationRequired()
     */
    protected boolean handleIsValidationRequired()
    {
        boolean required = !this.getValidatorTypes().isEmpty();
        if (!required)
        {
            // - look for any attributes
            for (final Iterator<AngularAttribute> iterator = this.getAttributes().iterator(); iterator.hasNext();)
            {
                required = !iterator.next().getValidatorTypes().isEmpty();
                if (required)
                {
                    break;
                }
            }

            // - look for any table columns
            if (!required)
            {
                for (final Iterator iterator = this.getTableColumns().iterator(); iterator.hasNext();)
                {
                    final Object object = iterator.next();
                    if (object instanceof AngularAttribute)
                    {
                        final AngularAttribute attribute = (AngularAttribute)object;
                        required = !attribute.getValidatorTypes().isEmpty();
                        if (required)
                        {
                            break;
                        }
                    }
                }
            }
        }
        return required;
    }

    /**
     * All the validator types for this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValidatorTypes()
     */
    protected Collection handleGetValidatorTypes()
    {
        return AngularHelper.getValidatorTypes(
            (ModelElementFacade)this.THIS(),
            this.getType());
    }

    /**
     * The validator's 'validwhen' value, this is useful when the validation of a parameter depends
     * on the validation of others. See the apache commons-validator documentation for more
     * information.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValidWhen()
     */
    protected String handleGetValidWhen()
    {
        return AngularHelper.getValidWhen(this);
    }

    /**
     * Indicates whether or not this is a file input type.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputFile()
     */
    protected boolean handleIsInputFile()
    {
        boolean file = false;
        ClassifierFacade type = getType();
        if (type != null)
        {
            file = type.isFileType();
        }
        return file;
    }

    /**
     * The validator variables.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValidatorVars()
     */
    protected Collection handleGetValidatorVars()
    {
        return AngularHelper.getValidatorVars(
            (ModelElementFacade)this.THIS(),
            this.getType(),
            null);
    }

    /**
     * Indicates whether or not this type represents an input multibox.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputMultibox()
     */
    protected boolean handleIsInputMultibox()
    {
        return this.isInputType(AngularGlobals.INPUT_MULTIBOX);
    }

    /**
     * Indicates if this parameter's value should be reset or not after an action has been performed
     * with this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isReset()
     */
    protected boolean handleIsReset()
    {
        boolean reset =
            Boolean.valueOf(Objects.toString(this.findTaggedValue(AngularProfile.TAGGEDVALUE_INPUT_RESET), ""))
                   .booleanValue();
        if (!reset)
        {
            final AngularAction action = (AngularAction)this.getAction();
            reset = action != null && action.isFormReset();
        }
        return reset;
    }

    /**
     * Indicates if this parameter is 'complex', that is: its of a complex type (has at least one
     * attribute or association).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isComplex()
     */
    protected boolean handleIsComplex()
    {
        boolean complex = false;
        final ClassifierFacade type = this.getType();
        if (type != null)
        {
            complex = !type.getAttributes().isEmpty();
            if (!complex)
            {
                complex = !type.getAssociationEnds().isEmpty();
            }
        }
        return complex;
    }

    /**
     * All attributes belonging to this parameter's type.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getAttributes()
     */
    protected Collection handleGetAttributes()
    {
        Collection<AttributeFacade> attributes = null;
        ClassifierFacade type = this.getType();
        if (type != null)
        {
            if (type.isArrayType())
            {
                type = type.getNonArray();
            }
            if (type != null)
            {
                attributes = type.getAttributes(true);
            }
        }
        return attributes == null ? new ArrayList<AttributeFacade>() : attributes;
    }

    /**
     * All navigation association ends belonging to this parameter's type.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getNavigableAssociationEnds()
     */
    protected Collection handleGetNavigableAssociationEnds()
    {
        Collection<AssociationEndFacade> associationEnds = null;
        ClassifierFacade type = this.getType();
        if (type != null)
        {
            if (type.isArrayType())
            {
                type = type.getNonArray();
            }
            if (type != null)
            {
                associationEnds = type.getNavigableConnectingEnds();
            }
        }
        return associationEnds == null ? new ArrayList<AssociationEndFacade>() : associationEnds;
    }

    /**
     * Indicates whether or not this parameter uses the equal validator.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isEqualValidator()
     */
    protected boolean handleIsEqualValidator()
    {
        final String equal = AngularHelper.getEqual((ModelElementFacade)this.THIS());
        return equal != null && equal.trim().length() > 0;
    }

    /**
     * The name of the backing value for this parameter (only used with collections and arrays that
     * are input type table).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getBackingValueName()
     */
    protected String handleGetBackingValueName()
    {
        return Objects.toString(this.getConfiguredProperty(AngularGlobals.BACKING_VALUE_PATTERN)).replaceAll(
            "\\{0\\}",
            this.getName());
    }

    /**
     * Indicates whether or not this is an table input type.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isInputTable()
     */
    protected boolean handleIsInputTable()
    {
        return this.getInputTableIdentifierColumns().length() > 0 || this.isInputType(AngularGlobals.INPUT_TABLE);
    }

    /**
     * Indicates if a backing value is required for this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isBackingValueRequired()
     */
    protected boolean handleIsBackingValueRequired()
    {
        boolean required = false;
        if (this.isActionParameter())
        {
            required = this.isInputTable();
            final ClassifierFacade type = this.getType();

            if (!required && type != null)
            {
                final String name = this.getName();
                final String typeName = type.getFullyQualifiedName();

                // - if the backing value is not required for this parameter but on
                //   a targeting page it IS selectable we must allow the user to set the backing value as well
                final Collection<FrontEndView> views = this.getAction().getTargetViews();
                for (final Iterator<FrontEndView> iterator = views.iterator(); iterator.hasNext() && !required;)
                {
                    final Collection<FrontEndParameter> parameters = iterator.next().getAllActionParameters();
                    for (final Iterator<FrontEndParameter> parameterIterator = parameters.iterator();
                        parameterIterator.hasNext() && !required;)
                    {
                        final FrontEndParameter object = parameterIterator.next();
                        if (object instanceof AngularParameter)
                        {
                            final AngularParameter parameter = (AngularParameter)object;
                            final String parameterName = parameter.getName();
                            final ClassifierFacade parameterType = parameter.getType();
                            if (parameterType != null)
                            {
                                final String parameterTypeName = parameterType.getFullyQualifiedName();
                                if (name.equals(parameterName) && typeName.equals(parameterTypeName))
                                {
                                    required = parameter.isInputTable();
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (this.isControllerOperationArgument())
        {
            final String name = this.getName();
            final Collection<FrontEndAction> actions = this.getControllerOperation().getDeferringActions();
            for (final Iterator<FrontEndAction> actionIterator = actions.iterator(); actionIterator.hasNext();)
            {
                final AngularAction action = (AngularAction)actionIterator.next();
                final Collection<FrontEndParameter> formFields = action.getFormFields();
                for (final Iterator<FrontEndParameter> fieldIterator = formFields.iterator();
                    fieldIterator.hasNext() && !required;)
                {
                    final Object object = fieldIterator.next();
                    if (object instanceof AngularParameter)
                    {
                        final AngularParameter parameter = (AngularParameter)object;
                        if (!parameter.equals(this))
                        {
                            if (name.equals(parameter.getName()))
                            {
                                required = parameter.isBackingValueRequired();
                            }
                        }
                    }
                }
            }
        }
        return required;
    }

    /**
     * A comma separated list of the input table identifier columns (these are the columns that
     * uniquely define a row in an input table).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getInputTableIdentifierColumns()
     */
    protected String handleGetInputTableIdentifierColumns()
    {
        return Objects.toString(this.findTaggedValue(AngularProfile.TAGGEDVALUE_INPUT_TABLE_IDENTIFIER_COLUMNS), "").trim();
    }

    /**
     * Whether or not the parameter is a "pageable table", that is a table that supports paging
     * (i.e. DB paging).
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#isPageableTable()
     */
    protected boolean handleIsPageableTable()
    {
        final Object value = this.findTaggedValue(AngularProfile.TAGGEDVALUE_TABLE_PAGEABLE);
        return Boolean.valueOf(Objects.toString(value, "")).booleanValue();
    }

    /**
     * The max length allowed in the input component
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getMaxLength()
     */
    protected String handleGetMaxLength()
    {
        final Collection<Collection> vars=getValidatorVars();
        if(vars == null)
        {
            return null;
        }
        for(Iterator<Collection> it=vars.iterator(); it.hasNext();)
        {
            final Object[] values=(it.next()).toArray();
            if("maxlength".equals(values[0]))
            {
                return values[1].toString();
            }
        }
        return null;
    }

    //to be used in the range validator: "range - 1000" or "range 20 -".
    /** - */
    static final String UNDEFINED_BOUND="-";
    /** javax.validation.constraints.NotNull */
    static final String AN_REQUIRED = "@javax.validation.constraints.NotNull";
    /** org.hibernate.validator.constraints.URL */
    static final String AN_URL = "@org.hibernate.validator.constraints.URL";
    /** org.apache.myfaces.extensions.validator.baseval.annotation.LongRange */
    static final String AN_LONG_RANGE = "@org.apache.myfaces.extensions.validator.baseval.annotation.LongRange";
    /** org.apache.myfaces.extensions.validator.baseval.annotation.DoubleRange */
    static final String AN_DOUBLE_RANGE = "@org.apache.myfaces.extensions.validator.baseval.annotation.DoubleRange";
    /** org.hibernate.validator.constraints.Email */
    static final String AN_EMAIL = "@org.hibernate.validator.constraints.Email";
    /** org.hibernate.validator.constraints.CreditCardNumber */
    static final String AN_CREDIT_CARD = "@org.hibernate.validator.constraints.CreditCardNumber";
    /** javax.validation.constraints.Size */
    static final String AN_LENGTH = "@javax.validation.constraints.Size";
    /** org.apache.myfaces.extensions.validator.baseval.annotation.Pattern */
    static final String AN_PATTERN = "@org.apache.myfaces.extensions.validator.baseval.annotation.Pattern";
    /** org.apache.myfaces.extensions.validator.crossval.annotation.Equals */
    static final String AN_EQUALS = "@org.apache.myfaces.extensions.validator.crossval.annotation.Equals";

    /**
     * All the annotations for this parameter.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getAnnotations()
     */
    protected Collection handleGetAnnotations()
    {
        final Collection<String> result=new HashSet<String>();
        boolean requiredAdded=false;
        for(String vt: (Collection<String>)getValidatorTypes())
        {
            if(vt.startsWith("@")) //add the annotation
            {
                result.add(vt);
            }
            if(AngularHelper.VT_REQUIRED.equals(vt))
            {
                requiredAdded=true;
                result.add(AN_REQUIRED);
            }
            else if(AngularHelper.VT_URL.equals(vt))
            {
                result.add(AN_URL);
            }
            else if(AngularHelper.VT_INT_RANGE.equals(vt))
            {
                final StringBuilder sb=new StringBuilder(AN_LONG_RANGE+"(");
                final String format = AngularHelper.getInputFormat((ModelElementFacade)this.THIS());
                final String rangeStart = AngularHelper.getRangeStart(format);
                boolean addComma=false;
                if(StringUtils.isNotBlank(rangeStart) && !rangeStart.equals(UNDEFINED_BOUND))
                {
                    sb.append("minimum="+rangeStart);
                    addComma=true;
                }
                final String rangeEnd = AngularHelper.getRangeEnd(format);
                if(StringUtils.isNotBlank(rangeEnd) && !rangeEnd.equals(UNDEFINED_BOUND))
                {
                    if(addComma)
                    {
                        sb.append(",");
                    }
                    sb.append("maximum="+rangeEnd);
                }
                sb.append(")");
                result.add(sb.toString());
            }
            else if(AngularHelper.VT_FLOAT_RANGE.equals(vt) || AngularHelper.VT_DOUBLE_RANGE.equals(vt))
            {
                final StringBuilder sb=new StringBuilder(AN_DOUBLE_RANGE+"(");
                final String format = AngularHelper.getInputFormat(((ModelElementFacade)this.THIS()));
                final String rangeStart = AngularHelper.getRangeStart(format);
                boolean addComma=false;
                if(StringUtils.isNotBlank(rangeStart) && !rangeStart.equals(UNDEFINED_BOUND))
                {
                    sb.append("minimum="+rangeStart);
                    addComma=true;
                }
                final String rangeEnd = AngularHelper.getRangeEnd(format);
                if(StringUtils.isNotBlank(rangeEnd) && !rangeEnd.equals(UNDEFINED_BOUND))
                {
                    if(addComma)
                    {
                        sb.append(",");
                    }
                    sb.append("maximum="+rangeEnd);
                }
                sb.append(")");
                result.add(sb.toString());
            }
            else if(AngularHelper.VT_EMAIL.equals(vt))
            {
                result.add(AN_EMAIL);
            }
            else if(AngularHelper.VT_CREDIT_CARD.equals(vt))
            {
                result.add(AN_CREDIT_CARD);
            }
            else if(AngularHelper.VT_MIN_LENGTH.equals(vt) || AngularHelper.VT_MAX_LENGTH.equals(vt))
            {
                final StringBuilder sb=new StringBuilder(AN_LENGTH+"(");
                final Collection formats = this.findTaggedValues(AngularProfile.TAGGEDVALUE_INPUT_FORMAT);
                boolean addComma=false;
                for (final Iterator formatIterator = formats.iterator(); formatIterator.hasNext();)
                {
                    final String additionalFormat = String.valueOf(formatIterator.next());
                    if (AngularHelper.isMinLengthFormat(additionalFormat))
                    {
                        if(addComma)
                        {
                            sb.append(",");
                        }
                        sb.append("min=");
                        sb.append(AngularHelper.getMinLengthValue(additionalFormat));
                        addComma=true;
                    }
                    else if (AngularHelper.isMaxLengthFormat(additionalFormat))
                    {
                        if(addComma)
                        {
                            sb.append(",");
                        }
                        sb.append("max=");
                        sb.append(AngularHelper.getMinLengthValue(additionalFormat));
                        addComma=true;
                    }
                }
                sb.append(")");
                result.add(sb.toString());
            }
            else if(AngularHelper.VT_MASK.equals(vt))
            {
                final Collection formats = this.findTaggedValues(AngularProfile.TAGGEDVALUE_INPUT_FORMAT);
                for (final Iterator formatIterator = formats.iterator(); formatIterator.hasNext();)
                {
                    final String additionalFormat = String.valueOf(formatIterator.next());
                    if (AngularHelper.isPatternFormat(additionalFormat))
                    {
                        result.add(AN_PATTERN+"(\""+AngularHelper.getPatternValue(additionalFormat)+"\")");
                    }
                }
            }
            else if(AngularHelper.VT_VALID_WHEN.equals(vt))
            {
                result.add("");
            }
            else if(AngularHelper.VT_EQUAL.equals(vt))
            {
                result.add(AN_EQUALS+"(\""+AngularHelper.getEqual((ModelElementFacade)this.THIS())+"\")");
            }
        }
        if(!requiredAdded && getLower() > 0)
        {
            result.add(AN_REQUIRED);
        }
        return result;
    }

    /**
     * TODO: Model Documentation for
     * org.andromda.cartridges.angular.metafacades.AngularParameter.getTableColumnMessageKey
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableColumnMessageKey(String)
     */
    protected String handleGetTableColumnMessageKey(String columnName)
    {
        StringBuilder messageKey = new StringBuilder();
        if (!this.isNormalizeMessages())
        {
            final AngularView view = (AngularView)this.getView();
            if (view != null)
            {
                messageKey.append(this.getMessageKey());
                messageKey.append('.');
            }
        }
        messageKey.append(StringUtilsHelper.toResourceMessageKey(columnName));
        return messageKey.toString();
    }

    /**
     * TODO: Model Documentation for
     * org.andromda.cartridges.angular.metafacades.AngularParameter.getTableColumnMessageValue
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableColumnMessageValue(String)
     */
    protected String handleGetTableColumnMessageValue(String columnName)
    {
        return StringUtilsHelper.toPhrase(columnName);
    }

    /**
     * Gets the arguments for this parameter's validators.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getValidatorArgs(String)
     */
    protected Collection handleGetValidatorArgs(String validatorType)
    {
        return AngularHelper.getValidatorArgs(
            (ModelElementFacade)this.THIS(),
            validatorType);
    }

    /**
     * Those actions that are targetting the given column, only makes sense when this parameter
     * represents a table view-variable.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableColumnActions(String)
     */
    protected List handleGetTableColumnActions(String columnName)
    {
        final List<AngularAction> columnActions = new ArrayList<AngularAction>();

        if (columnName != null)
        {
            final Set<AngularAction> actions = new LinkedHashSet<AngularAction>(this.getTableHyperlinkActions());
            actions.addAll(this.getTableFormActions());
            for (final AngularAction action : actions)
            {
                if (columnName.equals(action.getTableLinkColumnName()))
                {
                    columnActions.add(action);
                }
            }
        }

        return columnActions;
    }

    /**
     * Represents a parameter in a JSF front-end.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableHyperlinkActions()
     */
    protected List<AngularAction> handleGetTableHyperlinkActions()
    {
        return this.getTableActions(true);
    }

    private class ActionFilter implements Predicate
    {
        final private boolean hyperlink;
        public ActionFilter(boolean hyperlink)
        {
            this.hyperlink = hyperlink;
        }
        
        @Override
        public boolean evaluate(Object action) 
        {
            return ((AngularAction)action).isHyperlink() == this.hyperlink;
        }
    }
    
    /**
     * If this is a table this method returns all those actions that are declared to work
     * on this table.
     *
     * @param hyperlink denotes on which type of actions to filter
     */
    private List<AngularAction> getTableActions(boolean hyperlink)
    {
        final List<AngularAction> actions = new ArrayList<AngularAction>(super.getTableActions());
        CollectionUtils.filter(actions, new ActionFilter(hyperlink));
        return actions;
    }

    /**
     * Represents a parameter in a JSF front-end.
     * @see org.andromda.cartridges.angular.metafacades.AngularParameter#getTableFormActions()
     */
    protected List<AngularAction> handleGetTableFormActions()
    {
        return this.getTableActions(false);
    }

    @Override
    protected List<AngularAction> handleGetTableActions() {
        final Set<AngularAction> actions = new LinkedHashSet<AngularAction>();
        final String name = StringUtils.trimToNull(getName());
        if (name != null && isTable())
        {
            final AngularView view = (AngularView)this.getView();

            final Collection<UseCaseFacade> allUseCases = getModel().getAllUseCases();
            for (final UseCaseFacade useCase : allUseCases)
            {
                if (useCase instanceof AngularUseCase)
                {
                    final FrontEndActivityGraph graph = ((AngularUseCase)useCase).getActivityGraph();
                    if (graph != null)
                    {
                        final Collection<TransitionFacade> transitions = graph.getTransitions();
                        for (final TransitionFacade transition : transitions)
                        {
                            if (transition.getSource().equals(view) && transition instanceof AngularAction)
                            {
                                final AngularAction action = (AngularAction)transition;
                                if (action.isTableLink() && name.equals(action.getTableLinkName()))
                                {
                                    actions.add(action);
                                }
                            }
                        }
                    }
                }
            }
        }
        return new ArrayList<AngularAction>(actions);
    }
}