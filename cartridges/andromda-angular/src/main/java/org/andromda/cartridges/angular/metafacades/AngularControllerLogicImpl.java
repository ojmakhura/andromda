// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.utils.StringUtilsHelper;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.andromda.metafacades.uml.ModelElementFacade;

/**
 * Represents a controller for a JSF application.
 * MetafacadeLogic implementation for org.andromda.cartridges.angular.metafacades.AngularController.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularController
 */
public class AngularControllerLogicImpl
    extends AngularControllerLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularControllerLogicImpl
     * @see org.andromda.cartridges.angular.metafacades.AngularController
     */
    public AngularControllerLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * The implementation name of this controller.
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getImplementationName()
     */
    protected String handleGetImplementationName()
    {
        final String pattern = ObjectUtils.toString(this.getConfiguredProperty(AngularGlobals.CONTROLLER_IMPLEMENTATION_PATTERN));
        System.out.print("------------ AngularControllerLogicImpl.handleGetImplementationName " + pattern);
        return pattern.replaceFirst("\\{0\\}", StringUtils.capitalize(this.getName()));
    }

    /**
     * The fully qualified implementation name of this controller.
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getFullyQualifiedImplementationName()
     */
    protected String handleGetFullyQualifiedImplementationName()
    {
        final StringBuilder fullyQualifiedName = new StringBuilder();
        final String packageName = this.getPackageName();
        if (StringUtils.isNotBlank(packageName))
        {
            fullyQualifiedName.append(packageName + '.');
        }
        return fullyQualifiedName.append(this.getImplementationName()).toString();
    }

    /**
     * The fully qualified path to the controller implemention file.
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getFullyQualifiedImplementationPath()
     */
    protected String handleGetFullyQualifiedImplementationPath()
    {
        return this.getFullyQualifiedImplementationName().replace('.', '/');
    }

    /**
     * The bean name of this controller (this is what is stored in the JSF configuration file).
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getBeanName()
     */
    protected String handleGetBeanName()
    {
        // TODO put your implementation here.
        return StringUtilsHelper.lowerCamelCaseName(this.getName());
    }

    /**
     * The calculated serial version UID for this controller.
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getControllerSerialVersionUID()
     */
    protected String handleGetControllerSerialVersionUID()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Represents a controller for a JSF application.
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getSessionObjectReferences()
     */
    protected List<DependencyFacade> handleGetSessionObjectReferences()
    {
        final List<DependencyFacade> references = new ArrayList<DependencyFacade>(this.getSourceDependencies());
        for (final Iterator<DependencyFacade> iterator = references.iterator(); iterator.hasNext();)
        {
            final ModelElementFacade targetElement = (iterator.next()).getTargetElement();
            if (!(targetElement instanceof AngularSessionObject))
            {
                iterator.remove();
            }
        }
        
        return references;
    }
}