// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;
import java.util.Set;

import org.andromda.cartridges.angular.AngularGlobals;
import org.andromda.cartridges.angular.AngularUtils;
import org.andromda.metafacades.uml.AttributeFacade;
import org.andromda.metafacades.uml.ClassifierFacade;
import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.metafacades.uml.FilteredCollection;
import org.andromda.metafacades.uml.FrontEndAction;
import org.andromda.metafacades.uml.FrontEndActionState;
import org.andromda.metafacades.uml.FrontEndParameter;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.OperationFacade;
import org.andromda.metafacades.uml.PackageFacade;
import org.andromda.metafacades.uml.ParameterFacade;
import org.andromda.metafacades.uml.Service;
import org.andromda.utils.StringUtilsHelper;
import org.apache.commons.lang3.StringUtils;

/**
 * Represents a controller for a Angular application.
 * MetafacadeLogic implementation for org.andromda.cartridges.angular.metafacades.AngularController.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularController
 */
public class AngularControllerLogicImpl
    extends AngularControllerLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularControllerLogicImpl
     * @see org.andromda.cartridges.angular.metafacades.AngularController
     */
    public AngularControllerLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * @return implementationName
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getImplementationName()
     */
    // protected String handleGetImplementationName()
    // {
    //     final String pattern = Objects.toString(
    //         this.getConfiguredProperty(AngularGlobals.CONTROLLER_IMPLEMENTATION_PATTERN), "");
    //     return pattern.replaceFirst("\\{0\\}", StringUtils.capitalize(this.getName()));
    // }

    /**
     * @return fullyQualifiedImplementationName
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getFullyQualifiedImplementationName()
     */
    // protected String handleGetFullyQualifiedImplementationName()
    // {
    //     final StringBuilder fullyQualifiedName = new StringBuilder();
    //     final String packageName = this.getPackageName();
    //     if (StringUtils.isNotBlank(packageName))
    //     {
    //         fullyQualifiedName.append(packageName + '.');
    //     }
    //     return fullyQualifiedName.append(this.getImplementationName()).toString();
    // }

    /**
     * @return getFullyQualifiedImplementationName().replace('.', '/')
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getFullyQualifiedImplementationPath()
     */
    // protected String handleGetFullyQualifiedImplementationPath()
    // {
    //     String packagePath = this.getPackagePath();
    //     return this.getFullyQualifiedImplementationName().replace('.', '/');
    // }

    /**
     * @return StringUtilsHelper.lowerCamelCaseName(this.getName())
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getBeanName()
     */
    // protected String handleGetBeanName()
    // {
    //     return StringUtilsHelper.lowerCamelCaseName(this.getName());
    // }

    /**
     * @return references
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getSessionObjectReferences()
     */
    // protected List<DependencyFacade> handleGetSessionObjectReferences()
    // {
    //     final List<DependencyFacade> references = new ArrayList<DependencyFacade>(this.getSourceDependencies());
    //     for (final Iterator<DependencyFacade> iterator = references.iterator(); iterator.hasNext();)
    //     {
    //         final ModelElementFacade targetElement = (iterator.next()).getTargetElement();
    //         if (!(targetElement instanceof AngularSessionObject))
    //         {
    //             iterator.remove();
    //         }
    //     }
    //     return references;
    // }

    /**
     * @return controllerSerialVersionUID
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getControllerSerialVersionUID()
     */
    // protected String handleGetControllerSerialVersionUID()
    // {
    //    final StringBuilder buffer = new StringBuilder();
    //    buffer.append(this.getFullyQualifiedImplementationName());
    //    addSerialUIDData(buffer);
    //    return AngularUtils.calcSerialVersionUID(buffer);
    // }

    // private void addSerialUIDData(StringBuilder buffer)
    // {
    //     for (final FrontEndAction action : this.getUseCase().getActions())
    //     {
    //         buffer.append(action.getName());
    //     }
    // }

    /**
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getAllServices()
     */
    // @Override
    // protected Collection<Service> handleGetAllServices() {
    //     final Set<Service> allServices=new HashSet<Service>();
    //     for(final DependencyFacade dependency: this.getServiceReferences())
    //     {
    //         allServices.add((Service)dependency.getTargetElement());
    //     }
    //     for(final DependencyFacade dependency: this.getServicesPackagesReferences())
    //     {
    //         final PackageFacade pack=(PackageFacade)dependency.getTargetElement();
    //         for(final ClassifierFacade clazz: pack.getClasses())
    //         {
    //             if(clazz instanceof Service)
    //             {
    //                 allServices.add((Service)clazz);
    //             }
    //         }
    //     }
    //     for(final FrontEndAction action: getUseCase().getActions())
    //     {
    //         for(final FrontEndActionState as: action.getActionStates())
    //         {
    //             for(final OperationFacade operation: as.getServiceCalls())
    //             {
    //                 allServices.add((Service)operation.getOwner());
    //             }
    //         }
    //     }
    //     return allServices;
    // }

    @Override
    protected Collection<AngularService> handleGetAllRestControllers() {
        final Set<AngularService> allServices=new HashSet<AngularService>();
        for(final DependencyFacade dependency: this.getServiceReferences())
        {
            if(AngularUtils.isWebService(dependency.getTargetElement()))
            {
                allServices.add((AngularService)dependency.getTargetElement());
            }
        }
        for(final DependencyFacade dependency: this.getServicesPackagesReferences())
        {
            final PackageFacade pack=(PackageFacade)dependency.getTargetElement();
            for(final ClassifierFacade clazz: pack.getClasses())
            {
                if(AngularUtils.isWebService(clazz))
                {
                    allServices.add((AngularService)clazz);
                }
            }
        }
        for(final FrontEndAction action: getUseCase().getActions())
        {
            for(final FrontEndActionState as: action.getActionStates())
            {
                for(final OperationFacade operation: as.getServiceCalls())
                {
                    if(AngularUtils.isWebService(operation.getOwner()))
                    {
                        allServices.add((AngularService)operation.getOwner());
                    }
                }
            }
        }
        return allServices;
    }

    /**
     * @see org.andromda.cartridges.angular.metafacades.AngularController#getServicesPackagesReferences()
     */
    // @SuppressWarnings("unchecked")
    // @Override
    // protected List<PackageFacade> handleGetServicesPackagesReferences() {
    //     return (List<PackageFacade>)new FilteredCollection(this.getSourceDependencies())
    //     {
    //         private static final long serialVersionUID = 134L;
    //         @Override
    //         public boolean evaluate(final Object object)
    //         {
    //             return ((DependencyFacade)object).getTargetElement() instanceof PackageFacade;
    //         }
    //     };
    // }

    @Override
    protected Collection<ModelElementFacade> handleGetImports() {
        
        HashSet<ModelElementFacade> imports = new HashSet<>();

        for(OperationFacade operation : this.getOperations()) {
            
            if(operation.getReturnType().isEnumeration() || !operation.getReturnType().getAttributes().isEmpty()) {
                imports.add(operation.getReturnType());

                if(operation.getReturnType().isTemplateParametersPresent()) {
                    operation.getReturnType().getTemplateParameters().forEach(template -> {
                        imports.add(template.getType());
                    });
                }
            }

            for(ParameterFacade parameter : operation.getArguments()) {
                if(parameter.getType().isEnumeration() || !parameter.getType().getAttributes().isEmpty()) {
                    imports.add(parameter.getType());

                    if(parameter.getType().isTemplateParametersPresent()) {
                        imports.add(parameter.getType());
                        parameter.getType().getTemplateParameters().forEach(template -> {
                            imports.add(template.getType());
                        });
                    }
                }
            }
        }

        getUseCase().getActions().forEach(action -> {

            action.getFormFields().forEach(field -> {
                if(field.getType().isEnumeration() || !field.getType().getAttributes().isEmpty()) {
                    imports.add(field.getType());
                }

                if(field.getType().isTemplateParametersPresent()) {
                    imports.add(field.getType());
                    field.getType().getTemplateParameters().forEach(template -> {

                        imports.add(template.getType());
                    });
                }
            });

            action.getForwardParameters().forEach(field -> {
                if(field.getType().isEnumeration() || !field.getType().getAttributes().isEmpty()) {
                    imports.add(field.getType());
                }

                if(field.getType().isTemplateParametersPresent()) {
                    imports.add(field.getType());
                    field.getType().getTemplateParameters().forEach(template -> {
                        imports.add(template.getType());
                    });
                }
            });

            // action.getActionStates().forEach(actionState -> {
            //     AngularForward state = (AngularForward) actionState.getForward();

            //     if(state == null) {
            //         return;
            //     }

            //     state.getActions().forEach(forwardAction -> {
            //         forwardAction.getFormFields().forEach(field -> {
            //             if(field.getType().isEnumeration() || !field.getType().getAttributes().isEmpty()) {
            //                 imports.add(field.getType());
            //             }

            //             if(field.getType().isTemplateParametersPresent()) {
            //                 field.getType().getTemplateParameters().forEach(template -> {
            //                     imports.add(template.getType());
            //                 });
            //             }
            //         });
            //     });
            // });
        });

        for(AttributeFacade attribute : this.getAttributes()) {

            if(attribute.getType().isEnumeration() || !attribute.getType().getAttributes().isEmpty()) {
                imports.add(attribute.getType());
            }
        }

        imports.addAll(this.getAllRestControllers());
        imports.addAll(this.getOtherControllers());

        return imports;
    }

    @Override
    protected String handleGetFileName() {
        String phrase = StringUtilsHelper.toPhrase(this.getName()).toLowerCase();
        return phrase.replace(" ", "-");
    }

    @Override
    protected String handleGetFilePath() {
        return "controller/" + this.getPackagePath() + "/" + this.getFileName();
    }

    @Override
    protected String handleGetImplementationFileName() {
        return this.getFileName() + "Impl";
    }

    @Override
    protected String handleGetVariableName() {
        return StringUtilsHelper.lowerCamelCaseName(this.getName());
    }

    @Override
    protected String handleGetImplementationFilePath() {
        return this.getFilePath() + ".impl";
    }

    @Override
    protected Collection handleGetOtherControllers() {
        
        HashSet<AngularController> controllers = new HashSet<>();

        for(FrontEndAction _action : this.getUseCase().getActions()) {
            
            for(FrontEndActionState actionState : _action.getActionStates()) {
                AngularForward state = (AngularForward) actionState.getForward();
                if(state != null && state.isEnteringFinalState() && state.getTarget() != null) {
                    
                    AngularFinalState finalState = (AngularFinalState) state.getTarget();
                    AngularUseCase useCase = (AngularUseCase) finalState.getTargetElement();

                    if(useCase != null && useCase.getController() != null) {
                        if(!useCase.getController().getName().equals(this.getName())) {
                            controllers.add((AngularController) useCase.getController());
                        }
                    }
                }
            }
            
            if(_action.getTarget() instanceof AngularFinalStateLogicImpl) {
                
                AngularFinalStateLogicImpl state = (AngularFinalStateLogicImpl) _action.getTarget();
                controllers.add((AngularController) state.getTargetController());
            }
        }
        
        return controllers;
    }
}