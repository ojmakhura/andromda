// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angular.metafacades;

import org.andromda.metafacades.uml.ClassifierFacade;
import org.andromda.metafacades.uml.FrontEndController;
import org.andromda.metafacades.uml.FrontEndUseCase;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.UMLProfile;

/**
 * Represents a final state in a Angular use case.
 * MetafacadeLogic implementation for org.andromda.cartridges.angular.metafacades.AngularFinalState.
 *
 * @see org.andromda.cartridges.angular.metafacades.AngularFinalState
 */
public class AngularFinalStateLogicImpl
    extends AngularFinalStateLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngularFinalStateLogicImpl
     * @see org.andromda.cartridges.angular.metafacades.AngularFinalState
     */
    public AngularFinalStateLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    private AngularManageableEntity findManageableByName(String name)
    {
        for(ClassifierFacade clazz: getModel().getAllClasses())
        {
            if(clazz instanceof AngularManageableEntity && 
               (clazz.getName().equals(name) || clazz.getFullyQualifiedName().equals(name)))
            {
                return (AngularManageableEntity)clazz;
            }
        }
        return null;
    }

    /**
     * @return fullPath
     * @see org.andromda.cartridges.angular.metafacades.AngularFinalState#getPath()
     */
    protected String handleGetPath()
    {
        String fullPath = null;

        FrontEndUseCase useCase = this.getTargetUseCase();
        if (useCase == null)
        {
            // - perhaps this final state links outside of the UML model
            final Object taggedValue = this.findTaggedValue(UMLProfile.TAGGEDVALUE_EXTERNAL_HYPERLINK);
            if (taggedValue == null)
            {
                String name = getName();
                if (name != null && (name.startsWith("/") || name.startsWith("http://") || name.startsWith("file:")))
                {
                    fullPath = name;
                }
            }
            else
            {
                fullPath = String.valueOf(taggedValue);
            }
            
            if(fullPath == null && getName() != null)
            {
                fullPath = ((AngularManageableEntity)getTargetElement()).getActionFullPath();
            }
            
        }
        else if (useCase instanceof AngularUseCase)
        {
            fullPath = ((AngularUseCase)useCase).getPath();
        }

        return fullPath;
    }

    /**
     * @return the target controller
     * @see org.andromda.cartridges.angular.metafacades.AngularFinalState#getTargetControllerFullyQualifiedName()
     */
    // @Override
    // protected String handleGetTargetControllerFullyQualifiedName() {
    //     String result=null;
        
    //     if(getTargetElement() instanceof AngularUseCase)
    //     {
    //         result=((AngularUseCase)getTargetElement()).getController().getFullyQualifiedName();
    //     }
    //     else if(getTargetElement() instanceof AngularManageableEntity)
    //     {
    //         result=((AngularManageableEntity)getTargetElement()).getControllerType();
    //     }
        
    //     return result;
    // }

    /**
     * @return the target controller bean name
     * @see org.andromda.cartridges.angular.metafacades.AngularFinalState#getTargetControllerBeanName()
     */
    // @Override
    // protected String handleGetTargetControllerBeanName() {
    //     String result=null;
        
    //     if(getTargetElement() instanceof AngularUseCase)
    //     {
    //         result=((AngularController)((AngularUseCase)getTargetElement()).getController()).getName();
    //     }
    //     else if(getTargetElement() instanceof AngularManageableEntity)
    //     {
    //         result=((AngularManageableEntity)getTargetElement()).getControllerBeanName();
    //     }
        
    //     return result;
    // }

    /**
     * @return the target element (use case or manageable class)
     * @see org.andromda.cartridges.angular.metafacades.AngularFinalState#getTargetElement()
     */
    // @Override
    // protected ModelElementFacade handleGetTargetElement() {
    //     ModelElementFacade targetElement=getTargetUseCase();
        
    //     if(targetElement == null)
    //     {
    //         String nameParts[] = getName().split(" ");
    //         if(nameParts.length >= 2 && nameParts[0].equalsIgnoreCase("Manage"))
    //         {
    //             AngularManageableEntity manageable=findManageableByName(nameParts[1]);
    //             if(manageable != null)
    //             {
    //                 return targetElement=manageable;
    //             }
    //         }
    //     }
        
    //     return targetElement;
    // }

    // @Override
    // protected Object handleGetTargetController() {

    //     FrontEndController controller = null;
        
    //     if(getTargetElement() instanceof AngularUseCase)
    //     {
    //         controller = ((AngularUseCase)getTargetElement()).getController();
    //     }
    //     // else if(getTargetElement() instanceof AngularManageableEntity)
    //     // {
    //     //     controller = ((AngularManageableEntity)getTargetElement()).getCo;
    //     // }

    //     return controller;
    // }
}