<?xml version="1.0" encoding="iso-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>AndroMDA - Hibernate - HowTo - Second Level Cache</title>
        <author email="carloslcuenca@users.sourceforge.net">Carlos Cuenca</author>
    </properties>

    <body>
        <section name="Hibernate Cartridge Second Level Cache">
            <subsection name="Hibernate Cartridge Second Level Cache">
                <p class="std">
                    Hibernate uses two different caches for objects. The first level cache, and the second level cache.
                </p>
                <p>
                    The first level cache is associated with the Session object, while the second level cache is
                    associated
                    with the hibernate SessionFactory object.
                </p>
                <p>
                    Currently, the cartridge architecture creates one Session instance from the SessionFactory
                    instance for each method that is called at the EJB's services.
                    This means that caching will only occur if a method accesses the same instance more than once.
                    This can be improved by activating the second level cache features provided by Hibernate.
                </p>
                <p>
                    To achieve this task, the cartridge includes support for generating the Hibernate descriptor files
                    will all the possible cache settings included in the hibernate specification.
                </p>
                <p>
                    Additionally, each second level cache manager usually needs its own descriptor file with
                    cache settings specific to this manager.
                    The cartridge provides a template for creating the EhCache Manager descriptor file.
                    For other managers, this template could be overwritten to generate another manager descriptor file.
                </p>
            </subsection>
            <subsection name="EHCache">
                <p>
                    Currently AndroMDA fully supports
                    <a href="http://ehcache.sourceforge.net/">EhCache</a>to provide the second level cache features to
                    the cartridge. When enabled, the cartridge will create caches on queries, the Hibernate descriptor
                    files, and the <code>EhCache.xml</code>file with the specific configuration.
                </p>
            </subsection>
        </section>
        <section name="Working with Second Level Cache">
            <subsection name="Setup">
                <p>
                    The cache settings provide support for customizing the cache configuration. The namespace properties
                    for the cache settings are as following:
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#hibernateCacheProvider">hibernateCacheProvider</a>: Specifies the cache
                        provider implementation that will be used for caching services. Default value is
                        <code>org.hibernate.cache.EhCacheProvider</code>
                    </li>
                    <li>
                        <a href="namespace.html#hibernateQueryCacheFactory">hibernateQueryCacheFactory</a>: Factory class for
                        the caching queries. Default value is
                        <code>org.hibernate.cache.StandardQueryCacheFactory</code>
                    </li>
                </ul>
                <p class="highlight">
                    Currently the cartridge only includes the dependencies for working with EhCache
                </p>
            </subsection>
            <subsection name="Activation">
                <p>
                    To enable cache features on generated files, the following namespace properties should be used.
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#cache">cache</a>: you will need to specify this property in
                        order to let the cartridge know where to output cache configuration files.
                    </li>
                    <li>
                        <a href="namespace.html#hibernateEnableCache">hibernateEnableCache</a>: this property activates
                        the caching features within the cartridge. When enabled, all Hibernate mapping files will
                        be created with the required cache settings, the EhCache descriptor file will be generated, and the
                        Hibernate configuration file property <code>hibernate.cache.use_query_cache</code> 
                        will be set to <code>true</code>.
                    </li>
                    <li>
                        <a href="namespace.html#hibernateEnableAssociationsCache">hibernateEnableAssociationsCache</a>: this
                        property activates the custom cache settings for each association. When enabled,
                        each association ends can contain its own specific configuration.
                        default values for undefined properties are allowed.
                    </li>
                </ul>
            </subsection>
            <subsection name="Entities">
                <p>
                    The cartridge provides a default namespace property for each entity cache settings configuration.
                    These properties will be applied by default (that is,
                    if there is no specific tagged value on the entity that overrides the value). Namespace properties
                    for entities are:
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#hibernateEntityCache">hibernateEntityCache</a>: The cartridge default
                        settings for this property is <code>read-write</code>, other possible values are
                        <code>nonstrict-read-write</code>and
                        <code>read-only</code>
                    </li>
                </ul>
                <p>This property can be overridden using the following tagged value:</p>
                <ul>
                    <li>
                        <a href="profile.html#andromda_hibernate_entity_cache">andromda_hibernate_entity_cache
                        </a>
                    </li>
                </ul>
                <h3>EhCache Configuration for Entities</h3>
                <p>
                    Namespace properties and tagged values are available to customize
                    <a href="http://ehcache.sourceforge.net/documentation/">EhCache Configuration</a>.
                    Namespace properties for EhCache configuration are:
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#ehCacheMaxElementsInMemory">ehCacheMaxElementsInMemory</a>: Defines the
                        default maximum number of objects that will be created in memory
                    </li>
                    <li>
                        <a href="namespace.html#ehCacheEternal">ehCacheEternal</a>: Defines a default value for
                        the eternal parameter.
                    </li>
                    <li>
                        <a href="namespace.html#ehCacheTimeToIdleSeconds">ehCacheTimeToIdleSeconds</a>: Defines the default
                        time to idle for an element before it expires.
                    </li>
                    <li>
                        <a href="namespace.html#ehCacheTimeToLiveSeconds">ehCacheTimeToLiveSeconds</a>: Defines the default
                        time to live for an element before it expires.
                    </li>
                    <li>
                        <a href="namespace.html#ehCacheOverflowToDisk">ehCacheOverflowToDisk</a>: Defines the default
                        value for the overflow to disk property.
                    </li>
                </ul>
                <p>The corresponding tagged values to overwrite the default values are:</p>
                <ul>
                    <li>
                        <a href="profile.html#andromda_hibernate_ehcache_maxElementsInMemory">
                            andromda_hibernate_ehcache_maxElementsInMemory</a>
                    </li>
                    <li>
                        <a href="profile.html#andromda_hibernate_ehcache_eternal">
                            andromda_hibernate_ehcache_eternal</a>
                    </li>
                    <li>
                        <a href="profile.html#andromda_hibernate_ehcache_timeToIdleSeconds">
                            andromda_hibernate_ehcache_timeToIdleSeconds</a>
                    </li>
                    <li>
                        <a href="profile.html#andromda_hibernate_ehcache_timeToLiveSeconds">
                            andromda_hibernate_ehcache_timeToLiveSeconds</a>
                    </li>
                    <li>
                        <a href="profile.html#andromda_hibernate_ehcache_overflowToDisk">
                            andromda_hibernate_ehcache_overflowToDisk</a>
                    </li>
                </ul>
            </subsection>
            <subsection name="Associations">
                <p>
                    Associations caching configuration can be configured individually. The namespace default property
                    can be overridden using the tagged value.
                    Namespace property for EhCache configuration is:
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#hibernateAssociationCache">hibernateAssociationCache</a>: The cartridge
                        default settings for this property is <code>read-write</code>, other possible values are
                        <code>nonstrict-read-write</code>and
                        <code>read-only</code>
                    </li>
                </ul>
                <p>Tagged value:</p>
                <ul>
                    <li>
                        <a href="profile.html#andromda_hibernate_association_cache">
                            andromda_hibernate_association_cache</a>
                    </li>
                </ul>
            </subsection>
            <subsection name="Finder Methods">
                <p>
                    The cartridge provides default namespace properties for activating the cache on one query.
                    When enabled the generated code will contain an additional
                    <code>query.setCacheable(true)</code>line.
                    The namespace property for finder methods is:
                </p>
                <ul>
                    <li>
                        <a href="namespace.html#hibernateUseQueryCache">hibernateUseQueryCache</a>: The cartridge default
                        settings for this property is <code>read-write</code>, other possible values are
                        <code>nonstrict-read-write</code>and
                        <code>read-only</code>
                    </li>
                </ul>
                <p>This default value will be used for all the queries that are not overridden using the tagged value:</p>
                <ul>
                    <li>
                        <a href="profile.html#andromda_hibernate_query_useCache">
                            andromda_hibernate_query_useCache</a>
                    </li>
                </ul>
            </subsection>
        </section>
    </body>
</document>
