// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.hibernate.metafacades;

import org.andromda.cartridges.hibernate.HibernateProfile;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * TODO: Model Documentation for
 * org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
 * MetafacadeLogic implementation for org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute.
 *
 * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
 */
public class HibernateCriteriaAttributeLogicImpl
    extends HibernateCriteriaAttributeLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for HibernateCriteriaAttributeLogicImpl
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
     */
    public HibernateCriteriaAttributeLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * Returns the name of the attribute to be used in the criteria query.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getAttributeName()
     */
    protected String handleGetAttributeName()
    {
        // use the attribute name by default
        String attributeName = getName();

        // if there is a tagged value, use it instead
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_ATTRIBUTE);
        if (value != null)
        {
            attributeName = String.valueOf(value);
        }

        return StringUtils.trimToEmpty(attributeName);
    }

    /**
     * Returns the comparator for the attribute.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getComparator()
     */
    protected String handleGetComparator()
    {
        String comparator = null;
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_COMPARATOR);
        if (value != null)
        {
            comparator = String.valueOf(value);
        }
        return StringUtils.trimToEmpty(comparator);
    }

    /**
     * Indicates whether or not the attribute has a tagged value for the comparator.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isComparatorPresent()
     */
    protected boolean handleIsComparatorPresent()
    {
        return !StringUtils.isBlank(getComparator());
    }

    /**
     * The comparator as a constant expression usable in the template.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getComparatorConstant()
     */
    protected String handleGetComparatorConstant()
    {
        String comparator = getComparator();
        String comparatorConstant = null;

        if (comparator != null)
        {
            if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LIKE.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LIKE_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_INSENSITIVE_LIKE_COMPARATOR.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "INSENSITIVE_LIKE_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER_OR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "GREATER_THAN_OR_EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "GREATER_THAN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS_OR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LESS_THAN_OR_EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LESS_THAN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_IN.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "IN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_NOT_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "NOT_EQUAL_COMPARATOR";
            }
        }
        return comparatorConstant;
    }

    /**
     * Defines whether the underlying attribute on the queried entity may be NULL and should
     * therefore be included in the search.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isNullable()
     */
    protected boolean handleIsNullable()
    {
        boolean result = false;
        String value =
            StringUtils.trimToEmpty((String)findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_NULLABLE));
        if (!StringUtils.isBlank(value))
        {
            result = BooleanUtils.toBoolean(value);
        }
        return result;
    }

    /**
     * Returns the hibernate matchmode constant to use for matching Strings.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getMatchMode()
     */
    protected String handleGetMatchMode()
    {
        String matchMode = null;
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_MATCHMODE);
        if (value != null)
        {
            matchMode = String.valueOf(value);
        }
        return StringUtils.trimToEmpty(matchMode);
    }

    /**
     * Returns the matchmode constant for usage in templates.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getMatchModeConstant()
     */
    protected String handleGetMatchModeConstant()
    {
        String matchMode = getMatchMode();
        String matchModeConstant = null;

        if (matchMode != null)
        {
            if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_ANYWHERE))
            {
                matchModeConstant = "ANYWHERE";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_END))
            {
                matchModeConstant = "END";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_EXACT))
            {
                matchModeConstant = "EXACT";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_START))
            {
                matchModeConstant = "START";
            }
        }
        return matchModeConstant;
    }

    /**
     * Returns <code>true</code> if a matchmode has ben set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isMatchModePresent()
     */
    protected boolean handleIsMatchModePresent()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Returns true if the attribute is used to order the result set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isOrderable()
     */
    protected boolean handleIsOrderable()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * Returns the order direction if it has been set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getOrderDirection()
     */
    protected String handleGetOrderDirection()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * Returns the relevance of the ordering setting. The lower the number, the more relevant it is.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getOrderRelevance()
     */
    protected int handleGetOrderRelevance()
    {
        // TODO put your implementation here.
        return 0;
    }
}