// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.hibernate.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.andromda.cartridges.hibernate.HibernateProfile;
import org.andromda.cartridges.hibernate.HibernateUtils;
import org.andromda.metafacades.uml.AssociationEndFacade;
import org.andromda.metafacades.uml.AttributeFacade;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * TODO: Model Documentation for
 * org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
 * MetafacadeLogic implementation for org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute.
 *
 * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
 */
public class HibernateCriteriaAttributeLogicImpl
    extends HibernateCriteriaAttributeLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for HibernateCriteriaAttributeLogicImpl
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute
     */
    public HibernateCriteriaAttributeLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * Returns the name of the attribute to be used in the criteria query.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getAttributeName()
     */
    protected String handleGetAttributeName()
    {
        // use the attribute name by default
        String attributeName = getName();

        // if there is a tagged value, use it instead
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_ATTRIBUTE);
        if (value != null)
        {
            attributeName = String.valueOf(value);
        }

        return StringUtils.trimToEmpty(attributeName);
    }

    /**
     * Returns the comparator for the attribute.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getComparator()
     */
    protected String handleGetComparator()
    {
        String comparator = null;
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_COMPARATOR);
        if (value != null)
        {
            comparator = String.valueOf(value);
        }
        return StringUtils.trimToEmpty(comparator);
    }

    /**
     * Indicates whether or not the attribute has a tagged value for the comparator.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isComparatorPresent()
     */
    protected boolean handleIsComparatorPresent()
    {
        return !StringUtils.isBlank(getComparator());
    }

    /**
     * The comparator as a constant expression usable in the template.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getComparatorConstant()
     */
    protected String handleGetComparatorConstant()
    {
        String comparator = getComparator();
        String comparatorConstant = null;

        if (comparator != null)
        {
            if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LIKE.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LIKE_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_INSENSITIVE_LIKE_COMPARATOR.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "INSENSITIVE_LIKE_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER_OR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "GREATER_THAN_OR_EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "GREATER_THAN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS_OR_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LESS_THAN_OR_EQUAL_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "LESS_THAN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_IN.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "IN_COMPARATOR";
            }
            else if (HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_NOT_EQUAL.equalsIgnoreCase(comparator))
            {
                comparatorConstant = "NOT_EQUAL_COMPARATOR";
            }
        }
        return comparatorConstant;
    }

    /**
     * Defines whether the underlying attribute on the queried entity may be NULL and should
     * therefore be included in the search.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isNullable()
     */
    protected boolean handleIsNullable()
    {
        boolean result = false;
        String value =
            StringUtils.trimToEmpty((String)findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_NULLABLE));
        if (!StringUtils.isBlank(value))
        {
            result = BooleanUtils.toBoolean(value);
        }
        return result;
    }

    /**
     * Returns the hibernate matchmode constant to use for matching Strings.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getMatchMode()
     */
    protected String handleGetMatchMode()
    {
        String matchMode = null;
        Object value = findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_MATCHMODE);
        if (value != null)
        {
            matchMode = String.valueOf(value);
        }
        return StringUtils.trimToEmpty(matchMode);
    }

    /**
     * Returns the matchmode constant for usage in templates.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getMatchModeConstant()
     */
    protected String handleGetMatchModeConstant()
    {
        String matchMode = getMatchMode();
        String matchModeConstant = null;

        if (matchMode != null)
        {
            if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_ANYWHERE))
            {
                matchModeConstant = "ANYWHERE";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_END))
            {
                matchModeConstant = "END";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_EXACT))
            {
                matchModeConstant = "EXACT";
            }
            else if (matchMode.equalsIgnoreCase(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_START))
            {
                matchModeConstant = "START";
            }
        }
        return matchModeConstant;
    }

    /**
     * Returns <code>true</code> if a matchmode has ben set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isMatchModePresent()
     */
    protected boolean handleIsMatchModePresent()
    {
        return !StringUtils.isBlank(getMatchMode());
    }

    private static final String ORDER_UNSET = "ORDER_UNSET";

    /**
     * Returns true if the attribute is used to order the result set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#isOrderable()
     */
    protected boolean handleIsOrderable()
    {
        return !ORDER_UNSET.equals(getOrderDirection());
    }

    /**
     * Returns the order direction if it has been set.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getOrderDirection()
     */
    protected String handleGetOrderDirection()
    {
        String result = ORDER_UNSET;
        String value =
            StringUtils.trimToEmpty(
                (String)findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_ORDER_DIRECTION));
        if (!StringUtils.isBlank(value))
        {
            if (value.equals(HibernateProfile.TAGGEDVALUEVALUE_ORDER_ASCENDING))
            {
                result = "ORDER_ASC";
            }
            else if (value.equals(HibernateProfile.TAGGEDVALUEVALUE_ORDER_DESCENDING))
            {
                result = "ORDER_DESC";
            }
        }
        return result;
    }

    /**
     * Used for undefined states of the criteria ordering.
     */
    private static final int UNSET = -1;

    /**
     * Returns the relevance of the ordering setting. The lower the number, the more relevant it is.
     * @see org.andromda.cartridges.hibernate.metafacades.HibernateCriteriaAttribute#getOrderRelevance()
     */
    protected int handleGetOrderRelevance()
    {
        int result = UNSET;
        String value =
            StringUtils.trimToEmpty(
                (String)findTaggedValue(HibernateProfile.TAGGEDVALUE_HIBERNATE_CRITERIA_ORDER_RELEVANCE));
        if (!StringUtils.isBlank(value))
        {
            try
            {
                result = Integer.parseInt(value);
            }
            catch (NumberFormatException ignore)
            {
            }
        }
        return result;
    }

    @Override
    protected Collection<String> handleGetPredicates(HibernateEntity entity, String owner) {
        
        List<String> predicates = new ArrayList<>();
        List<String> list = HibernateUtils.getAttributeNameList(this.getAttributeName());

        StringBuilder predicateBuilder = new StringBuilder();
        predicateBuilder.append("predicate.add(");
        
        StringBuilder builder = new StringBuilder();

        boolean insentive = false;

        if (this.isComparatorPresent() && this.getComparator()
            .equals(HibernateProfile.TAGGEDVALUEVALUE_INSENSITIVE_LIKE_COMPARATOR)) {

            insentive = true;
        }

        String type = this.getType().getFullyQualifiedName();
        String root = "root.get(";
        
        if(this.getAttributeName().contains(".")) {
            String[] components = this.getAttributeName().split("\\.");
            root = components[0] + "Join.get(\"" + components[1] + "\"), ";
        } else {
            root = root + "\"" + this.getAttributeName() + "\"), ";
        }
        
        String comparator = "builder.equal(";
        if (this.isComparatorPresent()) {

            String tmp = this.getComparator();

            if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER)) {
                comparator = " > ";
                if(HibernateUtils.isNumber(this.getType())) {
                    comparator = "builder.gt(";
                } else {
                    comparator = "builder.greaterThan(";
                }
            } else if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_GREATER_OR_EQUAL)) {
                comparator = " >= ";
                if(HibernateUtils.isNumber(this.getType())) {
                    comparator = "builder.ge(";
                } else {
                    comparator = "builder.greaterThanOrEqualTo(";
                }
            } else if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_IN)) {
                //comparator = " IN ";
            } else if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS)) {

                if(HibernateUtils.isNumber(this.getType())) {
                    comparator = "builder.lt(";
                } else {
                    comparator = "builder.lessThan(";
                }

                comparator = "";
            } else if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LESS_OR_EQUAL)) {

                if(HibernateUtils.isNumber(this.getType())) {
                    comparator = "builder.le(";
                } else {
                    comparator = "builder.lessThanOrEqualTo(";
                }
                
            } else if (tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_COMPARATOR_LIKE) || 
                    tmp.equals(HibernateProfile.TAGGEDVALUEVALUE_INSENSITIVE_LIKE_COMPARATOR)) {
                comparator = "builder.like(";
            }
        }
        builder.append(comparator);
        builder.append(root);
        
        
        String q = this.getGetterName() + "()";
                
        if(!StringUtils.isBlank(owner)) {
            q = owner + "." + q;
        }

        if (this.isMatchModePresent()) {
            
            String mode = this.getMatchMode();

            if (mode.equals(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_END)) {
                        
                q = "'%' + " + q;

            } else if (mode.equals(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_ANYWHERE)) {
                        
                q = "'%' + " + q + " + '%'";
            // } else if (criteriaAttribute.getMatchModeConstant()
            //         .equals(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_EXACT)) {
            //     builder.append(":");
            //     builder.append(criteriaAttribute.getName());
            } else if(mode.equals(HibernateProfile.TAGGEDVALUEVALUE_MATCHMODE_START)){
                        
                q = q + " + '%'";
            }
        }

        if(insentive) {
            //q = "builder.lower(" + q + ".toLowerCase())" ;
        }

        builder.append(q);

        builder.append(")");
        predicateBuilder.append("predicate.add(");
        System.out.println("==============> " + builder.toString());
        predicateBuilder.append(builder.toString()).append(")");

        predicates.add(builder.toString());

        return predicates;
    }

    @Override
    protected boolean handleIsJoinAttribute(HibernateEntity entity) {
        String name = this.getAttributeName();
        
        if(!name.contains(".")) {
            return false;
        }
        
        String joinAttribute = name.substring(0, name.indexOf("."));
                
        for (AssociationEndFacade associationEnd : entity.getAssociationEnds()) {
            AssociationEndFacade target = associationEnd.getOtherEnd();
            if(target.getName().equals(joinAttribute)) {
                return true;
            }
        }
        
        return false;
    }

    @Override
    protected String handleGetJoinAttribute(HibernateEntity entity) {
        String name = this.getAttributeName();
        
        if(!name.contains(".")) {
            return null;
        }
        
        String joinAttributeName = "";
        
        String joinAttribute = name.substring(0, name.indexOf("."));
        for (AssociationEndFacade associationEnd : entity.getAssociationEnds()) {
            AssociationEndFacade target = associationEnd.getOtherEnd();
            if(target.getName().equals(joinAttribute)) {
                return joinAttribute;
            }
        }
        
        return null;
    }

}