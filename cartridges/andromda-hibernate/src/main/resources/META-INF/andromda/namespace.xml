<?xml version="1.0" encoding="UTF-8"?>

<namespace name="hibernate">
    <components>
        <component name="cartridge">
            <path>META-INF/andromda/cartridge.xml</path>
        </component>
        <component name="metafacades">
            <path>META-INF/andromda/metafacades.xml</path>
        </component>
        <component name="profile">
            <path>META-INF/andromda/profile.xml</path>
        </component>
    </components>
    <properties>
        <!-- namespace-propertyGroup merge-point -->
        <propertyGroup name="Outlets">
            <documentation>
                Defines the locations to which output is generated.
            </documentation>
            <property name="entities">
                <documentation>
                    The directory to which hibernate entities are generated.  Please <strong>NOTE</strong>
                    that the entity implementation classes will also be generated to this location when
                    <strong>no operations</strong> are present on the entity with <em>instance scope</em>.
                </documentation>
            </property>
            <property name="entity-impls">
                <documentation>
                    The location to which hibernate entity implementation files are generated. Please <strong>NOTE</strong>
                    that the entity implementation classes will be generated to the <em>entities</em> outlet when
                    <strong>no operations</strong> are present on the entity with <em>instance scope</em>.
                </documentation>
            </property>
            <property name="entity-mappings">
                <documentation>
                    The location to which hibernate entity mapping files are generated, these are the ones
                    with the <code>.hbm.xml</code> extension.
                </documentation>
            </property>
            <property name="user-types">
                <documentation>
                    The location to which hibernate enumeration user-types are generated. This includes
                    String CLOB, BLOB and enumeration user-types.
                </documentation>
            </property>
            <property name="session-beans" required="false">
                <documentation>
                    The directory to which Session EJB service wrappers are generated.  If this
                    property is not specified, Session EJB service wrappers will not be generated.
                </documentation>
            </property>
            <property name="session-impls" required="false">
                <documentation>
                    The directory to which Session Bean implementation files are generated.
                </documentation>
            </property>
            <property name="configuration" required="false">
                <documentation>
                    The directory to which the hibernate.cfg.xml file is generated.
                </documentation>
            </property>
            <property name="test-configuration" required="false">
                <documentation>
                    The location where manual session bean and entity test resources
                    such as persistence.xml and log4j.xml are generated.
                    These will not be regenerated and may require user intervention.
                </documentation>
            </property>
            <property name="cache" required="false">
                <documentation>
                    The directory to which the ehcache.xml file is generated.
                </documentation>
            </property>
            <property name="daos">
                <documentation>
                    The location to which Hibernate DAOs, and any support classes
                    are generated.
                    <p>
                        Please <strong>NOTE</strong>
                        that the dao implementation classes will also be generated to this location when
                        <strong>no operations</strong> are present on the entity with <em>classifier scope</em>.
                    </p>
                </documentation>
            </property>
            <property name="dao-impls">
                <documentation>
                    The location to which Hibernate DAO implementation
                    classes will be generated (if there are any classifier scoped business
                    operations modeled on any entity).
                    <p>
                        Please <strong>NOTE</strong>
                        that the dao implementation classes will be generated to the <em>daos</em> outlet when
                        <strong>no operations</strong> are present on the entity with <em>classifier scope</em>.
                    </p>
                </documentation>
            </property>
            <property name="java-refs">
                <documentation>
                    The location containing java Impl classes that would have been
                    generated but are not overwritten. Use these to compare and merge with the
                    existing Impl classes when reconciling model changes. These will be regenerated
                    every time.
                </documentation>
            </property>
            <property name="commons">
                <documentation>
                    The directory to which common classes
                    for session beans, entity POJOs or MDB
                    are generated
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Entity Properties">
            <property name="entityViewType">
                <default>local</default>
                <documentation>
                    The default view type accessibility for an entity POJO bean.
                    <ul>
                        Permitted values are:
                        <li>local</li>
                        <li>remote</li>
                        <li>both</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultCascade">
                <default>NONE</default>
                <documentation>
                    The value of the
                    <code>CascadeType</code>
                    annotation of the entity association. Possible
                    values are:
                    <ul>
                        <li>ALL</li>
                        <li>PERSIST</li>
                        <li>MERGE</li>
                        <li>REMOVE</li>
                        <li>REFRESH</li>
                        <li>NONE if one does not exist</li>
                    </ul>
                    It is possible to comma separate multiple
                    cascade properties.
                </documentation>
            </property>
            <property name="entityCompositeCascade" required="false">
                <documentation>
                    Indicates how a UML composition should be
                    interpreted to determine cascadable operations that
                    are propagated to the associated entity.
                    <ul>
                        <li>
                            If undefined, the cascade attribute is
                            computed by AndroMDA. If default cascade is
                            <em>all</em>
                            , then cascade is
                            <em>all</em>
                            otherwise cascade is
                            <em>REMOVE</em>
                            .
                        </li>
                        <li>
                            If this property is defined, its value is
                            generated at each occurrence of a UML
                            composition as the inverse side is not
                            marked with a cascade annotation element
                            which indicates no cascade propagation.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityAggregationCascade" required="false">
                <documentation>
                    Indicates how a UML aggregation should be interpreted
                    to determine cascadable operations that are
                    propagated to the associated entity.
                    <ul>
                        <li>
                            If undefined, aggregation is not
                            interpreted as a cascade value.
                        </li>
                        <li>
                            If the property is defined, its value is
                            generated at each occurrence of a UML
                            aggregation ad the inverse side is not
                            marked with a cascade annotation element
                            which indicates no cascade propogation.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultGeneratorType">
                <default>AUTO</default>
                <documentation>
                    Default entity identifier primary key generator type
                    set to AUTO unless specified using
                    andromda_persistence_column_generatorType tagged
                    value.
                </documentation>
            </property>
            <property name="entityDefaultGeneratorInitialValue">
                <default>1</default>
                <documentation>
                    Default generator initial value used when allocating
                    id numbers from the generator.
                </documentation>
            </property>
            <property name="entityDefaultGeneratorAllocationSize">
                <default>1</default>
                <documentation>
                    Default generator amount to increment by when
                    allocating id number from the generator.
                </documentation>
            </property>
            <property name="entityInheritanceStrategy">
                <default>SINGLE_TABLE</default>
                <documentation>
                    Defines the entity inheritance strategy used for the
                    entity class hierarchy (unless overridden on an
                    entity level by the
                    <a
                        href="profile.html#andromda._persistence_inheritance">
                        andromda_persistence_inheritance
                    </a>
                    tagged value, can be the following possible values:
                    <ul>
                        <li>
                            SINGLE_TABLE - A single table per class hierarchy. One table will have all
                            properties of every class in the hierarchy.
                        </li>
                        <li>
                            TABLE_PER_CLASS - A table per concrete class in the
                            hierarchy. Each class will have a table dedicated to it, with all of its
                            properties and the properties of its superclass mapped to this table.
                        </li>
                        <li>
                            JOINED - A table per subclass. Each class will have its own table. Each
                            table will have only the properties that are defined in that particular class.
                            These tables will not have properties of any superclass or subclass.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDiscriminatorType">
                <default>STRING</default>
                <documentation>
                    The value of the
                    <code>discriminatorType</code>
                    element for the Inheritance annotation of the
                    entity. Possible values are:
                    <ul>
                        <li>STRING</li>
                        <li>CHAR</li>
                        <li>INTEGER</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDiscriminatorColumnName">
                <default>TYPE</default>
                <documentation>
                    The DiscriminatorColumn annotation defines the
                    discriminator column for the SINGLE_TABLE and JOINED
                    mapping inheritance strategies. The name element
                    defines the name of the column to be used for the
                    discriminator. It will default to
                    <code>TYPE</code>
                    if it is required and not specified..
                </documentation>
            </property>
            <property name="entityGenericFinders">
                <default>true</default>
                <documentation>
                    Specifies whether to include the generic finder
                    property.  Generic finders in the entity bean include
                    findByPrimaryKey and findAll.
                    Permitted values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityDefaultEnumLiteralColumnLength">
                <default>20</default>
                <documentation>
                    The default column length specified for the
                    storage of a string based enumeration literal.
                </documentation>
            </property>
            <property name="entityDefaultTemporalType">
                <default>TIMESTAMP</default>
                <documentation>
                    Specifies that the persistence property should
                    be persisted as a temporal type.
                    This is only specified on fields of type
                    <code>java.util.Date</code> or
                    <code>java.util.Calendar</code>.
                    Possible values are:
                    <ul>
                        <li>DATE</li>
                        <li>TIME</li>
                        <li>TIMESTAMP</li>
                    </ul>
                </documentation>
            </property>
            <property name="entityHibernateValidations">
                <default>true</default>
                <documentation>
                    Generate hibernate bean validations on the Entity, for
                    NotNull, Size, Pattern according to JSR303 and JEE6.
                    See http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/#table-spec-constraints
                    default = true.
                </documentation>
            </property>
            <property name="entityVOTransformations">
                <default>false</default>
                <documentation>
                    Generate Entity Domain to VO transformations and mappings automatically.
                    No longer needed for JPA since the domain Entity acts as a ValueObject.
                    This allows strongly-typed queries and results. Domain classes can be used as
                    VOs in the service and UI layers, especially if the DAO handles all database operations.
                    Default = false.
                </documentation>
            </property>
            <property name="entityCmpEqHash">
                <default>true</default>
                <documentation>
                    Generate Entity compareTo, equals, and hashCode methods. The only reason to turn this off
                    is if the Entity inherits from a custom framework class that has the same methods as final
                    and uses its own ancestor implementation for these methods.
                    default = true.
                </documentation>
            </property>
            <property name="entityFindersOnUniqueProperties">
                <default>true</default>
                <documentation>
                    Generate Entity findByX methods, returning a single Domain instance, for all unique properties automatically.
                    UML2 only, since UML14 cannot mark attributes or associations as Unique,
                    they all become unique when migrated to UML2.
                    default = true.
                </documentation>
            </property>
            <property name="daoNamedQueries">
                <default>true</default>
                <documentation>
                    Generate DAO named queries, where a strongly-typed result domain object is returned methods.
                    Only JPA2 supports this, avoiding compiler warnings from class cast.
                    default = true.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="DAO Properties">
            <property name="daoType">
                <default>ejb3</default>
                <documentation>
                    The output type for classes which use EntityManager. Default is ejb3.
                    Spring will create JpaTemplate DAO classes. Use 'none' if you have your
                    own framework which creates and uses and tests EntityManager, and you only want to
                    generate the Entity and Embeddable classes with andromda (no unit tests).
                    Possible choices are:
                    <ul>
                        <li>ejb3</li>
                        <li>spring</li>
                        <li>custom</li>
                        <li>none</li>
                    </ul>
                </documentation>
            </property>
            <property name="daoInheritanceEnabled">
                <default>false</default>
                <documentation>
                    Whether or not the DAOs should make up an inheritance tree in
                    the same way as their respective entities. This is disabled
                    by default but you might want to enable it if you prefer to have
                    top-level DAO operations visible in child DAO classes. The EJB3
                    cartridge uses JDK5 generics, further enahanced by enabling the
                    <code>enableTemplating</code> namespace property.
                </documentation>
            </property>
            <property name="enableDaoPropertiesCreateMethod">
                <default>true</default>
                <documentation>
                    Whether or not the create methods on the DAOs taking properties
                    from the entity shall be generated.
                </documentation>
            </property>
            <property name="daoPackageNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing the package for
                    the dao class. By default, the same package as the entities.
                    <em>{0}</em> is used to represent the entity name in the model.
                </documentation>
            </property>
            <property name="daoNamePattern">
                <default>{0}Dao</default>
                <documentation>
                    The pattern to use when constructing the DAO name. <em>{0}</em>
                    is used to represent the entity name in the model, so if you
                    specified a value of <code>{0}Dao</code> all
                    the entities generated would have a suffix of "Dao".
                </documentation>
            </property>
            <property name="daoBaseNamePattern">
                <default>{0}DaoBase</default>
                <documentation>
                    The pattern to use when constructing the base DAO's name.
                    <em>{0}</em> is used to represent the entity name
                    in the model, so if you specified a value of
                    <code>{0}DaoBase</code> all the entities generated
                    would have a suffix of "DaoBase".
                </documentation>
            </property>
            <property name="daoImplementationNamePattern">
                <default>{0}DaoImpl</default>
                <documentation>
                    The pattern to use when constructing the DAO's
                    implementation name. <em>{0}</em> is used to represent
                    the entity name in the model, so if you specified a value of
                    <code>{0}DaoImpl</code> all the entities generated
                    would have a suffix of "DaoImpl".
                </documentation>
            </property>
            <property name="daoDefaultExceptionNamePattern">
                <default>{0}DaoException</default>
                <documentation>
                    The pattern to use when constructing the DAO
                    default exception name.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Caching">
            <property name="hibernateEnableCache">
                <default>false</default>
                <documentation>
                    Enable/disable hibernate's second level cache features for the cartridge.
                </documentation>
            </property>
            <property name="hibernateEnableDistributedCache">
                <default>false</default>
                <documentation>
                    If this property is set to true, distributed caching will be enabled. To enable distributed caching
                    for an entity, you must set this property to true AND tag the entity using the tagged value
                    <a href="profile.html#andromda_hibernate_entity_cache_distributed">andromda_hibernate_entity_cache_distributed</a>
                    tagged value.
                    <ul>
                       <li>true</li>
                       <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateDistributedCacheMulticastPort">
                <default>4446</default>
                <documentation>
                    The multicast port to be used for multicast group communication when using a distributed cache
                    provider (see <a href="#hibernateEnableDistributedCache">hibernateEnableDistributedCache</a>).
                </documentation>
            </property>
            <property name="hibernateDistributedCacheMulticastAddress">
                <default>230.0.0.1</default>
                <documentation>
                    The address to be used for multicast group communication when using a distributed cache provider
                    (see <a href="#hibernateEnableDistributedCache">hibernateEnableDistributedCache</a>).
                </documentation>
            </property>
            <property name="hibernateDistributedCacheSocketTimeout">
                <default>2000</default>
                <documentation>
                    The number of seconds client sockets will wait when sending messages to this listener until
                    they give up.
                </documentation>
            </property>
            <property name="hibernateEntityCache">
                <default>read-write</default>
                <documentation>
                    Defines the default strategy for Entities caching. Can be overwritten using the corresponding
                    tagged value. Possible values are:
                    <ul>
                       <li>read-write</li>
                       <li>nonstrict-read-write</li>
                       <li>read-only</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateAssociationCache">
                <default>read-write</default>
                <documentation>
                    Defines the default strategy for associations between Entities caching. Can be overwritten with the corresponding tagged value. Possible values are:
                    <ul>
                       <li>read-write</li>
                       <li>nonstrict-read-write</li>
                       <li>read-only</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateUseQueryCache">
                <default>false</default>
                <documentation>
                    The default query cache usage.
                    Can be overwritten using
                    <a href="profile.html#andromda_hibernate_query_useCache">andromda_hibernate_query_useCache</a>.
                    Possible values are:
                    <ul>
                       <li>true</li>
                       <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateEnableAssociationsCache">
                <default>false</default>
                <documentation>
                    Enable/disable Hibernate's second level cache feature for entity associations.
                    Please <strong>NOTE</strong> that hibernateEnableCache should also be enabled when
                    specifying this property.
                </documentation>
            </property>
            <property name="hibernateEhCacheDiskStore">
                <default>java.io.tmpdir</default>
                <documentation>
                    Defines the path to the directory where cache files will be created
                </documentation>
            </property>
            <property name="hibernateCacheProvider">
                <default>org.hibernate.cache.EhCacheProvider</default>
                <documentation>
                    Defines Hibernate Cache Provider implementation class.
                    Possible values for Hibernate2 are:
                    <ul>
                       <li>net.sf.hibernate.cache.EhCacheProvider</li>
                       <li>net.sf.hibernate.cache.HashtableCacheProvider</li>
                       <li>net.sf.hibernate.cache.JCSCacheProvider</li>
                       <li>net.sf.hibernate.cache.SwarmCacheProvider</li>
                       <li>net.sf.hibernate.cache.TreeCacheProvider</li>
                       <li>net.sf.hibernate.cache.OSCacheProvider</li>
                    </ul>
                    Possible values for Hibernate3 are:
                    <ul>
                       <li>org.hibernate.cache.EhCacheProvider</li>
                       <li>org.hibernate.cache.HashtableCacheProvider</li>
                       <li>org.hibernate.cache.JCSCacheProvider</li>
                       <li>org.hibernate.cache.SwarmCacheProvider</li>
                       <li>org.hibernate.cache.TreeCacheProvider</li>
                       <li>org.hibernate.cache.OSCacheProvider</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateQueryCacheFactory">
                <default>org.hibernate.cache.StandardQueryCacheFactory</default>
                <documentation>
                    Defines Hibernate Query Cache Factory implementation class. Possible value for Hibernate2 is:
                    <ul>
                       <li>net.sf.hibernate.cache.StandardQueryCacheFactory</li>
                    </ul>
                    Possible value for Hibernate3 is:
                    <ul>
                       <li>org.hibernate.cache.StandardQueryCacheFactory</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateConnectionReleaseMode" required="false">
                <documentation>
                    Specify when Hibernate should release JDBC connections. By default, a JDBC connection
                    is held until the session is explicitly closed or disconnected. For an application server JTA datasource,
                    you should use after_statement to aggressively release connections after every JDBC call.
                    For a non-JTA connection, it often makes sense to release the connection at the end of each
                    transaction, by using after_transaction. auto will choose after_statement for the JTA and
                    CMT transaction strategies and after_transaction for the JDBC transaction strategy.
                    <ul>
                        Valid values are:
                        <li>on_close</li> - default
                        <li>after_transaction</li>
                        <li>after_statement</li>
                        <li>auto</li>
                    </ul>
                </documentation>
            </property>
            <property name="ehCacheMaxElementsInMemory">
                <default>10000</default>
                <documentation>
                    Defines the default maximum number of objects that will be created in memory.
                </documentation>
            </property>
            <property name="ehCacheEternal">
                <default>false</default>
                <documentation>
                    Defines a default value for the eternal parameter.
                </documentation>
            </property>
            <property name="ehCacheTimeToIdleSeconds">
                <default>120</default>
                <documentation>
                    Defines the default time to idle for an element before it expires.
                </documentation>
            </property>
            <property name="ehCacheTimeToLiveSeconds">
                <default>120</default>
                <documentation>
                    Defines the default time to live for an element before it expires.
                </documentation>
            </property>
            <property name="ehCacheOverflowToDisk">
                <default>true</default>
                <documentation>
                    Defines the default value for the overflow to disk property.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="JDBC">
            <property name="driver" required="false">
                <documentation>
                    JDBC Driver to make database connection, this should be a fully qualified Java class name.
                </documentation>
            </property>
            <property name="username" required="false">
                <documentation>
                    The database user login name.
                </documentation>
            </property>
            <property name="password" required="false">
                <documentation>
                    The database user password.
                </documentation>
            </property>
            <property name="connectionUrl" required="false">
                <documentation>
                    URL for the JDBC Driver to make the connection to the database.
                </documentation>
            </property>
            <property name="testDialect" required="false">
                <documentation>
                    JDBC Test Dialect for hibernate. For H2 we can use Oracle or DB2 in emulation mode set in connection URL
                </documentation>
            </property>
            <property name="testDriver" required="false">
                <documentation>
                    JDBC Driver to make test database connection, this should be a fully qualified Java class name.
                </documentation>
            </property>
            <property name="testUsername" required="false">
                <documentation>
                    The test database user login name.
                </documentation>
            </property>
            <property name="testPassword" required="false">
                <documentation>
                    The test database user password.
                </documentation>
            </property>
            <property name="testConnectionUrl" required="false">
                <documentation>
                    URL for the JDBC Driver to make the connection to the test database.
                </documentation>
            </property>
            <property name="dataSource" required="false">
                <documentation>
                    JNDI name of data source to use. (would be used instead
                    of the connection properties, driver, username, password, etc).
                </documentation>
            </property>
            <property name="hibernateShowSql" required="false">
                <documentation>
                    Whether or not to log SQL statements.
                </documentation>
            </property>
            <property name="hibernateDialect" required="false">
                <documentation>
                    SQL dialect of the database.
                    <ul>
                        <li>org.hibernate.dialect.Cache71Dialect</li>
                        <li>org.hibernate.dialect.DataDirectOracle9Dialect</li>
                        <li>org.hibernate.dialect.DB2390Dialect</li>
                        <li>org.hibernate.dialect.DB2400Dialect</li>
                        <li>org.hibernate.dialect.DB2Dialect</li>
                        <li>org.hibernate.dialect.DerbyDialect</li>
                        <li>org.hibernate.dialect.FirebirdDialect</li>
                        <li>org.hibernate.dialect.FrontbaseDialect</li>
                        <li>org.hibernate.dialect.H2Dialect</li>
                        <li>org.hibernate.dialect.HSQLDialect</li>
                        <li>org.hibernate.dialect.InformixDialect</li>
                        <li>org.hibernate.dialect.IngresDialect</li>
                        <li>org.hibernate.dialect.IngresDialect9</li>
                        <li>org.hibernate.dialect.IngresDialect10</li>
                        <li>org.hibernate.dialect.InterbaseDialect</li>
                        <li>org.hibernate.dialect.JDataStoreDialect</li>
                        <li>org.hibernate.dialect.MckoiDialect</li>
                        <li>org.hibernate.dialect.MimerSQLDialect</li>
                        <li>org.hibernate.dialect.MySQL5Dialect</li>
                        <li>org.hibernate.dialect.MySQL5InnoDBDialect</li>
                        <li>org.hibernate.dialect.MySQLDialect</li>
                        <li>org.hibernate.dialect.MySQLInnoDBDialect</li>
                        <li>org.hibernate.dialect.MySQLMyISAMDialect</li>
                        <li>org.hibernate.dialect.OracleDialect</li>
                        <li>org.hibernate.dialect.Oracle8iDialect</li>
                        <li>org.hibernate.dialect.Oracle9Dialect</li>
                        <li>org.hibernate.dialect.Oracle9iDialect</li>
                        <li>org.hibernate.dialect.Oracle10gDialect</li>
                        <li>org.hibernate.dialect.PointbaseDialect</li>
                        <li>org.hibernate.dialect.PostgresPlusDialect</li>
                        <li>org.hibernate.dialect.PostgreSQLDialect</li>
                        <li>org.hibernate.dialect.ProgressDialect</li>
                        <li>org.hibernate.dialect.RDMSOS2200Dialect</li>
                        <li>org.hibernate.dialect.SAPDBDialect</li>
                        <li>org.hibernate.dialect.SQLServer2008Dialect</li>
                        <li>org.hibernate.dialect.SQLServerDialect</li>
                        <li>org.hibernate.dialect.SybaseDialect</li>
                        <li>org.hibernate.dialect.Sybase11Dialect</li>
                        <li>org.hibernate.dialect.SybaseAnywhereDialect</li>
                        <li>org.hibernate.dialect.SybaseASE15Dialect</li>
                        <li>org.hibernate.dialect.TeradataDialect</li>
                        <li>org.hibernate.dialect.TimesTenDialect</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateMaxFetchDepth" required="false">
                <documentation>
                    Sets a maximum "depth" for the outer join fetch tree. Recommended values between 0 and 3
                </documentation>
            </property>
            <property name="hibernateJdbcFetchSize" required="false">
                <documentation>
                    A non-zero value determines the JDBC fetch size
                </documentation>
            </property>
            <property name="hibernateJdbcBatchSize" required="false">
                <documentation>
                    A nonzero value enables use of JDBC2 batch updates by Hibernate.
                    Recommended values between 5 and 30
                </documentation>
            </property>
            <property name="hibernateJdbcUseScrollableResultSet" required="false">
                <documentation>
                    Whether or not to enable use of JDBC2 scrollable resultsets by Hibernate.
                    This property is only necessary when using user supplied connections.
                    Hibernate uses connection metadata otherwise.
                </documentation>
            </property>
            <property name="hibernateJdbcUseStreamsForBinary" required="false">
                <documentation>
                    Whether or not to use streams when writing / reading binary or serializable types to/from JDBC.
                </documentation>
            </property>
            <property name="hibernateHbm2DDLAuto" required="false">
                <documentation>
                    Automatically export schema DDL to the database when the SessionFactory
                    is created. With create-drop, the database schema will be dropped when
                    the SessionFactory is closed explicitly. Permitted values are:
                    <ol>
                        <li>update</li>
                        <li>create</li>
                        <li>create-drop</li>
                        <li>validate (since Hibernate 3)</li>
                    </ol>
                </documentation>
            </property>
            <property name="hibernateQuerySubstitutions" required="false">
                <documentation>
                    Allows you to define new Hibernate query tokens. For example:
                    giving this a value of <em>true=1, false=0</em>
                    would cause the tokens true and false to be translated to integer
                    literals in the generated SQL.
                </documentation>
            </property>
            <property name="sequenceIdentifierSuffix">
                <default>_SEQ</default>
                <documentation>
                    The suffix to use for identifier sequences.
                </documentation>
            </property>
            <property name="hibernateUseOuterJoin" required="false">
                <documentation>
                    Whether or not to use outer join.
                </documentation>
            </property>
            <property name="entityManagerName" required="false">
                <documentation>
                    The name assigned to the entity manager.  If no name
                    is specified, the name of the containing persistence
                    archive without the .par extension is used.
                </documentation>
            </property>
            <property name="entityManagerJTADataSource" required="false">
                <default>java:/DefaultDS</default>
                <documentation>
                    Specifies the global JNDI name of the JTA data source.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Name Patterns">
            <property name="entityNamePattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when constructing an entity name.
                    <em>{0}</em> is used to represent the entity name
                    in the model, so if you specified a value of
                    <code>{0}Entity</code> all the entities generated
                    would have a suffix of "Entity".
                </documentation>
            </property>
            <property name="implementationOperationNamePattern">
                <default>handle{0}</default>
                <documentation>
                    The pattern used to the create the implementation operation name
                    for both session and entity bean operations.
                    (i.e. the operations that actually perform the handling of the logic),
                    where <em>{0}</em> represents the operation name.
                </documentation>
            </property>
            <property name="entityImplementationNamePattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern to use when constructing the entity implementation name.
                </documentation>
            </property>
            <property name="embeddedValueImplementationNamePattern">
                <default>{0}Impl</default>
                <documentation>
                    The pattern to use when constructing an embedded value implementation name.
                </documentation>
            </property>
            <property name="enumerationNamePattern">
                <default>{0}Enum</default>
                <documentation>
                    The pattern to use when constructing hibernate enumerations.
                </documentation>
            </property>
            <property name="ejbJndiNamePrefix" required="false">
                <documentation>
                    The prefix to give to the Session EJB JNDI names (this allows
                    the same Session EJB to be deployed multiple times in the same container)
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Transactions">
            <property name="serviceOperationTransactionType">
                <default>Required</default>
                <documentation>
                    The default value to use for service operations transaction types.
                    <ul>
                        Permitted values are:
                        <li>NotSupported</li>
                        <li>Supports</li>
                        <li>Required</li>
                        <li>RequiresNew</li>
                        <li>Mandatory</li>
                        <li>Never</li>
                    </ul>
                    <strong>NOTE:</strong> Can be overridden on a per entity basis with the
                    <a href="profile.html#andromda_ejb_transaction_type">andromda_ejb_transaction_type</a>
                    tagged value.
                </documentation>
            </property>
            <property name="hibernateTransactionFactoryClass">
                <default>org.hibernate.transaction.JTATransactionFactory</default>
                <documentation>
                    The name of the hibernate transaction factory class to use.
                </documentation>
            </property>
            <property name="hibernateTransactionManagerStrategy" required="false">
                <documentation>
                    Strategy for obtaining the JTA TransactionManager.
                </documentation>
            </property>
            <property name="hibernateUserTransactionName">
                <default>UserTransaction</default>
                <documentation>
                    The JNDI name of the JTA UserTransaction object.
                </documentation>
            </property>
            <property name="hibernateTransactionManagerLookup" required="false">
                <documentation>
                    The fully qualified class name of the Hibernate TransactionFactory implementation.
                </documentation>
            </property>
            <property name="hibernateTransactionManager" required="false">
                <documentation>
                    The fully qualified class name of the Hibernate Transaction Manager implementation.
                </documentation>
            </property>
            <property name="hibernatePersistenceProvider" required="false">
                <default>org.hibernate.jpa.HibernatePersistenceProvider</default>
                <documentation>
                    The fully qualified class name of the Hibernate Transaction Manager implementation.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Other">
            <property name="persistenceProviderExtensions">
                <default>none</default>
                <documentation>
                    Determines whether the default persistence provider
                    extensions such as annotations should also be rendered.
                    By default, this is disabled.
                    To enable caching:
                    this must be set to <b>hibernate</b> such that
                    the Hibernate caching annotations are rendered.
                    To enable JBoss Seam:
                    this must be set to <b>hibernate</b> such that
                    the hibernate validator annotations are
                    rendered.
                    To enable Hibernate Criteria Query, this must
                    be set to <b>hibernate</b>.
                    Possible values are:
                    <ul>
                        <li>none</li>
                        <li>hibernate</li>
                    </ul>
                </documentation>
            </property>
            <property name="deploymentPlatform" required="false">
                <default>jboss7</default>
                <documentation>
                    The default container deployment platform name and version.
                    Used when specifying specific annotations and dependencies and tests
                    for different persistence containers.
                    Possible values are:
                    <ul>
                      <li>jboss7</li>
                      <li>jboss6</li>
                      <li>jboss51</li>
                      <li>jboss5</li>
                      <li>jboss42</li>
                      <li>jboss4</li>
                      <li>jboss3</li>
                      <li>was8</li>
                      <li>was7</li>
                      <li>was61</li>
                      <li>wasce2</li>
                      <li>glassfish6</li>
                      <li>glassfish5</li>
                      <li>glassfish4</li>
                      <li>glassfish3</li>
                      <li>glassfish2</li>
                      <li>weblogic11</li>
                      <li>weblogic10</li>
                      <li>weblogic9</li>
                      <li>weblogic8</li>
                      <li>geronimo</li>
                      <li>jonas5</li>
                      <li>oracleas</li>
                      <li>resin3</li>
                      <li>resin4</li>
                      <li>sun8</li>
                    </ul>
                </documentation>
            </property>
            <property name="persistenceContainerName">
                <default>jboss</default>
                <documentation>
                    The default container deployment platform name and version.
                    Used when specifying specific annotations and dependencies and tests
                    for different persistence containers.
                    Possible values are:
                    <ul>
                      <li>jboss7</li>
                      <li>jboss6</li>
                      <li>jboss51</li>
                      <li>jboss5</li>
                      <li>jboss42</li>
                      <li>jboss4</li>
                      <li>jboss3</li>
                      <li>was8</li>
                      <li>was7</li>
                      <li>was61</li>
                      <li>wasce2</li>
                      <li>glassfish6</li>
                      <li>glassfish5</li>
                      <li>glassfish4</li>
                      <li>glassfish3</li>
                      <li>glassfish2</li>
                      <li>weblogic11</li>
                      <li>weblogic10</li>
                      <li>weblogic9</li>
                      <li>weblogic8</li>
                      <li>geronimo</li>
                      <li>jonas5</li>
                      <li>oracleas</li>
                      <li>resin3</li>
                      <li>resin4</li>
                      <li>sun8</li>
                    </ul>
                </documentation>
            </property>
            <property name="persistenceContextUnitName" required="false">
                <documentation>
                    Specifies the default persistence context
                    unit name associated with the default Entity
                    Manager.
                </documentation>
            </property>
            <property name="javaVersion">
                <default>1.6</default>
                <documentation>
                    Determines if some annotations or JDK-specific features are output such as @Override compareTo().
                    v1.5 give compile error on @Override on methods that override interface methods.
                    If 1.4, templating and generics should be turned off. Should be set by property java.version in pom.xml
                    which is also used by the maven-compiler-plugin. Allowed values=1.4,1.5,1.6. Default=1.6.
                </documentation>
            </property>
            <property name="hibernateVersion">
                <default>5</default>
                <documentation>
                    The version of Hibernate to use when generating.
                    Allowable values are:
                    <ul>
                        <li>2 - Hibernate 2.x</li>
                        <li>3 - Hibernate 3.x</li>
                        <li>4 - Hibernate 4.x</li>
                        <li>5 - Hibernate 5.x</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateNamespace">
                <default>javax</default>
                <documentation>
                    The namespace of Hibernate to use when generating.
                    Allowable values are:
                    <ul>
                        <li>javax - Hibernate javax.* Namespace</li>
                        <li>jakarta - Hibernate jakarta.* Namespace</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateEntityAnnotations" required="false">
                <default>true</default>
                <documentation>
                    Set to <code>true</code> to enable Hibernate @Annotations on Entity classes for ORM properties,
                    no hbm.xml files will be generated. The <code>hibernateVersion</code> namespace property must be set to <code>3</code> or <code>4</code>.
                </documentation>
            </property>
            <property name="hibernateXMLPersistence">
                <default>false</default>
                <documentation>
                    Set to <code>true</code> to enable Hibernate's
                    <a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/xml.html">XML persistence support</a>
                    using dom4J. The <code>hibernateVersion</code> namespace property must be set to <code>3</code>.
                </documentation>
            </property>
            <property name="hibernateXMLPersistIDAsAttribute">
                <default>true</default>
                <documentation>
                    Set to <code>true</code> if the identifier for generated entities should be mapped
                    to an <i>attribute</i> of the entity's XML tag, or as a separate field when
                    <a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/xml.html">XML persistence support</a>
                    is enabled. The <code>hibernateXMLPersistence</code> namespace property must be set
                    to <code>true</code> for this option to have meaning.
                </documentation>
            </property>
            <property name="hibernateJAXBPersistence">
                <default>false</default>
                <documentation>
                    Set to <code>true</code> to enable JAXB XML annotations on Entity classes, used for serialization as
                    part of REST services. The <code>hibernateVersion</code> namespace property must be set to <code>3</code>.
                </documentation>
            </property>
            <property name="defaultHibernateGeneratorClass">
                <default>native</default>
                <documentation>
                    The default class to use for Hibernate ID generation (can be overridden
                    on a per entity basis with the
                    <a href="profile.html#andromda_hibernate_generator_class">andromda_hibernate_generator_class</a>
                    tagged value).
                </documentation>
            </property>
            <property name="hibernateOneToManyNotFoundAction">
                <default>exception</default>
                <documentation>
                    Only applicable to Hibernate 3.x; this property sets the default handling of what will happen when an association
                    is loaded and not found on a one-to-many association.  The allowable values are:
                    <ul>
                        <li>exception</li>
                        <li>ignore</li>
                    </ul>
                    If <code>ignore</code> is set, then objects not found in associations will be returned as null, otherwise an ObjectNotFoundException
                    is thrown by Hibernate.  It is sometimes useful to set this value to <code>ignore</code> when you're using association caching.
                </documentation>
            </property>
            <property name="hibernateDefaultCascade">
                <default>none</default>
                <documentation>
                    The value of the <code>default-cascade</code> attribute of the hibernate entity XML mapping.
                </documentation>
            </property>
            <property name="criteriaSearchBaseName">
                <default>CriteriaSearch</default>
                <documentation>
                    The base name for the hibernate criteria search utility classes.
                </documentation>
            </property>
            <property name="hibernateCompositionCascade" required="false">
                <documentation>
                    Indicates how a UML composition should be interpreted as cascade.
                    <ul>
                        <li>
                           If undefined, the cascade attribute is computed by AndroMDA in the following manner:
                           if default-cascade is <em>save-update</em> or <em>all</em>,
                           then cascade is <em>all</em> (0..1) or <em>all-delete-orphan</em> (many)
                           otherwise cascade is <em>delete</em>.
                        </li>
                        <li>
                            If the property IS defined, its value is generated at each occurrence of a UML composition,
                            and the inverse side is marked with cascade="none".  The value must be a valid Hibernate cascade style.
                            You should use a cascade value which includes delete to be conform with the
                            UML concept of a composition, e.g. <em>all-delete-orphan</em>.
                        </li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateAggregationCascade" required="false">
                <documentation>
                    Indicates how a UML aggregation should be interpreted as cascade. Possible values are are as follows:
                    <ul>
                        <li>
                            If undefined, aggregation is not interpreted as a cascade value
                        </li>
                        <li>
                            If the property IS defined, its value is generated at each
                            occurrence of a UML aggregation, and the inverse side is marked with <em>cascade="none"</em>.
                            The value must be a valid Hibernate cascade style, e.g. <em>all</em>.
                         </li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateEntityDynamicInsert">
                <default>false</default>
                <documentation>
                    Defines the default value dynamic-insert property on entities.
                </documentation>
            </property>
            <property name="hibernateEntityDynamicUpdate">
                <default>false</default>
                <documentation>
                    Defines the default value dynamic-update property on entities.
                </documentation>
            </property>
            <property name="hibernateProxy">
                <default>false</default>
                <documentation>
                    Defines if proxies will be enabled for Hibernate Entities.
                </documentation>
            </property>
            <property name="hibernateQueryUseNamedParameters">
                <default>false</default>
                <documentation>
                    Whether or not named parameters (i.e. ':someParameter') or unnamed
                    (i.e. '?') parameters should be used in the HQL queries embedded
                    within the model.
                    <strong>NOTE:</strong> Does not apply to queries written in OCL.
                </documentation>
            </property>
            <property name="hibernateInheritanceStrategy">
                <default>subclass</default>
                <documentation>
                    See <a href="http://docs.jboss.org/hibernate/stable/orm/manual/en-US/html_single/">Hibernate ORM</a>.
                    Defines the hibernate inheritance strategy (unless
                    overridden on an entity level by the
                    <a href="profile.html#andromda_hibernate_inheritance">andromda_hibernate_inheritance</a>
                    tagged value, can be the following possible values:
                      <ul>
                          <li>class - single table per hierarchy. SINGLE_TABLE</li>
                          <li>hierarchy - table per subclass in hierarchy. JOINED</li>
                          <li>concrete - Table per class. Only concrete classes. TABLE_PER_CLASS</li>
                          <li>union-subclass - Table per class (Only Hibernate 3).</li>
                          <li>
                              interface - Root class is defined as an interface and the
                              attributes re-mapped to the subclasses.  This is useful in
                              the concrete case because it has limitations in the associations.
                          </li>
                      </ul>
                </documentation>
            </property>
            <property name="hibernateMappingStrategy">
                <default>hierarchy</default>
                <documentation>
                    Denotes whether or not subclasses should be mapped into the same <code>.hbm.xml</code> file or
                    in a separate one.
                    <ul>
                        <li>Set this value to <code>subclass</code> when you want to have a mapping file per entity</li>
                        <li>The default is <code>hierarchy</code> which will render a mapping file per subclass</li>
                    </ul>
                </documentation>
            </property>
            <property name="defaultEntityDiscriminatorColumn">
                <default>class</default>
                <documentation>
                    The default name of the <code>discriminator-column</code> on the hibernate entity XML mapping.
                </documentation>
            </property>
            <property name="defaultEntityDiscriminatorType">
                <default>string</default>
                <documentation>
                    The default type of the <code>discriminator-column</code> of the hibernate entity XML mapping.
                </documentation>
            </property>
            <property name="compositionDefinesEagerLoading">
                <default>true</default>
                <documentation>
                    Allows you to turn on/off whether or not composite associations will define eager loading.
                </documentation>
            </property>
            <property name="ejbViewType">
                <default>local</default>
                <documentation>
                    If EJBs are being used, this specifies the default view type
                    for the EJB interfaces.  Can be either <em>local</em>
                    or <code>remote</code>.
                </documentation>
            </property>
            <property name="hibernateAssociationCollectionType">
                <default>set</default>
                <documentation>
                    Used to define the default mapping for hibernate collections.
                </documentation>
            </property>
            <property name="hibernateAssociationSortType">
                <default>unsorted</default>
                <documentation>
                    Used to define how elements will be sorted within the collection defined by the association.
                    (Only available for maps and sets).
                </documentation>
            </property>
            <property name="hibernateQueryUseSpecializedSetters">
                <default>false</default>
                <documentation>
                    Defines if the finder setters method for parameters will use "setParameter" for all parameters (by default),
                    or a specialized setter (setDate, setBoolean, etc.) in case the parameter type has it's own setter method.
                </documentation>
            </property>
            <property name="versionProperty" required="false">
                <documentation>
                    The name of the property/attribute to automatically add to entities
                    for versioning purposes. If this value is not specified or it contains
                    only whitespace characters it will be ignored and the property will
                    not be generated. This value can be overridden with the
                    <a href="profile.html#andromda_hibernate_version">andromda_hibernate_version</a>tagged value.
                </documentation>
            </property>
            <property name="hibernateAssociationEndOuterJoin">
                <default>auto</default>
                <documentation>
                    Defines the default outer join value for many to one and
                    one to one association ends. Possible values are:
                   <ul>
                       <li>auto</li>
                       <li>true</li>
                       <li>false</li>
                    </ul>
                       For hibernate 3 the above values will be translated to
                    <ul>
                        <li>join</li>
                        <li>select</li>
                    </ul>
                </documentation>
            </property>
            <property name="listTypeImplementation">
                <default>java.util.ArrayList</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as lists.
                </documentation>
            </property>
            <property name="setTypeImplementation">
                <default>java.util.HashSet</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as sets.
                </documentation>
            </property>
            <property name="mapTypeImplementation">
                <default>java.util.HashMap</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as maps.
                </documentation>
            </property>
            <property name="bagTypeImplementation">
                <default>java.util.ArrayList</default>
                <documentation>
                    The implementation type to use for association ends that are modeled as bags.
                </documentation>
            </property>
            <property name="specificCollectionInterfaces">
                <default>false</default>
                <documentation>
                    A flag indicating whether or not specific collection interfaces will be used
                    in association end mutators and accessors (i.e. java.util.Set, java.util.List, etc).
                    If this is set to false, then the value of the <a href="#defaultCollectionInterface">defaultCollectionInterface</a>
                    property will used to provide the collection interface.
                </documentation>
            </property>
            <property name="defaultCollectionInterface">
                <default>java.util.Collection</default>
                <documentation>
                    The default collection interface, this is the interface used with association end
                    accessors and mutators if the <a href="#specificCollectionInterfaces">specificCollectionInterfaces</a>
                    flag is set to <code>false</code>.
                </documentation>
            </property>
            <property name="associationEndCollectionIndexName" required="false">
                <documentation>
                    The default association end collection index name (this can be overridden by the
                    <a href="profile.html#andromda_hibernate_collection_index">andromda_hibernate_collection_index</a>).
                </documentation>
            </property>
            <property name="associationEndCollectionIndexType" required="false">
                <default>datatype::String</default>
                <documentation>
                    The default association end collection index type (this can be overridden by the
                    <a href="profile.html#andromda_hibernate_collection_index_type">andromda_hibernate_collection_index_type</a>
                    (this is applicable when the collection is a map).
                </documentation>
            </property>
            <property name="hibernateTypeMappingsUri" required="false">
                <documentation>
                    URI specifying the specific mappings from model types to hibernate types.
                    (i.e. <code>file:${basedir}/HibernateTypeMappings.xml</code>). This
                    is not necessary but useful for defining hibernate user types (when
                    hibernate doesn't support a specific type in the manner needed
                    for your application).
                </documentation>
            </property>
            <property name="securityRealm" required="false">
                <documentation>
                    The name of the security realm (i.e. animal-quiz, other, etc).
                    <strong>NOTE:</strong>This enables EJB security if specified.
                </documentation>
            </property>
            <property name="customTypesPackage">
                <default>org.andromda.persistence.hibernate</default>
                <documentation>
                </documentation>
            </property>
            <property name="userTypesPackage">
                <default>org.andromda.persistence.hibernate.usertypes</default>
                <documentation>
                    Defines the package for the Hibernate user types
                </documentation>
            </property>
            <property name="enumTypesPackage" required="false">
                <documentation>
                    Optional definition of the package name where all Hibernate enumeration types are
                    to be generated. This will overrride the default model package name where the
                    enumeration class itself will still be placed.
                </documentation>
            </property>
            <property name="serviceLocatorName">
                <default>ServiceLocator</default>
                <documentation>
                    The name to give to the generated service locator class.
                </documentation>
            </property>
            <property name="hibernatePoolSize" required="false">
                <documentation>
                    Hibernate connection pool size.
                </documentation>
            </property>
            <property name="hibernateJndiName">
                <default>java:/hibernate/SessionFactory</default>
                <documentation>
                    JNDI name bound to the SessionFactory.
                </documentation>
            </property>
            <property name="xmlEncoding">
                <default>UTF-8</default>
                <documentation>
                    Encoding for generated XML files.
                </documentation>
            </property>
            <property name="dateTimeGeneratedText">
                <default>true</default>
                <documentation>
                    Adds the current date and time to the generated files (as comment).
                </documentation>
            </property>
            <property name="generateEntityEqualsAndHashCode">
                <default>true</default>
                <documentation>
                    Indicates whether or not a default equals and hashCode implementation should be generated.
                </documentation>
            </property>
            <!-- This property is only relevant for Hibernate 3 -->
            <property name="hibernateQueryFactory">
                <default>org.hibernate.hql.classic.ClassicQueryTranslatorFactory</default>
                <documentation>
                    Hibernate3 comes with a brand-new, ANTLR-based HQL/SQL query translator. However, it is still buggy and so in mean time use the Hibernate 2.1 query parser which is still available.
                    Possible values are:
                     <ul>
                        <li>org.hibernate.hql.ast.ASTQueryTranslatorFactory (for the new query parser)</li>
                        <li>org.hibernate.hql.classic.ClassicQueryTranslatorFactory (for the old parser)</li>
                     </ul>
                </documentation>
            </property>
            <!-- This property is only relevant for Hibernate 3 -->
            <property name="generateDatabaseDependentCode">
                <default>true</default>
                <documentation>
                    Indicates whether or not to generate code dependent on the defined (with <a href="#hibernateDialect">hibernateDialect</a>) database system,
                    like <code>sql-type</code>, <code>index</code> and <code>foreign-key</code> attributes for all properties.
                    These attributes are useful for DDL-schema generation but aren't at runtime.
                    (This property is only supported for hibernate 3 code generation)
                </documentation>
            </property>
            <property name="generateAttributeNameConstant">
                <default>false</default>
                <documentation>
                    Indicates whether or not to generate a constant string with the attributes names in entities
                    to easier the references in criteria (and other) queries. 
                </documentation>
            </property>
            <property name="attributeNameConstantPrefix">
                <default>_</default>
                <documentation>
                    Prefix to be used in the constant name, when generateAttributeNameConstant=true
                </documentation>
            </property>
        </propertyGroup>
    </properties>
</namespace>