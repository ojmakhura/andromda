#set ($generatedFile = "${embeddedValue.packagePath}/${embeddedValue.name}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEmbeddedValue.vsl in andromda-hibernate-cartridge#if($dateTimeGeneratedText) on $hibernateUtils.date#end.
//
#if ($stringUtils.isNotBlank($embeddedValue.packageName))
package $embeddedValue.packageName;
#end

/**
$embeddedValue.getDocumentation(" * ")
 */
#if ($hibernateEntityAnnotations)
    @jakarta.persistence.Embeddable
#end
public abstract class $embeddedValue.name
#if($embeddedValue.generalization)
    extends $embeddedValue.generalization.fullyQualifiedName
#end
    implements java.io.Serializable, Comparable<$embeddedValue.name>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${embeddedValue.serialVersionUID}L;

#if (!$embeddedValue.abstract)
    /**
     * Creates a new instance of {@link ${embeddedValue.name}}
     * taking all properties.
#foreach ($attribute in $embeddedValue.attributes)
     * @param $attribute.name
#end
     * @return object
     */
#set ($parenthesis = "(")
#if ($embeddedValue.attributes.empty)
#set ($parenthesis = "()")
#end
    public static $embeddedValue.name newInstance${parenthesis}#foreach ($attribute in $embeddedValue.attributes)
$attribute.getterSetterTypeName ${attribute.name}#if($velocityHasNext),#else)#end#end

    {
        $embeddedValue.implementationName object = new ${embeddedValue.implementationName}();
#foreach ($attribute in $embeddedValue.attributes)
        object.${attribute.setterName}($attribute.name);
#end
        object.initialize();
        return object;
    }

    /**
     * Creates a new instance from other $embeddedValue.name instance.
     * @param otherObject
     * @return newInstance
     */
    public static ${embeddedValue.name} newInstance($embeddedValue.name otherObject)
    {
        if (otherObject != null)
        {
            return newInstance(#foreach ($attribute in $embeddedValue.attributes)
otherObject.${attribute.getterName}()#if($velocityHasNext),#end#end);
        }
        return null;
    }

    /**
     * Default protected empty constructor
     */
    protected ${embeddedValue.name}()
    {
        // Default protected empty constructor
    }

    /**
     * Hook for initializing the object in the subclass. Empty method.
     */
    protected void initialize()
    {
        // Empty block comment
    }

#if (!$embeddedValue.attributes.empty)
    // EmbeddedValue attributes

#end
#foreach ($attribute in $embeddedValue.attributes)
    private $attribute.getterSetterTypeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     * @return ${attribute.name}
     */
    $attribute.visibility $attribute.getterSetterTypeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    /**
#if ($embeddedValue.immutable)
     * protected setter, if subclass methods need to normalize the $embeddedValue.name
#end
$attribute.getDocumentation("     * ")
     * @param ${attribute.name}In
     */
#if ($embeddedValue.immutable)
    protected void ${attribute.setterName}($attribute.getterSetterTypeName ${attribute.name}In)
#else
    $attribute.visibility void ${attribute.setterName}($attribute.getterSetterTypeName ${attribute.name}In)
#end
    {
        this.${attribute.name} = ${attribute.name}In;
    }

#end
#if (!$embeddedValue.operations.empty)
    // EmbeddedValue operations

#end
#foreach ($operation in $embeddedValue.operations)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $operation.getterSetterReturnTypeName $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $operation.getterSetterReturnTypeName $operation.signature;
#end

#end
#end
    /**
     * Indicates if the argument is of the same type and all values are equal.
     * @see Object#equals(Object)
     */
#renderEqualsMethod($class $embeddedValue.name $embeddedValue.attributes)

#set ($attributeCollection = $embeddedValue.attributes)
    /**
     * Returns a hash code based on this entity's identifiers.
     * @see Object#hashCode()
     */
#renderHashCodeMethod($class $embeddedValue.name $attributeCollection)
#renderCompareToMethod($embeddedValue $embeddedValue.name $embeddedValue.identifiers)
}
