## #if ($recordType.equalsIgnoreCase("dao"))
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateSearchProperties.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($generatedFile = "${criteriaSearchBaseName}Properties.java")
#if($stringUtils.isNotBlank($customTypesPackage))
package $customTypesPackage;
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Stores the embedded values and associations of all entities in the system by type.
 * Is used to determine the appropriate parameter name when an embedded value's property
 * is referenced as the attribute to search by (as opposed to an association).
 *
 * @author Chad Brandon
 */
public class ${criteriaSearchBaseName}Properties
{
    private static final java.util.Map<Class<?>,Collection<PropertyType>> embeddedValuesByType = new java.util.HashMap<Class<?>,Collection<PropertyType>>();
    private static final java.util.Map<Class<?>,Collection<String>> embeddedValueNamesByType = new java.util.HashMap<Class<?>,Collection<String>>();
    private static final java.util.Map<Class<?>,Collection<PropertyType>> navigableAssociationEndsByType = new java.util.HashMap<Class<?>,Collection<PropertyType>>();

    static
    {
#foreach ($entity in $entities)
        initialize${entity.name}${velocityCount}();
#end
    }

#foreach ($entity in $entities)
    private static final void initialize${entity.name}${velocityCount}()
    {
#set ($embeddedValueListDefinition = "null")
#if ($stringUtils.isNotBlank($entity.attributeEmbeddedValueList))
#set ($embeddedValueListDefinition = "java.util.Arrays.asList(new String[] {$entity.attributeEmbeddedValueList})")
#end
        embeddedValueNamesByType.put(
            ${entity.fullyQualifiedEntityName}.class,
            $embeddedValueListDefinition);
#if ($entity.embeddedValues.empty)
        embeddedValuesByType.put(
            ${entity.fullyQualifiedEntityName}.class,
            null);
#else
        embeddedValuesByType.put(
            ${entity.fullyQualifiedEntityName}.class,
            java.util.Arrays.asList(
                new PropertyType[]
                {
#foreach($embeddedValue in $entity.embeddedValues)
                    // EmbeddedValue type=$embeddedValue.type.fullyQualifiedName
#if (!$embeddedValue.type.equals("$embeddedValue.type"))
                    new PropertyType("$embeddedValue.name", ${embeddedValue.type.fullyQualifiedName}Impl.class)#if($velocityHasNext),
#end
#end#end

                }
            )
        );
#end
#if ($entity.getNavigableConnectingEnds(true).empty)
        navigableAssociationEndsByType.put(
            ${entity.fullyQualifiedEntityName}.class,
            null);
#else
        navigableAssociationEndsByType.put(
            ${entity.fullyQualifiedEntityName}.class,
            java.util.Arrays.asList(
                new PropertyType[]
                {
#foreach($end in $entity.getNavigableConnectingEnds(true))
## TODO Validate Entity Associations are Entities or EmbeddedValues
#if ($end.type.fullyQualifiedEntityName.equals("$end.type.fullyQualifiedEntityName"))
                    new PropertyType("$end.name", ${end.type.fullyQualifiedEntityName}.class)#if($velocityHasNext),
#end
#end#end

                }
            )
        );
#end
    }

#end
    /**
     * Attempts to get the embedded value list for the given type (or returns null
     * if one doesn't exist).
     *
     * @param type the type of which to retrieve the value.
     * @return the collection of embedded value names.
     */
    public static java.util.Collection<String> getEmbeddedValues(final Class<?> type)
    {
        return embeddedValueNamesByType.get(type);
    }

    /**
     * Gets the type of the navigable association end given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class<?> getNavigableAssociationEndType(final Class<?> ownerType, final String name)
    {
        return getPropertyType(navigableAssociationEndsByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class<?> getEmbeddedValueType(final Class<?> ownerType, final String name)
    {
        return getPropertyType(embeddedValuesByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param properties Map contains the Collection of properties given the ownerType Class
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class<?> getPropertyType(final java.util.Map<Class<?>,Collection<PropertyType>> properties, final Class<?> ownerType, final String name)
    {
        final java.util.Collection<PropertyType> ends = properties.get(ownerType);
        final PropertyType type = (PropertyType)org.apache.commons.collections4.CollectionUtils.find(
            ends,
            new org.apache.commons.collections4.Predicate()
            {
                @Override
                public boolean evaluate(final Object object)
                {
                    return ((PropertyType)object).name.equals(name);
                }
            });
        return type != null ? type.type : null;
    }

    /**
     * Gets the type of the property given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class<?> getPropertyType(final Class<?> ownerType, final String name)
    {
        Class<?> type = getNavigableAssociationEndType(ownerType, name);
        if (type == null)
        {
            type = getEmbeddedValueType(ownerType, name);
        }
        if (type == null)
        {
            try
            {
                java.lang.reflect.Method getter;
                try
                {
                    getter=ownerType.getMethod("get"+org.apache.commons.lang3.StringUtils.capitalize(name), (Class[])null);
                } catch (NoSuchMethodException e) {
                    getter=ownerType.getMethod("is"+org.apache.commons.lang3.StringUtils.capitalize(name), (Class[])null);
                }
                type = getter.getReturnType();
            } catch (SecurityException e) {
                throw new RuntimeException(e);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException("No accessible property named '" + name + "', exists on: " + ownerType.getName());
            }
        }
        return type;
    }

    /**
     * A private class storing the name and type.
     */
    protected static final class PropertyType
    {
        /**
         * @param nameIn
         * @param typeIn
         */
        protected PropertyType(final String nameIn, final Class<?> typeIn)
        {
            this.name = nameIn;
            this.type = typeIn;
        }

        /** PropertyType name */
        protected String name;
        /** PropertyType type Class */
        protected Class<?> type;
    }
}
## #end