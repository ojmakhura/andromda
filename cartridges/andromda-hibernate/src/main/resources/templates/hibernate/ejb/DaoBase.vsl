#if ($umlUtils.shouldOutput($entity))
#parse("templates/hibernate/Globals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by DaoBase.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
#if ($enableTemplating)
#**##set ($entityCollectionType = "java.util.Collection<${entity.fullyQualifiedEntityName}>")
#else
#**##set ($entityCollectionType = "java.util.Collection")
#end
#if ($stringUtils.isNotBlank($entity.packageName))
package ${entity.packageName};
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#**##set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#**##set ($rootEntity = $entity.root)
#**##set ($rootDaoType = $entity.root.fullyQualifiedDaoName)
#else
#**##set ($rootEntityType = $entity.fullyQualifiedEntityName)
#**##set ($rootEntity = $entity)
#**##set ($rootDaoType = $entity.fullyQualifiedDaoName)
#end

import ${hibernateNamespace}.persistence.TypedQuery;
#if(!$finder.arguments.empty)
import ${hibernateNamespace}.persistence.criteria.CriteriaBuilder;
import ${hibernateNamespace}.persistence.criteria.CriteriaQuery;
import ${hibernateNamespace}.persistence.criteria.Root;
import ${hibernateNamespace}.persistence.criteria.Predicate;
import ${hibernateNamespace}.persistence.criteria.Join;
import ${hibernateNamespace}.persistence.criteria.JoinType;
import java.util.ArrayList;
import java.util.List;
#end
/**
 * <p>
 * Base EJB3 DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $rootDaoType
 */
@${hibernateNamespace}.ejb.TransactionAttribute(${hibernateNamespace}.ejb.TransactionAttributeType.REQUIRED)
@${hibernateNamespace}.ejb.Local({${rootDaoType}.class})
#if ($entity.securityEnabled)
#**##if ($stringUtils.isBlank(${entity.rolesAllowed}))
@${hibernateNamespace}.annotation.security.PermitAll
#**##else
@${hibernateNamespace}.annotation.security.RolesAllowed({${entity.rolesAllowed}})
#**##end
#end
public abstract class $entity.daoBaseName
#if ($daoInheritance)
    extends $entity.generalization.fullyQualifiedDaoImplementationName
#end
    implements $rootDaoType
{
    /** Session Context Injection */
    @${hibernateNamespace}.annotation.Resource
    protected ${hibernateNamespace}.ejb.SessionContext context;

    /**
     * Inject persistence context #if ($entity.defaultPersistenceContextUnitName)${entity.defaultPersistenceContextUnitName}#end

     */
    @${hibernateNamespace}.persistence.PersistenceContext#if ($entity.defaultPersistenceContextUnitName)(unitName = "${entity.defaultPersistenceContextUnitName}")#end

    protected ${hibernateNamespace}.persistence.EntityManager entityManager;

#set ($entityReferences = $entity.entityReferences)
#if (!$entityReferences.empty)
    // ------ DAO Injections ------

#**##foreach($entityRef in $entityReferences)
    /**
     * Inject DAO $entityRef.targetElement.fullyQualifiedDaoName
     */
    @${hibernateNamespace}.ejb.EJB
    protected ${entityRef.targetElement.fullyQualifiedDaoName}Impl $entityRef.daoName;

#**##end
#end
#foreach($entityRef in $entityReferences)
    /**
     * Gets the reference to <code>$entityRef.daoName</code>.
     * @return $entityRef.targetElement.fullyQualifiedDaoName
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#set ($identifiers = $entity.identifiers)
##set ($identifiers = $entityUtils.getIdentifierAttributes($entity, true))
#if (!$entity.compositePrimaryKeyPresent && ! $identifiers.empty)
#**##set ($identifier = $identifiers.iterator().next())
#end
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * @see ${rootDaoType}${esc.hash}load
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public Object load(final int transform#foreach($identifier in $identifiers), final $identifier.type.fullyQualifiedName $identifier.name#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
#foreach ($identifier in $identifiers)
#**##if(!$identifier.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$identifier.name' can not be null");
        }
#**##end
#end
        try
        {
#if ($entity.compositePrimaryKeyPresent)
            final $rootEntityType entity = this.entityManager.find(${entity.fullyQualifiedEntityName}.class, new ${entity.fullyQualifiedEntityCompositePrimaryKeyName}(#foreach ($identifier in $identifiers)#if($identifier.type.primitive) new ${identifier.type.wrapperName}(${identifier.name})#else $identifier.name#end#if ($velocityCount != $identifiers.size()),#end#end));
#else
            final $rootEntityType entity = this.entityManager.find(${entity.fullyQualifiedEntityName}.class, $identifier.name);
#end
            return transformEntity(transform, entity);
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}load(#foreach($identifier in $identifiers) $identifier.type.fullyQualifiedName#if ($velocityCount != $identifiers.size()),#end#end)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public $rootEntityType load(#foreach($identifier in $identifiers) final $identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $identifiers.size()),#end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName,#foreach($identifier in $identifiers) $identifier.name#if ($velocityCount != $identifiers.size()),#end#end);
    }

    /**
     * @see ${rootDaoType}${esc.hash}loadAll()
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll()
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see ${rootDaoType}${esc.hash}loadAll(int)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public java.util.Collection loadAll(final int transform)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        try
        {
#if ($entity.genericFinders)
            ${hibernateNamespace}.persistence.TypedQuery<${entity.fullyQualifiedEntityName}> query = this.entityManager.createNamedQuery("${entity.name}.findAll", ${entity.fullyQualifiedEntityName}.class);
#else
            ${hibernateNamespace}.persistence.TypedQuery<${entity.fullyQualifiedEntityName}> query = this.entityManager.createQuery("from ${entity.entityName} as entity", ${entity.fullyQualifiedEntityName}.class);
#end
#if ($entity.useQueryCache && !$entity.useDefaultCacheRegion)
            query.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_findAll");
#end
            java.util.List<${entity.fullyQualifiedEntityName}> results = query.getResultList();
            this.transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)

    /**
     * Create $entity.name with no VO transformation
     * @see ${rootDaoType}${esc.hash}create($entity.fullyQualifiedEntityName)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }

    /**
     * Create $entity.name with VO transformation
     * @see ${rootDaoType}${esc.hash}create(int, $entity.fullyQualifiedEntityName)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public Object create(final int transform, final $rootEntityType $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }

        try
        {
            this.entityManager.persist(${argumentName});
            this.entityManager.flush();
            return this.transformEntity(transform, $argumentName);
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * Create a Collection of $entity.name with no VO transformation
     * @see ${rootDaoType}${esc.hash}create(java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType create(final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return create($entity.daoNoTransformationConstantName, entities);
    }

    /**
     * Create a Collection of $entity.name with VO transformation
     * @see ${rootDaoType}${esc.hash}create(int, java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked", "rawtypes"})
#end
    public java.util.Collection create(final int transform, final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - 'entities' can not be null");
        }
        java.util.Collection results = new java.util.ArrayList();
        try
        {
            for (final $entity.fullyQualifiedEntityName entity : entities)
            {
                results.add(create(transform, entity));
            }
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
        return results;
    }

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getInstanceAttributes(true, $entity.usingAssignedIdentifier))
#if (!$attributes.empty)
    /**
     * Create Entity $entity.name using instance attributes with no VO transformation
     * @see ${rootDaoType}${esc.hash}create(${entity.getInstanceAttributeTypeList(true, false)})
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public $rootEntityType create(
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end $attribute.name#if($velocityHasNext),
#end
#*    *##end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getInstanceAttributeNameList(true, $entity.usingAssignedIdentifier)});
    }

    /**
     * Create Entity $entity.name using instance attributes with VO transformation
     * @see ${rootDaoType}${esc.hash}create(int, ${entity.getInstanceAttributeTypeList(true, false)})
     * composite=$entity.compositePrimaryKeyPresent identifiers=$entity.identifiers.size()
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public Object create(
        final int transform,
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end $attribute.name#if($velocityHasNext),
#end
#*    *##end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityName}();
#if ($entity.compositePrimaryKeyPresent)
        $entity.fullyQualifiedEntityCompositePrimaryKeyName pk = new ${entity.fullyQualifiedEntityCompositePrimaryKeyName}();
#end
#*    *##foreach ($attribute in $attributes)
#*      *##if (!$attribute.version)
##
## Ignore arg where the corresponding entity attribute is modelled as a version
##
#*    *##if ($attribute.identifier && $entity.compositePrimaryKeyPresent)
## Only AssociationEnds are navigable properties
        pk.${attribute.setterName}($attribute.name);
#*    *##else
        entity.${attribute.setterName}($attribute.name);
#*    *##end
#*      *##end
#*    *##end
#if ($entity.compositePrimaryKeyPresent)
        entity.setPk(pk);
#end
        return this.create(transform, entity);
    }

#*  *##end
#*  *##set ($requiredProperties = $entity.getRequiredProperties(true,$entity.usingAssignedIdentifier))
#*  *##if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,$entity.usingAssignedIdentifier).size() != $requiredProperties.size())
    /**
     * Create Entity $entity.name using required properties with no VO transformation
     * @see ${rootDaoType}${esc.hash}create(${entity.getRequiredPropertyTypeList(true, $entity.usingAssignedIdentifier)})
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public $rootEntityType create(
#*    *##foreach($property in $requiredProperties)
        #if ($stringUtils.isNotBlank($property.lobType))${property.lobType}#else$property.getterSetterTypeName#end $property.name#if($velocityHasNext),
#end
#*    *##end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getRequiredPropertyNameList(true,$entity.usingAssignedIdentifier)});
    }

    /**
     * Create Entity $entity.name using required properties with VO transformation
     * @see ${rootDaoType}${esc.hash}create(int, ${entity.getRequiredPropertyTypeList(true, $entity.usingAssignedIdentifier)})
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public Object create(
        final int transform,
#*    *##foreach($property in $requiredProperties)
        #if ($stringUtils.isNotBlank($property.lobType))${property.lobType}#else$property.getterSetterTypeName#end $property.name#if($velocityHasNext),
#end
#*    *##end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityName}();
#if ($entity.compositePrimaryKeyPresent)
        $entity.fullyQualifiedEntityCompositePrimaryKeyName pk = new ${entity.fullyQualifiedEntityCompositePrimaryKeyName}();
#end
#*    *##foreach ($property in $requiredProperties)
        // $property.name $propertyType.fullyQualifiedName identifier=$propertyType.identifier $property.identifier
#*    *##if ($property.identifier && $entity.compositePrimaryKeyPresent)
## Only AssociationEnds are navigable properties
#*    *##if ($property.navigable)
#*    *##foreach ($propertyType in $property.type.identifiers)
##        entity.${property.setterName}($property.name);
        pk.${property.setterName}($property.name);
##        pk.${propertyType.setterName}(${property.name}.#if ($propertyType.compositePrimaryKeyPresent)getPk().#end${propertyType.getterName}());
#*    *##end
#*    *##else
        pk.${property.setterName}($property.name);
#*    *##end
#*    *##else
        entity.${property.setterName}($property.name);
#*    *##end
#*    *##end
#if ($entity.compositePrimaryKeyPresent)
        entity.setPk(pk);
#end
        return this.create(transform, entity);
    }

#*  *##end
#end
#end
    /**
     * @see ${rootDaoType}${esc.hash}update($entity.fullyQualifiedEntityName)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void update($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        try
        {
            this.entityManager.merge($argumentName);
            this.entityManager.flush();
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}update(java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void update(final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - 'entities' can not be null");
        }
        try
        {
            for (final $entity.fullyQualifiedEntityName entity : entities)
            {
                update(entity);
            }
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}remove($entity.fullyQualifiedEntityName)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void remove($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        try
        {
            this.entityManager.remove($argumentName);
            this.entityManager.flush();
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}remove(#foreach ($identifier in $identifiers)$identifier.type.fullyQualifiedName#if ($velocityCount != $identifiers.size()), #end#end)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void remove(#foreach ($identifier in $identifiers)$identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $identifiers.size()), #end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
#foreach ($identifier in $identifiers)
#if(!$identifier.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$identifier.name' can not be null");
        }
#end
#end
##if (!$entity.compositePrimaryKeyPresent)
##set ($loadCall = "this.load($identifier.name)")
##else
#set ($loadCall = "this.load(#foreach ($identifier in $identifiers)$identifier.name#if ($velocityCount != $identifiers.size()), #end#end)")
##end
#if ($entity.requiresGeneralizationMapping)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        try
        {
            final $entity.fullyQualifiedEntityName entity = $loadCall;
            if (entity != null)
            {
                this.remove(entity);
            }
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}remove(java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void remove($entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        try
        {
            for (final $entity.fullyQualifiedEntityName entity : entities)
            {
                remove(entity);
            }
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

##
## With daoInheritance disabled, only generate the finder methods defined on this entity; do NOT
## include those defined on any of the super-entities.
##
#if ($daoInheritance)
#set ($queryOperations = $entity.getQueryOperations(true))
#else
#set ($queryOperations = $entity.queryOperations)
#end
##
#foreach ($finder in $queryOperations)
// $finder
#set ($returnType = $finder.returnType.fullyQualifiedName)
#**##if ($finder.returnTypePresent)
#*  *##if ($finder.returnType.setType)
#set ($transformReturn = "java.util.Set")
#*  *##elseif ($finder.returnType.collectionType)
#set ($transformReturn = "java.util.List")
#*  *##elseif ($finder.many)
#set ($transformReturn = "java.util.List<$returnType>")
#*  *##else
#set ($transformReturn = "Object")
#*  *##end
#**##end
    /**
     * @see ${rootDaoType}${esc.hash}$finder.getSignature(false)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    $finder.visibility $transformReturn $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if ($finder.returnTypePresent)
#*  *##if (!$finder.returnType.collectionType || $finder.many)
#*    *##set ($finderCall = "($transformReturn)$finderCall")
#*  *##end
        return $finderCall
#else
        $finderCall
#end
    }

    /**
     * @see ${rootDaoType}${esc.hash}${finder.name}(String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    $finder.visibility $transformReturn ${finder.name}(final String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
#**##set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#**##if ($finder.returnTypePresent)
#*  *##if (!$finder.returnType.collectionType)
#*    *##set ($finderCall = "($transformReturn)$finderCall")
#*  *##end
        return $finderCall
#**##else
        $finderCall
#**##end
    }

    /**
     * @see ${rootDaoType}${esc.hash}${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    $finder.visibility#if ($finder.returnTypePresent) $transformReturn#else void#end ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
        try
        {
##             CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();
##             CriteriaQuery<${rootEntityType}> query = builder.createQuery(${rootEntityType}.class);
##             Root<${rootEntityType}> root = query.from(${rootEntityType}.class);   
##             List<Predicate> predicates = new java.util.ArrayList<>();
##
## #**##foreach($argument in $finder.arguments)
## #*  *##set ($count = $velocityCount - 1)
## #*  *##set ($argumentValue = $argument.name)
## #*  *##if ($argument.firstResult)
##             queryObject.setFirstResult(${argument.name});
## #*  *##elseif ($argument.maxResults)
##             queryObject.setMaxResults(${argument.name});
## #*  *##else
## #if($collectionUtils.isEmpty($argument.type.attributes))
## #*    *##if($argument.type.primitive)
## #*      *##set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
## #*    *##else
## #*      *##set ($argumentValue = "${argument.name}")
## #*    *##end
##             if($argumentValue != null) {
## ## #*    *##if ($argument.temporalType)
## ## #*      *##set ($argumentValue = "${argumentValue}, ${hibernateNamespace}.persistence.TemporalType.${argument.temporalType}")
## ## #*    *##end
## ## #*    *##set ($setParameterOperation = "setParameter")
## ## #*    *###if ($argument.type.collectionType || $argument.type.arrayType)
## ## #*      *###set ($setParameterOperation = "${setParameterOperation}List")
## ## #*    *###end
## #set($split = $hibernateUtils.getAttributeNameList($attribute.attributeName))
## #if($split.size() == 2)
## #set($targetEntity = $attribute.type.fullyQualifiedName)
## #set($jointName = $attribute.name)
##                 Join<${rootEntityType}, $targetEntity> join = root.join("$jointName", JoinType.INNER);
##                 predicates.add(builder.equal(join.<Long>get("id"), ${argumentValue}.getId()));
## #else
##
## #if(${argument.type.stringType})
##                 predicates.add(builder.like(root.<String>get("$argument.name"), "%" + $argumentValue + "%"));
## #elseif(${argument.type.enumeration})
##                 predicates.add(builder.equal(root.<String>get("$argument.name"), ${argumentValue}.getValue()));
## #elseif ($argument.temporalType)
##                 predicates.add(builder.equal(root.<$argument.type.fullyQualifiedName>get("$argument.name"), ${argumentValue}));
## #elseif(!$collectionUtils.isEmpty($argument.type.attributes))
##                 // Do an inner join for $argument.name
##                 if(${argumentValue}.getId() != null) {
## #set($targetEntity = $stringUtils.capitalize($argument.name))
## #if($argument.attributeName)
## #set($split = $argument.attributeName.split(" "))
## #set($targetEntity = $split.get(0))
## #if($split.lenght == 2)
## #set($jointName = $split.get(1))
## #else
## #set($jointName = $argument.name)
## #end
## #else
## #set($targetEntity = $argument.type.fullyQualifiedName)
## #set($jointName = $argument.name)
## #end
##                     Join<${rootEntityType}, $targetEntity> join = root.join("$jointName", JoinType.INNER);
##                     predicates.add(builder.equal(join.<Long>get("id"), ${argumentValue}.getId()));
##
##                 }
##
## #else
##                 predicates.add(builder.equal(root.<$argument.type.name>get("$argument.name"), "%" + $argumentValue + "%"));
## #end
## #end
##             }
## #else
## #if($argument.getType().getStereotypeNames().toString().contains("Criteria"))
## #foreach($attribute in $argument.type.attributes)
## #*    *##if($attribute.type.primitive)
## #*      *##set ($argumentValue = "new ${attribute.type.wrapperName}(${argument.name}.${attribute.getterName}())")
## #*    *##else
## #*      *##set ($argumentValue = "${argument.name}.${attribute.getterName}()")
## #*    *##end
## ## #*    *##if ($attribute.temporalType)
## ## #*      *##set ($argumentValue = "${argumentValue}, ${hibernateNamespace}.persistence.TemporalType.${attribute.temporalType}")
## ## #*    *##elseif ($attribute.type.enumeration)
## ## #*      *##set ($argumentValue = "${argumentValue}.getValue()")
## ## #*    *##end
##             if($argumentValue != null) {
## #*    *##set ($setParameterOperation = "setParameter")
## #*    *###if ($attribute.type.collectionType || $attribute.type.arrayType)
## #*      *###set ($setParameterOperation = "${setParameterOperation}List")
## #*    *###end
## #set($any = "'%'")
## #if(${attribute.matchModeConstant} == "END")
## #set($argumentValue = "$any + $argumentValue")
## #elseif(${attribute.matchModeConstant} == "ANYWHERE")
## #set($argumentValue = "$any + $argumentValue + $any")
## #elseif(${attribute.matchModeConstant} == "END")
## #set($argumentValue = "$argumentValue + $any")
## #else
## #set($argumentValue = "$argumentValue")
## #end
## #if($attribute.nullable)
## #set($nullableArgument = ", true")
## #else
## #set($nullableArgument = "")
## #end
## #if(${attribute.comparatorConstant} == "NOT_EQUAL_COMPARATOR")
## #set($comparatorArgument = "notEqual")
## #elseif(${attribute.comparatorConstant} == "GREATER_THAN_OR_EQUAL_COMPARATOR")
## #set($comparatorArgument = "ge")
## #elseif(${attribute.comparatorConstant} == "GREATER_THAN_COMPARATOR")
## #set($comparatorArgument = "gt")
## #elseif(${attribute.comparatorConstant} == "LIKE_COMPARATOR")
## #set($comparatorArgument = "like")
## #elseif(${attribute.comparatorConstant} == "LESS_THAN_OR_EQUAL_COMPARATOR")
## #set($comparatorArgument = "le")
## #elseif(${attribute.comparatorConstant} == "LESS_THAN_COMPARATOR")
## #set($comparatorArgument = "lt")
## #elseif(${attribute.comparatorConstant} == "IN_COMPARATOR")
## #set($comparatorArgument = "in")
## #else
## #set($comparatorArgument = "equal")
## #end
## #set($split = $hibernateUtils.getAttributeNameList($attribute.attributeName))
## #if($split.size() == 2)
## #set($targetEntity = $attribute.type.fullyQualifiedName)
## #set($jointName = $attribute.name)
##                 Join<${rootEntityType}, $targetEntity> join = root.join("$jointName", JoinType.INNER);
##                 predicates.add(builder.equal(join.<Long>get("id"), ${argumentValue}.getId()));
## #else
## #if(${attribute.type.stringType} || ${attribute.type.enumeration})
##                 predicates.add(builder.${comparatorArgument}(root.<String>get("$attribute.name"), $argumentValue));
## #elseif ($attribute.temporalType)
##                 predicates.add(builder.${comparatorArgument}(root.<$attribute.type.fullyQualifiedName>get("$attribute.name"), ${argumentValue}));
## #elseif(!$collectionUtils.isEmpty($attribute.type.attributes))
##                 // Do an inner join for $attribute.name
## #if($attribute.attributeName)
## #set($split = $attribute.attributeName.split(" "))
## #set($targetEntity = $split.get(0))
## #if($split.lenght == 2)
## #set($jointName = $split.get(1))
## #else
## #set($jointName = $attribute.name)
## #end
## #else
## #set($targetEntity = $attribute.type.fullyQualifiedName)
## #set($jointName = $attribute.name)
## #end
##                 Join<${rootEntityType}, $targetEntity> join = root.join("$jointName", JoinType.INNER);
##                 predicates.add(builder.equal(join.<Long>get("id"), ${argumentValue}.getId()));
## #else
##                 predicates.add(builder.${comparatorArgument}(root.<$attribute.type.name>get("$attribute.name"), "%" + $argumentValue + "%"));
## #end
## #end
##             }
## #end
## #else
##             if($argument.name != null) {
##
##                 Join<${rootEntityType}, $argument.type.fullyQualifiedName> join = root.join("$argument.name", JoinType.INNER);
##                 predicates.add(builder.equal(join.<Long>get("id"), ${argument.name}.getId()));
##             }
## #end
## #end
## #*  *##end
## #**##end
## #**##if ($finder.useQueryCache && !$entity.useDefaultCacheRegion)
##             queryObject.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_${finder.name}");
## #**##end
##             if(!predicates.isEmpty()) {
##                 query.where();
##                 Predicate[] pr = new Predicate[predicates.size()];
##                 predicates.toArray(pr);
##                 query.where(pr); 
##             }
##
#**##if ($finder.returnTypePresent)
            TypedQuery<${rootEntityType}> typedQuery = this.entityManager.createNamedQuery("${rootEntity.name}.${finder.name}", ${rootEntity.name}.class);

#foreach($argument in $finder.arguments)
// $argument
// $argument.type.attributes.empty
// $argument.complex
#if($argument.type.attributes.empty)
            if(${argument.name} != null) {
                typedQuery.setParameter("${argument.name}", ${argument.name});
            }
#else
#if($hibernateUtils.isCriteriaAttribute($argument.type))
#foreach($attribute in $argument.type.attributes)
            // ${attribute.name}
            if(${argument.name}.get${stringUtils.capitalize(${attribute.name})}() != null) {
                typedQuery.setParameter("${attribute.name}", ${argument.name}.get${stringUtils.capitalize(${attribute.name})}());
            }
            
#end
#elseif($hibernateUtils.isEntity($argument.type))
#foreach($id in $argument.type.identifiers)
            // $id.name
            if(${argument.name}.get${stringUtils.capitalize($id.name)}() != null) {
                typedQuery.setParameter("${argument.name}${stringUtils.capitalize($id.name)}", ${argument.name}.get${stringUtils.capitalize($id.name)}());
            }

#end
#end
#end

#end
#*  *##if ($finder.returnType.setType)
            $transformReturn results = new java.util.LinkedHashSet(typedQuery.getResultList());
            transformEntities(transform, results);
            return results;
#*  *##elseif ($finder.returnType.collectionType || $finder.many)
            $transformReturn results = typedQuery.getResultList();
            transformEntities(transform, results);
            return results;
#*  *##else
            $transformReturn result = typedQuery.getSingleResult();
            result = transformEntity(transform, (${rootEntityType})result);
            return result;
#*  *##end
#**##else
            typedQuery.executeUpdate();
#**##end
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}${esc.hash}${finder.name}(int, String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    $finder.visibility#if ($finder.returnTypePresent) $transformReturn#else void#end ${finder.name}(final int transform, final String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws ${finder.exceptionList}, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
        try
        {
            ${hibernateNamespace}.persistence.TypedQuery<${entity.fullyQualifiedEntityName}> queryObject = this.entityManager.createQuery(queryString, ${entity.fullyQualifiedEntityName}.class);
#**##foreach($argument in $finder.arguments)
#*  *##set ($count = $velocityCount - 1)
#*  *##set ($argumentValue = $argument.name)
#*  *##if ($argument.firstResult)
            queryObject.setFirstResult(${argument.name});
#*  *##elseif ($argument.maxResults)
            queryObject.setMaxResults(${argument.name});
#*  *##else
#*    *##if($argument.type.primitive)
#*      *##set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
#*    *##else
#*      *##set ($argumentValue = "${argument.name}")
#*    *##end
#*    *##if ($argument.temporalType)
#*      *##set ($argumentValue = "${argumentValue}, ${hibernateNamespace}.persistence.TemporalType.${argument.temporalType}")
#*    *##end
#*    *##set ($setParameterOperation = "setParameter")
#*    *###if ($argument.type.collectionType || $argument.type.arrayType)
#*      *###set ($setParameterOperation = "${setParameterOperation}List")
#*    *###end
#*    *##if ($finder.useNamedParameters)
            queryObject.${setParameterOperation}("$argument.name", $argumentValue);
#*    *##else
            queryObject.${setParameterOperation}($count, $argumentValue);
#*    *##end
#*  *##end
#**##end
#**##if ($finder.useQueryCache && !$entity.useDefaultCacheRegion)
            queryObject.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_${finder.name}");
#**##end
#**##if ($finder.returnTypePresent)
#*  *##if ($finder.returnType.setType)
            $transformReturn results = new java.util.LinkedHashSet(queryObject.getResultList());
            transformEntities(transform, results);
            return results;
#*  *##elseif ($finder.returnType.collectionType || $finder.many)
            $transformReturn results = queryObject.getResultList();
            transformEntities(transform, results);
            return results;
#*  *##else
            $transformReturn result = queryObject.getSingleResult();
            result = transformEntity(transform, (${rootEntityType})result);
            return result;
#*  *##end
#**##else
            queryObject.executeUpdate();
#**##end
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

#end
#foreach ($operation in $entity.daoBusinessOperations)
#**##set ($returnType = $operation.returnType)
#**##set ($signature = $operation.signature)
    /**
     * @see ${rootDaoType}${esc.hash}${operation.getSignature(false)}
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    $operation.visibility $operation.getterSetterReturnTypeName ${operation.name}(${operation.getTypedArgumentList('final')})
#**##if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#**##end
    {
#**##if ($requiredCheckEnabled)
#*  *##foreach ($argument in $operation.arguments)
#*    *##if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${rootDaoType}.${operation.signature} - '${argument.name}' can not be null");
        }
#*    *##end
#*  *##end
#**##end
        try
        {
#**##set ($call = "this.${operation.implementationCall};")
#**##if ($operation.returnTypePresent)
            return $call
#**##else
            $call
#**##end
        }
#**##foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#**##end
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing '${rootDaoType}.${operation.signature}' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link ${esc.hash}${operation.getSignature(false)}}
#foreach($argument in $operation.arguments)
      * @param $argument.name $argument.fullyQualifiedType
#end
      * @return $operation.getterSetterReturnTypeName
      * @throws Exception
      */
    protected abstract $operation.getterSetterReturnTypeName $operation.implementationSignature
        throws Exception;

#end
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>${rootDaoType}</code>, please note
     * that the {@link ${esc.hash}$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$entity.valueObjectReferences.empty)
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link ${rootEntityType}} - {@link ${esc.hash}$entity.daoNoTransformationConstantName}</li>
#**##foreach ($valueObjectRef in $entity.allValueObjectReferences)
#*  *##set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${esc.hash}${valueObjectRef.transformationConstantName}}</li>
#**##end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link ${esc.hash}${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link ${rootDaoType}}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see ${esc.hash}transformEntities(int,java.util.Collection)
     */
    protected Object transformEntity(final int transform, final ${rootEntityType} entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
                case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link ${esc.hash}transformEntity(int, ${rootEntityType})}
     * method. This method does not instantiate a new collection.
     * <p/>
     * Transforms into the same collection as the argument, but this time containing the transformed entities
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>${rootDaoType}</code>
     * @param entities the collection of entities to transform
     * @see ${esc.hash}transformEntity(int, ${rootEntityType})
     */
    protected void transformEntities(final int transform, final java.util.Collection<${rootEntityType}> entities)
    {
        switch (transform)
        {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
            case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
                ${valueObjectRef.transformationToCollectionMethodName}(entities);
                break;
#end
            case $entity.daoNoTransformationConstantName : // fall-through
                default:
                // do nothing;
        }
    }

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public final void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, this.${valueObjectRef.transformationAnonymousName});
        }
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link $entity.daoImplementationName} class if you intend to use reporting queries.
     * @param row Object[] Array of $entity.fullyQualifiedEntityName to transform
     * @return target $valueObjectRef.targetElement.fullyQualifiedName
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationMethodName}(${rootEntityType})
     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(Object[] row)
    {
        $valueObjectRef.targetElement.fullyQualifiedName target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof $entity.fullyQualifiedEntityName)
                {
                    target = this.${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)object);
                    break;
                }
            }
        }
        return target;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer $valueObjectRef.transformationAnonymousName =
        new org.apache.commons.collections.Transformer()
        {
#if ($javaVersion.compareTo("1.6")>-1)
            @Override
#end
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = ${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)input);
                }
                else if (input instanceof Object[])
                {
                    result = ${valueObjectRef.transformationMethodName}((Object[])input);
                }
                return result;
            }
        };

    /**
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public final void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (@SuppressWarnings("rawtypes")
                final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove objects that are null or not of the correct instance
                if (!(iterator.next() instanceof $valueObjectRef.targetElement.fullyQualifiedName))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, this.$valueObjectRef.valueObjectToEntityTransformerName);
        }
    }

    private final org.apache.commons.collections.Transformer $valueObjectRef.valueObjectToEntityTransformerName =
        new org.apache.commons.collections.Transformer()
        {
#if ($javaVersion.compareTo("1.6")>-1)
            @Override
#end
            public Object transform(Object input)
            {
                return ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)input);
            }
        };

    /**
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
#set ($entityProperties = $entity.allProperties)
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#* *##foreach ($entityProperty in $entityProperties)
#*    *##if ($property.name.equals($entityProperty.name))
#*        *##set ($entityPropertyGetterValue = false)
#*        *##if ($entity.compositePrimaryKeyPresent && $entityProperty.identifier)
#*          *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.getPk().${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##else
#*          *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##end
#*        *##if ($entityPropertyGetterValue)
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##else
        // No conversion for target.${property.name} (can't convert source.${entityProperty.getterName}():${entityProperty.type.fullyQualifiedName} to $property.type.fullyQualifiedName)
#*        *##end
#*    *##end
#* *##end
#end
    }

    /**
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationMethodName}(${rootEntityType})
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $rootEntityType entity)
    {
        final $valueObjectRef.targetElement.fullyQualifiedName target = new ${valueObjectRef.targetElement.fullyQualifiedName}();
        this.${valueObjectRef.transformationMethodName}(entity, target);
        return target;
    }

    /**
     * @see ${rootDaoType}${esc.hash}${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName, boolean)
     */
#if ($javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
#set ($entityAttributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#foreach ($entityProperty in $entityAttributes)
#* *##if (!$entityProperty.readOnly)
#*    *##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*        *##if ($property.name.equals($entityProperty.name))
#*            *##set ($propertyGetterValue = false)
#*            *##set ($propertyGetterValue = $converter.typeConvert($property.type.fullyQualifiedName, "source.${property.getterName}()", $entityProperty.type.fullyQualifiedName))
#*            *##if ($propertyGetterValue)
        if (copyIfNull || source.${property.getterName}() != $property.type.javaNullString)
        {
            target.${entityProperty.setterName}($propertyGetterValue);
        }
#*            *##else
        // No conversion for target.${entityProperty.name} (can't convert source.${property.getterName}():${property.type.fullyQualifiedName} to $entityProperty.type.fullyQualifiedName)
#*            *##end
#*        *##end
#*    *##end
#**##end
#end
    }

    
    /**
     * Create or Update the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     */
#if ($enableAnnotations)
    @Override
#end
    public $entity.fullyQualifiedEntityName createOrUpdate($entity.fullyQualifiedEntityName $argumentName)
                throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if(${argumentName}.${entity.identifiers.get(0).getterName}() == null)
        {
#if ($entity.abstract)
            throw new RuntimeException("Abstract entity $entity.fullyQualifiedEntityName cannot be created.");
#else
            return ($entity.fullyQualifiedEntityName)this.create(${entity.daoNoTransformationConstantName},$argumentName);
#end
        }
        this.update($argumentName);
        return $argumentName;
    }

#end

    // For unit testing outside of container - persistence context not injected
    /**
     * @return the context
     */
    public jakarta.ejb.SessionContext getContext()
    {
        return this.context;
    }

    /**
     * @param contextIn the context to set
     */
    public void setContext(jakarta.ejb.SessionContext contextIn)
    {
        this.context = contextIn;
    }

    /**
     * @return the entityManager
     */
    public jakarta.persistence.EntityManager getEntityManager()
    {
        return this.entityManager;
    }

    /**
     * @param entityManagerIn the entityManager to set
     */
    public void setEntityManager(jakarta.persistence.EntityManager entityManagerIn)
    {
        this.entityManager = entityManagerIn;
    }

    public org.hibernate.Session getSession() {
        return this.entityManager.unwrap(org.hibernate.Session.class);
    }
}
#end
