#parse("templates/hibernate/ejb/HibernateSessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/ejb/HibernateSessionBean.vsl in andromda-hibernate-cartridge#if($dateTimeGeneratedText) on $hibernateUtils.date#end.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

#foreach ($serviceRef in $service.serviceReferences)
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end

/**
$service.getDocumentation(" * ")
 */
public abstract class ${service.name}Bean
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}BeanImpl
#end
    implements ${service.name}, java.io.Serializable
{

#if ($service.ejbStateful)
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

   protected $attributeTypeName $attribute.name;

   /**
$attribute.getDocumentation("     * ")
    */
    public $attributeTypeName ${attribute.getterName}()
    {
        return $attribute.name;
    }

    public void ${attribute.setterName}($attributeTypeName newValue)
    {
        $attribute.name = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------
#foreach ($operation in $service.operations)
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.typedArgumentList)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session")
#else
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session, ${parameterList}")
#end
#if ($operation.exceptionsPresent)
    protected abstract $operation.getterSetterReturnTypeName handle${stringUtils.capitalize(${operation.name})} (#if (!$stringUtils.isBlank($parameterList))$parameterList#end)
        throws $operation.exceptionList;
#else
    protected abstract $operation.getterSetterReturnTypeName handle${stringUtils.capitalize(${operation.name})} (#if (!$stringUtils.isBlank($parameterList))$parameterList#end);
#end

    /**
$operation.getDocumentation("     * ")
     */
    $operation.visibility $operation.getterSetterReturnTypeName $operation.signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.argumentNames)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "")
#else
#set ($parameters = "${parameterList}")
#end
##
#if ($operation.returnTypePresent)
        return handle${stringUtils.capitalize($operation.name)}(#if (!$stringUtils.isBlank($parameterList))$parameterList#end);
#else
        handle${stringUtils.capitalize($operation.name)}(#if (!$stringUtils.isBlank($parameterList))$parameterList#end);
#end
    }

#end
   
#if ($service.ejbStateful)
   // ---------------- create methods with separate attributes --------------------

    public void ejbCreate $service.operationCallFromAttributes
           throws jakarta.ejb.CreateException
    {
#foreach ($attribute in $service.attributes)
        ${attribute.setterName} (${attribute.name});
#end
    }

    public void ejbPostCreate $service.operationCallFromAttributes
           throws jakarta.ejb.CreateException
    {
    }

#end 
#foreach ( $serviceRef in $service.serviceReferences )
   #set ($service = $serviceRef.targetElement)
   #set ($homeInterfaceName = "${service.name}Home")
   /**
    * This is to get the reference to the ${service.name} bean.
    * Obtains local home interface from default initial context
    * @return Local home interface for ${service.name}. Lookup using bean ref name.
    */
    protected static $homeInterfaceName get${homeInterfaceName}() throws NamingException
    {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext();
        try
        {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            $homeInterfaceName home = (${homeInterfaceName}) initialContext.lookup("java:comp/env/ejb/${service.name}BeanRef");
            return home;
        }
        finally
        {
            initialContext.close();
        }
    }

#end
    // ---------------- Daos ---------------
#foreach($entityRef in $service.entityReferences)

    @jakarta.inject.Inject
    protected $entityRef.targetElement.fullyQualifiedDaoImplementationName $entityRef.daoName; 

    /**
     * Sets the reference to <code>$entityRef.name</code>'s DAO.
     * @param ${entityRef.daoName}In
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoImplementationName ${entityRef.daoName}In)
    {
        this.$entityRef.daoName = ${entityRef.daoName}In;
    }

    /**
     * Gets the reference to <code>$entityRef.name</code>'s DAO.
     * @return $entityRef.daoName
     */
    protected $entityRef.targetElement.fullyQualifiedDaoImplementationName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
}