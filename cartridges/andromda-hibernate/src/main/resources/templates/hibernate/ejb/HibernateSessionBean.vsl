#parse("templates/hibernate/ejb/HibernateSessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/ejb/HibernateSessionBean.vsl in andromda-hibernate-cartridge#if($dateTimeGeneratedText) on $hibernateUtils.date#end.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import jakarta.ejb.EJBException;
import javax.naming.NamingException;

import ${hibernateUtils.hibernatePackage}.HibernateException;
import ${hibernateUtils.hibernatePackage}.Session;
import ${hibernateUtils.hibernatePackage}.SessionFactory;

import ${customTypesPackage}.HibernateUtils;

#foreach ($serviceRef in $service.serviceReferences)
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end

/**
$service.getDocumentation(" * ")
 */
public abstract class ${service.name}Bean
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}BeanImpl
#end
    implements jakarta.ejb.SessionBean
{

#if ($service.ejbStateful)
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

   protected $attributeTypeName $attribute.name;

   /**
$attribute.getDocumentation("     * ")
    */
    public $attributeTypeName ${attribute.getterName}()
    {
        return $attribute.name;
    }

    public void ${attribute.setterName}($attributeTypeName newValue)
    {
        $attribute.name = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------
#foreach ($operation in $service.operations)
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.typedArgumentList)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session")
#else
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session, ${parameterList}")
#end
#if ($operation.exceptionsPresent)
    protected abstract $operation.getterSetterReturnTypeName handle${stringUtils.capitalize(${operation.name})} ($parameters)
        throws $operation.exceptionList;
#else
    protected abstract $operation.getterSetterReturnTypeName handle${stringUtils.capitalize(${operation.name})} ($parameters);
#end

    /**
$operation.getDocumentation("     * ")
     */
    $operation.visibility $operation.getterSetterReturnTypeName $operation.signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        Session session = null;
        try
        {
            session = getSession();
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.argumentNames)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "session")
#else
#set ($parameters = "session, ${parameterList}")
#end
##
#if ($operation.returnTypePresent)
            return handle${stringUtils.capitalize($operation.name)}($parameters);
#else
            handle${stringUtils.capitalize($operation.name)}($parameters);
#end
        }
#foreach ( $exception in $operation.exceptions )
        catch ($exception.fullyQualifiedName e)
        {
           this.ctx.setRollbackOnly();
           throw e;
        }
#end
        catch (Throwable th)
        {
            throw new EJBException("${service.name}Bean.${operation.name} ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
            {
                try
                {
                    if (!this.ctx.getRollbackOnly())
                    {
                        session.flush();
                    }
                    session.close();
                }
                catch (HibernateException he)
                {
                    he.printStackTrace();
                }
            }
        }
    }

#end
   // ---------------- create methods -------------------------

    public void ejbCreate ()
           throws jakarta.ejb.CreateException
    {
    }

    public void ejbPostCreate ()
           throws jakarta.ejb.CreateException
    {
    }

#if ($service.ejbStateful)
   // ---------------- create methods with separate attributes --------------------

    public void ejbCreate $service.operationCallFromAttributes
           throws jakarta.ejb.CreateException
    {
#foreach ($attribute in $service.attributes)
        ${attribute.setterName} (${attribute.name});
#end
    }

    public void ejbPostCreate $service.operationCallFromAttributes
           throws jakarta.ejb.CreateException
    {
    }

#end
   // ---------------- Hibernate helpers -------------------------

    protected jakarta.ejb.SessionContext ctx = null;

    private static SessionFactory sessionFactory = null;

    public void setSessionContext( jakarta.ejb.SessionContext ctx )
    {
        this.ctx = ctx;
    }

    private SessionFactory getSessionFactory() throws NamingException
    {
        if(sessionFactory == null)
        {
            sessionFactory = HibernateUtils.getSessionFactory();
        }
        return sessionFactory;
    }

    private Session getSession() throws HibernateException, NamingException
    {
        return this.getSessionFactory().openSession();
    }

    // ---------------- accessor methods for (session!) bean references ---------------
#foreach ( $serviceRef in $service.serviceReferences )
   #set ($service = $serviceRef.targetElement)
   #set ($homeInterfaceName = "${service.name}Home")
   /**
    * This is to get the reference to the ${service.name} bean.
    * Obtains local home interface from default initial context
    * @return Local home interface for ${service.name}. Lookup using bean ref name.
    */
    protected static $homeInterfaceName get${homeInterfaceName}() throws NamingException
    {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext();
        try
        {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            $homeInterfaceName home = (${homeInterfaceName}) initialContext.lookup("java:comp/env/ejb/${service.name}BeanRef");
            return home;
        }
        finally
        {
            initialContext.close();
        }
    }

#end
    public void ejbRemove()
    {
    }

    public void ejbPassivate()
    {
    }

    public void ejbActivate()
    {
    }
}