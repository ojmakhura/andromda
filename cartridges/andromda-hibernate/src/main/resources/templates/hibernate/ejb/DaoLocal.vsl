#if ($umlUtils.shouldOutput($entity))
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by DaoLocal.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
#set ($generatedFile = "${entity.packagePath}/${entity.daoName}.java")
#if ($enableTemplating)
#**##set ($entityCollectionType = "java.util.Collection<${entity.fullyQualifiedEntityName}>")
#else
#**##set ($entityCollectionType = "java.util.Collection")
#end
#if ($stringUtils.isNotBlank($entity.packageName))
package ${entity.packageName};
#end

#set ($superclass = $entity.generalization)
#set ($daoInheritance = $superclass && $daoInheritanceEnabled)
#if ($daoInheritance)
#**##set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#else
#**##set ($rootEntityType = $entity.fullyQualifiedEntityName)
#end
/**
 * @see $entity.fullyQualifiedEntityName
 */
@jakarta.ejb.Local
public interface $entity.daoName
#if ($daoInheritance)
    extends $superclass.fullyQualifiedDaoName
#end
{
#if (!$daoInheritance)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes no transformation will occur.
     */
    public static final int $entity.daoNoTransformationConstantName = 0;

#end
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public static final int $valueObjectRef.transformationConstantName = $valueObjectRef.transformationConstantValue;

    /**
     * Copies the fields of the specified entity to the target value object.  This method is similar to
     * ${valueObjectRef.transformationMethodName}(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param sourceEntity
     * @param targetVO
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName sourceEntity,
        $valueObjectRef.targetElement.fullyQualifiedName targetVO);

    /**
     * Converts this DAO's entity to an object of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     * @param entity
     * @return $valueObjectRef.targetElement.fullyQualifiedName
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     * @param entities
     */
    public void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection entities);

    /**
     * Copies the fields of {@link $valueObjectRef.targetElement.fullyQualifiedName} to the specified entity.
     * @param sourceVO
     * @param targetEntity
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     *        it will be copied regardless of its value.
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName sourceVO,
        $entity.fullyQualifiedEntityName targetEntity,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this DAO's entity.
     * @param $stringUtils.uncapitalize($valueObjectRef.name)
     * @return $entity.fullyQualifiedEntityName
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name));

    /**
     * Converts a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this
     * DAO's entity.
     * @param instances
     */
    public void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection instances);

#end
#set ($identifiers = $entity.identifiers)
##set ($identifiers = $entityUtils.getIdentifierAttributes($entity, true))
#if (!$entity.identifiers.empty)
#set ($identifier = $identifiers.iterator().next())
#end
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
##if ($entity.compositePrimaryKeyPresent)
#foreach ($identifier in $identifiers)
     * @param $identifier.name $identifier.type.fullyQualifiedName identifier part of the composite PK of the entity to load.
#end
##else
##     * @param $identifier.name the identifier of the entity to load.
##end
     * @return $rootEntityType
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $rootEntityType load(#foreach ($identifier in $identifiers)$identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $identifiers.size()), #end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     *   Does the same thing as {@link ${esc.hash}load(#foreach ($identifier in $identifiers)$identifier.type.fullyQualifiedName#if ($velocityCount != $identifiers.size()), #end#end)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     *   optionally transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     *
     * @param transform int transformation flag
#foreach ($identifier in $identifiers)
     * @param $identifier.name $identifier.type.fullyQualifiedName identifier part of the composite PK of the entity to load.
#end
     * @return either the entity or the object transformed from the entity.
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public Object load(int transform,#foreach ($identifier in $identifiers) $identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $identifiers.size()),#end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Loads all entities of type {@link ${entity.fullyQualifiedEntityName}}.
     *
     * @return the loaded entities.
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $entityCollectionType loadAll()
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     *   Does the same thing as {@link ${esc.hash}loadAll()} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     *
     * @param transform the flag indicating what transformation to use.
     * @return Collection of the loaded entities.
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
#if ($enableTemplating)
    @SuppressWarnings("rawtypes")
#end
    public java.util.Collection loadAll(final int transform)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)

     /**
      * Create or Update the <code>$argumentName</code> instance in the persistent store.
      * @param $argumentName
      * @return $rootEntityType
      */
     public $rootEntityType createOrUpdate($entity.fullyQualifiedEntityName $argumentName)
               throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     * @param $argumentName
     * @return $rootEntityType
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     *   Does the same thing as {@link ${esc.hash}create($entity.fullyQualifiedEntityName)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     *
     * @param transform
     * @param $argumentName
     * @return Object
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public Object create(int transform, $entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Creates a new instance of $entity.fullyQualifiedEntityName and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of $entity.fullyQualifiedEntityName
     *        instances to create.
     * @return the created instances. $entityCollectionType
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $entityCollectionType create($entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     *   Does the same thing as {@link ${esc.hash}create($entity.fullyQualifiedEntityName)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entities (into value objects for example).  By default, transformation does
     *   not occur.
     *
     * @param transform
     * @param entities
     * @return the created instances. Collection
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
#if ($enableTemplating)
    @SuppressWarnings({"rawtypes"})
#end
    public java.util.Collection create(int transform, $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

#**##if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#*  *##set ($attributes = $entity.getInstanceAttributes(true, $entity.usingAssignedIdentifier))
#*  *##if (!$attributes.empty)
    /**
     *   Creates a new <code>$entity.fullyQualifiedEntityName</code>
     *   instance from <strong>all</strong> attributes and adds it to
     *   the persistent store.
#foreach($attribute in $attributes)
     * @param $attribute.name
#end
     * @return the created instances. $rootEntityType
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $rootEntityType create(
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end $attribute.name#if($velocityCount != $attributes.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};#end

#*    *##end

    /**
     *   Does the same thing as {@link ${esc.hash}create($entity.getInstanceAttributeTypeList(true,false))} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     *
     * @param transform
#foreach($attribute in $attributes)
     * @param $attribute.name
#end
     * @return the created instances. Object
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public Object create(
        int transform,
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.getterSetterTypeName}#end $attribute.name#if($velocityCount != $attributes.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};#end

#*    *##end

#*  *##end
#*  *##set ($requiredProperties = $entity.getRequiredProperties(true,$entity.usingAssignedIdentifier))
#*  *##if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,$entity.usingAssignedIdentifier).size() != $requiredProperties.size())
    /**
     *  Creates a new <code>$entity.fullyQualifiedEntityName</code>
     *  instance from only <strong>required</strong> properties (attributes
     *  and association ends) and adds it to the persistent store.
     *
#foreach($property in $requiredProperties)
     * @param $property.name
#end
     * @return the created instance. $rootEntityType
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public $rootEntityType create(
#*    *##foreach($property in $requiredProperties)
        #if ($stringUtils.isNotBlank($property.lobType))${property.lobType}#else$property.getterSetterTypeName#end $property.name#if($velocityCount != $requiredProperties.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};#end

#*    *##end

    /**
     *   Does the same thing as {@link ${esc.hash}create($entity.getRequiredAttributeTypeList(true,false))} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     *   the returned entity will <strong>NOT</strong be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     *
     * @param transform
#foreach($property in $requiredProperties)
     * @param $property.name
#end
     * @return the created instance. Object
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public Object create(
        int transform,
#*    *##foreach($property in $requiredProperties)
        #if ($stringUtils.isNotBlank($property.lobType))${property.lobType}#else$property.getterSetterTypeName#end $property.name#if($velocityCount != $requiredProperties.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};#end

#*    *##end
#*  *##end

#**##end
#end
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public void update($entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
     * @param $argumentName
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName having the given
     * <code>identifier</code> from the persistent store.
#foreach($identifier in $identifiers)
     * @param $identifier.name
#end
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public void remove(#foreach ($identifier in $identifiers)$identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $identifiers.size()), #end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

    /**
     * Removes all entities in the given <code>entities<code> collection.
     * @param entities
     * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
     */
    public void remove($entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName};

## #foreach ($operation in $entity.queryOperations)
## #**##set ($returnType = $operation.getterSetterReturnTypeName)
##     /**
## $operation.getDocumentation("     * ")
## #foreach($argument in $operation.arguments)
##      * @param $argument.name
## #end
## #if ($operation.returnTypePresent)
##      * @return $operation.getterSetterReturnTypeName
## #end
## #if ($operation.exceptionsPresent)
##      * @throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
## #else
##      * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
## #end
##      */
##     $operation.visibility $operation.getterSetterReturnTypeName $operation.signature
## #**##if ($operation.exceptionsPresent)
##         throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName};
## #**##else
##         throws ${entity.fullyQualifiedDaoDefaultExceptionName};
## #end

##     /**
##      * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
##      * additional argument called <code>queryString</code>.
##      * @param queryString String allows you to override the query string defined in {@link ${esc.hash}${operation.getSignature(false)}}
## #foreach($argument in $operation.arguments)
##      * @param $argument.name
## #end
## #if ($operation.returnTypePresent)
##      * @return $returnType
## #end
## #if ($operation.exceptionsPresent)
##      * @throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
## #else
##      * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
## #end
##      */
##     $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
## #if ($operation.exceptionsPresent)
##         throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName};
## #else
##         throws ${entity.fullyQualifiedDaoDefaultExceptionName};
## #end

## #**##if ($operation.returnTypePresent)
## #*  *##if ($operation.returnType.setType)
## #set ($transformReturn = "java.util.Set")
## #*  *##elseif ($operation.returnType.collectionType)
## #set ($transformReturn = "java.util.List")
## #*  *##else
## #set ($transformReturn = "Object")
## #*  *##end
## #**##end
##     /**
##      * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
##      * additional flag called <code>transform</code>.  If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
##      * finder results will <strong>NOT</strong> be transformed during retrieval.
##      * If this flag is any of the other constants defined here
##      * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
##      * transform the entities (into value objects for example).  By default, transformation does
##      * not occur.
##      * @param transform int Transform finder results during retrieval
## #foreach($argument in $operation.arguments)
##      * @param $argument.name
## #end
## #if ($operation.returnTypePresent)
##      * @return $transformReturn
## #end
## #if ($operation.exceptionsPresent)
##      * @throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
## #else
##      * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
## #end
##      */
##     $operation.visibility#if ($operation.returnTypePresent) $transformReturn#else void#end ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
## #**##if ($operation.exceptionsPresent)
##         throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName};
## #**##else
##         throws ${entity.fullyQualifiedDaoDefaultExceptionName};
## #**##end

##     /**
##      * Does the same thing as {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
##      * additional argument called <code>queryString</code>.  This <code>queryString</code>
##      * argument allows you to override the query string defined in {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)}.
##      * @param transform int Transform finder results during retrieval
##      * @param queryString String allows you to override the query string defined in {@link ${esc.hash}${operation.getSignature(false)}}
## #foreach($argument in $operation.arguments)
##      * @param $argument.name
## #end
## #if ($operation.returnTypePresent)
##      * @return $transformReturn
## #end
## #if ($operation.exceptionsPresent)
##      * @throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
## #else
##      * @throws ${entity.fullyQualifiedDaoDefaultExceptionName}
## #end
##      */
##     $operation.visibility#if ($operation.returnTypePresent) $transformReturn#else void#end ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
## #**##if ($operation.exceptionsPresent)
##         throws $operation.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName};
## #**##else
##         throws ${entity.fullyQualifiedDaoDefaultExceptionName};
## #**##end

## #end
#foreach ($operation in $entity.queryOperations)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($enableTemplating && $operation.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#if(!$operation.criteriaFinder)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link ${esc.hash}${operation.getSignature(false)}}.
     * </p>
     * @param queryString
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
#if($enableTemplating)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($operation.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#if ($operation.returnType.collectionType)
#if($enableTemplating)
#set ($returnType = "${operation.getterSetterReturnTypeName}<?>")
#end
#elseif ($operation.many)
#set ($returnType = "$operation.getterSetterReturnTypeName.substring(0,$operation.getterSetterReturnTypeName.indexOf('<'))<?>")
#end

#else
#set ($returnType = "Object")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link ${esc.hash}${operation.name}(int#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)}.
     * </p>
     * @param transform
     * @param queryString
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int, String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString, int pageNumber, int pageSize#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#end
#else
#if ($operation.returnType.collectionType)
#set ($returnType = "${operation.getterSetterReturnTypeName}#if($enableTemplating)<?>#end")
#elseif ($operation.many)
#set ($returnType = "$operation.getterSetterReturnTypeName.substring(0,$operation.getterSetterReturnTypeName.indexOf('<'))<?>")
#else
#set ($returnType = "Object")
#end
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);

#end
#if ($operation.returnType.collectionType || $operation.many)
    /**
     * <p>
     * Does the same thing as {@link ${esc.hash}${operation.name}(int, String#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.getDocumentation("")
#end
     * @return $returnType
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(final int transform, final int pageNumber, final int pageSize#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(final int transform, final int pageNumber, final int pageSize#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);
#end

#end
#end
#end
#foreach ($operation in $entity.daoBusinessOperations)
#**##set ($returnType = $operation.getterSetterReturnTypeName)
    /**
$operation.getDocumentation("     * ")
#foreach($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $operation.getterSetterReturnTypeName
#end
#foreach($exception in $operation.exceptionList)
     * @throws $exception.fullyQualifiedName
#end
     */
#**##if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#**##else
    $operation.visibility $returnType $operation.signature;
#**##end

#end
}
#end
