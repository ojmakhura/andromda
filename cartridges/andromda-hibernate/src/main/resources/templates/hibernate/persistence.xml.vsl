#if(!$hibernateUtils.version2)
<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by persistence.xml.vsl in andromda-hibernate-cartridge on 08/30/2021 20:35:28+0200.
-->
<persistence xmlns="https://jakarta.ee/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd"
             version="3.0">
    <persistence-unit#if($entityManagerName) name="$entityManagerName"#end#if ($stringUtils.isNotBlank(${dataSource})) transaction-type="JTA"#end>
        <provider>${hibernatePersistenceProvider}</provider>
#if ($stringUtils.isNotBlank(${dataSource}))
        <jta-data-source>${dataSource}</jta-data-source>
#end
#if ($stringUtils.isNotBlank($jarFiles))
#set ($jars = $stringUtils.split($jarFiles,','))
#foreach ($jar in $jars)
#if ($stringUtils.isNotBlank($jar))
        <jar-file>${jar}</jar-file>
#end
#end
#end
#if ($hibernateEntityAnnotations)
    #set ($entityList = $entityUtils.sortEntities($entities, true))
        <!-- Entity list needed for testing in J2SE environment entities=$entities.size()-->
#foreach ($entity in $entityList)
#if ($umlUtils.shouldOutput($entity))
        <class>$entity.fullyQualifiedName</class>
#if ($entity.compositePrimaryKeyPresent)
        <class>$entity.fullyQualifiedEntityCompositePrimaryKeyName</class>
#end
#end
#end
#end
        <properties>
#if($stringUtils.isNotBlank($hibernateTransactionManager))
            <property name="hibernate.transaction.jta.platform" value="${hibernateTransactionManager}"/>
#end
#if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
            <property name="hibernate.hbm2ddl.auto" value="${hibernateHbm2DDLAuto}"/>
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
            <property name="hibernate.show_sql" value="${hibernateShowSql}"/>
            <property name="hibernate.format_sql" value="${hibernateShowSql}"/>
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
            <property name="hibernate.dialect" value="${hibernateDialect}"/>
#end
## Use the new Identifier generator for Hibernate 3.x, if using annotation mappings
            <property name="hibernate.id.new_generator_mappings" value="true"/>
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
            <property name="hibernate.max_fetch_depth" value="$hibernateMaxFetchDepth"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
            <property name="hibernate.jdbc.fetch_size" value="$hibernateJdbcFetchSize"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
            <property name="hibernate.jdbc.batch_size" value="$hibernateJdbcBatchSize"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
            <property name="hibernate.jdbc.use_scrollable_resultset" value="$hibernateJdbcUseScrollableResultSet"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
            <property name="hibernate.jdbc.use_streams_for_binary" value="$hibernateJdbcUseStreamsForBinary"/>
#end
#if ($hibernateEnableCache.equalsIgnoreCase("true"))
#if ($stringUtils.isNotBlank($hibernateCacheProvider))
            <property name="hibernate.cache.provider_class" value="${hibernateCacheProvider}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTreecacheMbeanObject))
            <property name="hibernate.treecache.mbean.object_name" value="${hibernateTreecacheMbeanObject}"/>
#end
#end
#if ($hibernateEnableCache.equalsIgnoreCase("true"))
#foreach ($entity in $entities)
#foreach ($finder in $entity.getQueryOperations(true))
#if ($finder.useQueryCache)
#set ($hibernateEnableQueryCache = "true")
#end
#end
#end
#if ($hibernateEnableQueryCache.equalsIgnoreCase("true"))
            <property name="hibernate.cache.use_query_cache" value="${hibernateEnableQueryCache}"/>
#end
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookupClass))
            <property name="hibernate.transaction.manager_lookup_class" value="${hibernateTransactionManagerLookupClass}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionFlushBeforeCompletion))
            <property name="hibernate.transaction.flush_before_completion" value="${hibernateTransactionFlushBeforeCompletion}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionAutoCloseSession))
            <property name="hibernate.transaction.auto_close_session" value="${hibernateTransactionAutoCloseSession}"/>
#end
        </properties>
    </persistence-unit>
#foreach ($persistenceContext in $persistenceContexts)
    <persistence-unit name="${persistenceContext.unitName}">
#if ($stringUtils.isNotBlank(${persistenceContext.datasource}))
        <jta-data-source>${persistenceContext.datasource}</jta-data-source>
#end
        <properties>
#if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
            <property name="hibernate.hbm2ddl.auto" value="${hibernateHbm2DDLAuto}"/>
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
            <property name="hibernate.show_sql" value="${hibernateShowSql}"/>
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
            <property name="hibernate.dialect" value="${hibernateDialect}"/>
#end
## Use the new Identifier generator for Hibernate 3.x, if using annotation mappings
            <property name="hibernate.id.new_generator_mappings" value="true"/>
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
            <property name="hibernate.max_fetch_depth" value="$hibernateMaxFetchDepth"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
            <property name="hibernate.jdbc.fetch_size" value="$hibernateJdbcFetchSize"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
            <property name="hibernate.jdbc.batch_size" value="$hibernateJdbcBatchSize"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
            <property name="hibernate.jdbc.use_scrollable_resultset" value="$hibernateJdbcUseScrollableResultSet"/>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
            <property name="hibernate.jdbc.use_streams_for_binary" value="$hibernateJdbcUseStreamsForBinary"/>
#end
#if ($hibernateEnableCache.equalsIgnoreCase("true"))
#if ($stringUtils.isNotBlank($hibernateCacheProvider))
            <property name="hibernate.cache.provider_class" value="${hibernateCacheProvider}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTreecacheMbeanObject))
            <property name="hibernate.treecache.mbean.object_name" value="${hibernateTreecacheMbeanObject}"/>
#end
#if ($hibernateEnableQueryCache.equalsIgnoreCase("true"))
            <property name="hibernate.cache.use_query_cache" value="${hibernateEnableQueryCache}"/>
#end
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookupClass))
            <property name="hibernate.transaction.manager_lookup_class" value="${hibernateTransactionManagerLookupClass}"/>
#end
#if($stringUtils.isNotBlank($hibernateTransactionManager))
            <property name="hibernate.transaction.jta.platform" value="${hibernateTransactionManager}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionFlushBeforeCompletion))
            <property name="hibernate.transaction.flush_before_completion" value="${hibernateTransactionFlushBeforeCompletion}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionAutoCloseSession))
            <property name="hibernate.transaction.auto_close_session" value="${hibernateTransactionAutoCloseSession}"/>
#end
            <!-- Must add hibernate3 module: http://planet.jboss.org/post/using_a_different_persistence_provider_with_as_7_0_1
            <property name="hibernate.ejb.resource_scanner" value="org.jboss.as.jpa.hibernate3.HibernateAnnotationScanner"/>-->
            <property name="jboss.as.jpa.providerModule" value="org.hibernate:3"/>
        </properties>
    </persistence-unit>
#end
</persistence>
#end