// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/usertypes/HibernateStringClobType.vsl in andromda-hibernate-cartridge#if($dateTimeGeneratedText) on $hibernateUtils.date#end.
//
#set ($className = "HibernateStringClobType")
#set ($generatedFile = "$stringUtils.replace($userTypesPackage, '.', '/')/${className}.java")
#if($hibernateUtils.version5)
#set ($sessionClass = "SharedSessionContractImplementor")
#else
#set ($sessionClass = "SessionImplementor")
#end
#if($hibernateUtils.version4 || $hibernateUtils.version5 || $hibernateUtils.version6)
#set ($isVersion4or5 = true)
#else
#set ($isVersion4or5 = false)
#end

package $userTypesPackage;

import java.io.IOException;
import java.io.Reader;
import java.io.Serializable;
import java.io.StringReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import ${hibernateUtils.hibernatePackage}.HibernateException;
import ${hibernateUtils.hibernateUserTypePackage}.UserType;

/**
 * <p>
 * A hibernate user type which converts a Clob into a String and back again.
 * </p>
 */
public class $className
    implements UserType, Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -9186242984664002079L;

##     /**
##      * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}sqlTypes()
##      */
## #if ($enableAnnotations)
##     @Override
## #end
##     public int[] sqlTypes()
##     {
##         return new int[] {Types.CLOB};
##     }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}returnedClass()
     */
#if ($enableAnnotations)
    @Override
#end
    public Class#if($enableTemplating)<?>#end returnedClass()
    {
        return String.class;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}equals(Object, Object)
     */
#if ($enableAnnotations)
    @Override
#end
    public boolean equals(
        Object x,
        Object y)
        throws HibernateException
    {
        boolean equal = false;
        if (x == y)
        {
            equal = true;
        }
        else if (x == null || y == null)
        {
            equal = false;
        }
        else if (!(x instanceof String) || !(y instanceof String))
        {
            equal = false;
        }
        else
        {
            equal = ((String)x).equals(y);
        }
        return equal;
    }

    /**
     * @param resultSet
     * @param names
     * @param owner
     * @return Clob
     * @throws HibernateException
     * @throws SQLException
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeGet(java.sql.ResultSet, String[]#if($isVersion4or5), $sessionClass#end, Object)
     */
#if ($enableAnnotations && $hibernateUtils.version3)
    @Override
#end
    public Object nullSafeGet(
        ResultSet resultSet,
        String[] names,
        Object owner)
        throws HibernateException, SQLException
    {
        final StringBuilder buffer = new StringBuilder();
        try
        {
            //First we get the stream
            Reader inputStream = resultSet.getCharacterStream(names[0]);
            if (inputStream == null)
            {
                return null;
            }
            char[] buf = new char[1024];
            int read = -1;

            while ((read = inputStream.read(buf)) > 0)
            {
                buffer.append(new String(
                        buf,
                        0,
                        read));
            }
            inputStream.close();
        }
        catch (IOException exception)
        {
            throw new HibernateException("Unable to read from resultset", exception);
        }
        return buffer.toString();
    }

    /**
     * @param preparedStatement
     * @param data
     * @param index
     * @throws HibernateException
     * @throws SQLException
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeSet(java.sql.PreparedStatement, Object, int#if($isVersion4or5), $sessionClass#end)
     */
#if ($enableAnnotations && $hibernateUtils.version3)
    @Override
#end
    public void nullSafeSet(
        PreparedStatement preparedStatement,
        Object data,
        int index)
        throws HibernateException, SQLException
    {
        if (data != null)
        {
            StringReader r = new StringReader((String)data);
            preparedStatement.setCharacterStream(
                index,
                r,
                ((String)data).length());
        }
        else
        {
            preparedStatement.setNull(
                index,
                Types.CLOB);
        }
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeGet(java.sql.ResultSet, String[], $sessionClass, Object)
     */
#if ($enableAnnotations && $isVersion4or5)
    @Override
#end
    public Object nullSafeGet(ResultSet resultSet, String[] names,
        org.hibernate.engine#if($isVersion4or5).spi#end.$sessionClass session, Object owner) throws HibernateException, SQLException
    {
        return this.nullSafeGet(resultSet, names, owner);
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeSet(java.sql.PreparedStatement, Object, int#if($isVersion4or5), $sessionClass#end)
     */
#if ($enableAnnotations && $isVersion4or5)
    @Override
#end
    public void nullSafeSet(
        PreparedStatement preparedStatement,
        Object data,
        int index,
        org.hibernate.engine#if($isVersion4or5).spi#end.$sessionClass session)
        throws HibernateException, SQLException
    {
        this.nullSafeSet(preparedStatement, data, index);
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}deepCopy(Object)
     */
#if ($enableAnnotations)
    @Override
#end
    public Object deepCopy(Object value)
        throws HibernateException
    {
        return value;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}isMutable()
     */
#if ($enableAnnotations)
    @Override
#end
    public boolean isMutable()
    {
        return false;
    }
#if ($hibernateUtils.version3 || $hibernateUtils.version4 || $hibernateUtils.version5)

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}replace(Object original, Object target, Object owner)
     */
#if ($enableAnnotations)
    @Override
#end
    public Object replace(Object original, Object target, Object owner)
    {
        return this.deepCopy(original);
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}assemble(java.io.Serializable cached, Object owner)
     */
#if ($enableAnnotations)
    @Override
#end
    public Object assemble(java.io.Serializable cached, Object owner)
    {
        return this.deepCopy(cached);
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}disassemble(Object value)
     */
#if ($enableAnnotations)
    @Override
#end
     public java.io.Serializable disassemble(Object value)
     {
        return (java.io.Serializable)value;
     }

     /**
      * @param x
      * @return x.hashCode()
      * @see Object${esc.hash}hashCode()
      */
#if ($enableAnnotations)
    @Override
#end
     public int hashCode(Object x)
     {
        return x.hashCode();
     }
#end
}
