#set ($generatedFile = $metafacade.logicFile)
// license-header java merge-point
//
// Attention: generated code (by MetafacadeLogic.vsl) - do not modify! ================
//
#if ($stringUtils.isNotBlank($metafacade.logicPackageName))
package $metafacade.logicPackageName;
#set ($pkg = "${metafacade.logicPackageName}.")
#else
#set ($pkg = "")
#end
## calculate metaclass and superMetafacade
#if ($metafacade.metaclassDirectDependency)
#set ($metaclassTypeName = $metafacade.metaclass.fullyQualifiedName.replace($pkg, ""))
#else
#if ($metafacade.constructorRequiresMetaclassCast)
#set ($constructorRequiresMetaclassCast = true)
#end
#set ($metaclassTypeName = "Object")
#end
#set ($superMetafacade = $metafacade.generalization)

import java.util.Collection;
#if (!$superMetafacade || $metafacade.requiresInheritanceDelegatation)
import org.andromda.core.common.Introspector;
import org.andromda.core.metafacade.MetafacadeBase;
#end
#if ($metafacade.requiresInheritanceDelegatation)
import org.andromda.core.metafacade.MetafacadeFactory;
#end
import org.andromda.core.metafacade.ModelValidationMessage;
#if (!$metafacade.navigableConnectingEnds.empty || !$metafacade.getConstraints("inv").empty)
import org.apache.log4j.Logger;
#end

/**
$metafacade.getDocumentation(" * ")
 * MetafacadeLogic for $metafacade.fullyQualifiedName.replace($pkg, "")
 *
 * @see $metafacade.fullyQualifiedName.replace($pkg, "")
 */
public abstract class $metafacade.logicName
#if ($superMetafacade && !$metafacade.requiresInheritanceDelegatation)
    extends $superMetafacade.fullyQualifiedLogicImplName.replace($pkg, "")
#else
    extends MetafacadeBase
#end
    implements $metafacade.fullyQualifiedName.replace($pkg, "")
{
    /**
     * The underlying UML object
     * @see $metaclassTypeName
     */
    protected $metaclassTypeName metaObject;

    /** Create Metafacade implementation instance using the MetafacadeFactory from the context
     * @param metaObjectIn
     * @param context
     */
    protected ${metafacade.logicName}($metaclassTypeName metaObjectIn, String context)
    {
#if ($metafacade.requiresInheritanceDelegatation)
        super(metaObjectIn, getContext(context));
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.name} =
           ($link.parent.fullyQualifiedName)
            MetafacadeFactory.getInstance().createFacadeImpl(
                    "$link.parent.fullyQualifiedName",
                    metaObjectIn,
                    getContext(context));
#end
#else
#set ($metaObjectArgument = "metaObjectIn")
#if ($constructorRequiresMetaclassCast)
#set ($metaObjectArgument = "($metafacade.metaclass.fullyQualifiedName)metaObjectIn")
#end
        super($metaObjectArgument, getContext(context));
#end
        this.metaObject = metaObjectIn;
    }

#if (!$metafacade.navigableConnectingEnds.empty || !$metafacade.getConstraints("inv").empty)
    /**
     * The logger instance.
     */
    private static final Logger logger = Logger.getLogger(${metafacade.logicName}.class);

#end
    /**
     * Gets the context for this metafacade logic instance.
     * @param context String. Set to $metafacade.fullyQualifiedName.replace($pkg, "") if null
     * @return context String
     */
    private static String getContext(String context)
    {
        if (context == null)
        {
            context = "$metafacade.fullyQualifiedName";
        }
        return context;
    }

#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
    private $link.parent.fullyQualifiedName $link.name;
#set ($initializedCheck = "${link.name}Initialized")
    private boolean $initializedCheck = false;

    /**
     * Gets the $link.parent.fullyQualifiedName parent instance.
     * @return this.${link.name} $link.parent.fullyQualifiedName
     */
    $link.getterNameVisibility $link.parent.fullyQualifiedName ${link.getterName}()
    {
        if (!this.$initializedCheck)
        {
            ((MetafacadeBase)this.${link.name}).setMetafacadeContext(this.getMetafacadeContext());
            this.$initializedCheck = true;
        }
        return this.${link.name};
    }

#end
#end
    /** Reset context only for non-root metafacades
     * @param context
#if ($metafacade.requiresInheritanceDelegatation)
     * @see org.andromda.core.metafacade.MetafacadeBase${esc.hash}resetMetafacadeContext(String context)
#end
     */
    @Override
    public void resetMetafacadeContext(String context)
    {
        if (!this.contextRoot) // reset context only for non-root metafacades
        {
            context = getContext(context);  // to have same value as in original constructor call
            setMetafacadeContext (context);
#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
#set ($initializedCheck = "${link.name}Initialized")
            if (this.$initializedCheck)
            {
                ((MetafacadeBase)this.${link.name}).resetMetafacadeContext(context);
            }
#end
#end
        }
    }

    /**
     * @return boolean true always
     * @see $metafacade.fullyQualifiedName.replace($pkg, "")
     */
    public boolean is${metafacade.name}MetaType()
    {
        return true;
    }

#if (!$metafacade.attributes.empty)
    // --------------- attributes ---------------------

#foreach ($attribute in $metafacade.attributes)
##
##    // $attribute.name $attribute.getterSetterTypeName $attribute.type.fullyQualifiedName $attribute.many $attribute
#set ($memberTypeName = $attribute.getterSetterTypeName)
#set ($memberType = $attribute.type)
#set ($methodName = $attribute.getterName)
#set ($memberName = "${attribute.name}${velocityCount}a")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = "")
#set ($allPreConstraints=$attribute.getConstraints("pre"))
#set ($allPostConstraints=$attribute.getConstraints("post"))
   /**
    * @see ${metafacade.fullyQualifiedName}${esc.hash}${methodName}()
    * @return $memberTypeName
    */
## Need to associate metafacade type to shielded element type for underlying handleCollection return type
## Assumes metatype is a simple type, since it is an attribute, not an association. Must be modeled correctly in UML2 where they are the same UML2 Property
    protected abstract $memberTypeName ${attribute.implementationOperationName}($typedArgumentList);
#if (!$allPreConstraints.empty)
#set ($handleMethodPreCondition = "${attribute.implementationOperationName}${velocityCount}aPreCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPreCondition
    {
#renderTranslation ($allPreConstraints)
    }
#end
#if (!$allPostConstraints.empty)
#set ($handleMethodPostCondition = "${attribute.implementationOperationName}${velocityCount}aPostCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPostCondition
    {
#renderTranslation ($allPostConstraints)
    }
#end

#if ($attribute.readOnly)
    private $memberTypeName __$memberName;
    private boolean __${memberName}Set = false;

#end
    /**
$attribute.getDocumentation("     * ")
     * @return ($memberTypeName)${attribute.implementationOperationName}($typedArgumentList)
     */
    public final $memberTypeName ${methodName}()
    {
#if ($attribute.readOnly)
        $memberTypeName $memberName = this.__$memberName;
        if (!this.__${memberName}Set)
        {
#set ($indent = "    ")
#else
        $memberTypeName $memberName = $memberType.javaNullString;
#set ($indent = "")
#end
#if(!$allPreConstraints.empty)
        ${indent}$handleMethodPreCondition;
#else
        ${indent}// $attribute.name has no pre constraints
#end
        ${indent}$memberName = ${attribute.implementationOperationName}($typedArgumentList);
#if(!$allPostConstraints.empty)
        ${indent}$handleMethodPostCondition;
#else
        ${indent}// $attribute.name has no post constraints
#end
#if ($attribute.readOnly)
            this.__$memberName = $memberName;
            if (isMetafacadePropertyCachingEnabled())
            {
                this.__${memberName}Set = true;
            }
        }
#end
        return $memberName;
    }

#end
#end
#if (!$metafacade.operations.empty)
    // ---------------- business methods ----------------------

#foreach ($operation in $metafacade.operations)
#set ($hasArguments = (!$operation.arguments.empty))
#set ($memberTypeName = $operation.getterSetterReturnTypeName)
#set ($methodName = $operation.name)
#set ($memberName = "${methodName}${velocityCount}o")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = $operation.typedArgumentList)
#set ($allPreConstraints=$operation.getConstraints("pre"))
#set ($allPostConstraints=$operation.getConstraints("post"))
    /**
     * Method to be implemented in descendants
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $memberTypeName
#end
     */
## Need to associate metafacade type to shielded element type for underlying handleCollection return type
    protected abstract $memberTypeName ${operation.implementationName}($typedArgumentList);
#if (!$allPreConstraints.empty)
#set ($handleMethodPreCondition = "${operation.implementationName}${velocityCount}oPreCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPreCondition
    {
#renderTranslation ($allPreConstraints)
    }
#end
#if (!$allPostConstraints.empty)
#set ($handleMethodPostCondition = "${operation.implementationName}${velocityCount}oPostCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPostCondition
    {
#renderTranslation ($allPostConstraints)
    }
#end

    /**
$operation.getDocumentation("     * ")
#foreach ($parameter in $operation.arguments)
     * @param $parameter.name $parameter.type.fullyQualifiedName
#if (!$stringUtils.isBlank($parameter.getDocumentation("", 9999, false)))
$parameter.getDocumentation("     * ")
#end
#end
#if($operation.returnTypePresent)
     * @return ${operation.implementationName}($operation.argumentNames)
#end
     */
    $operation.visibility $memberTypeName ${methodName}($typedArgumentList)
    {
#if(!$allPreConstraints.empty)
        $handleMethodPreCondition;
#else
        // $operation.name has no pre constraints
#end
#if($operation.returnTypePresent)
        $memberTypeName returnValue = ${operation.implementationName}($operation.argumentNames);
#else
        ${operation.implementationName}($operation.argumentNames);
#end
#if(!$allPostConstraints.empty)
        $handleMethodPostCondition;
#else
        // $operation.name has no post constraints
#end
#if($operation.returnTypePresent)
        return returnValue;
#end
    }

#end
#end
##
#if (!$metafacade.associationEnds.empty)
    // ------------- associations ------------------

#foreach ($associationEnd in $metafacade.associationEnds)
#set ($otherEnd = $associationEnd.otherEnd)
#if ($otherEnd.navigable)
#set ($memberTypeName = $otherEnd.getterSetterTypeName)
#set ($memberType = $otherEnd.type)
#set ($methodName = $otherEnd.getterName)
#set ($memberName = "${methodName}${velocityCount}r")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = "")
#set ($allPreConstraints=$associationEnd.getConstraints("pre"))
#set ($allPostConstraints=$associationEnd.getConstraints("post"))
##
#if (!$allPreConstraints.empty)
#set ($handleMethodPreCondition = "${otherEnd.implementationOperationName}${velocityCount}rPreCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPreCondition
    {
#renderTranslation ($allPreConstraints)
    }

#end
#if (!$allPostConstraints.empty)
#set ($handleMethodPostCondition = "${otherEnd.implementationOperationName}${velocityCount}rPostCondition()")## postfix with counter to avoid collisions with other members
    private void $handleMethodPostCondition
    {
#renderTranslation ($allPostConstraints)
    }

#end
#if ($otherEnd.readOnly)
    private $memberTypeName __$memberName;
    private boolean __${memberName}Set = false;

#end
    /**
$associationEnd.getDocumentation("     * ")
     * @return ($memberTypeName)${otherEnd.implementationOperationName}($typedArgumentList)
     */
    public final $memberTypeName ${methodName}()
    {
#if ($otherEnd.readOnly)
        $memberTypeName $memberName = this.__$memberName;
        if (!this.__${memberName}Set)
        {
#set ($indent = "    ")
#else
#set ($indent = "")
        $memberTypeName $memberName = $memberType.javaNullString;
#end
#if (!$allPreConstraints.empty)
        ${indent}$handleMethodPreCondition;
#else
        ${indent}// $associationEnd.name has no pre constraints
#end
#if ($otherEnd.many)
       ${indent}#if($otherEnd.ordered) java.util.List#else java.util.Collection#end result = ${otherEnd.implementationOperationName}($typedArgumentList);
        ${indent}java.util.List shieldedResult = this.shieldedElements(result);
#else
        ${indent}Object result = ${otherEnd.implementationOperationName}($typedArgumentList);
        ${indent}org.andromda.core.metafacade.MetafacadeBase shieldedResult = this.shieldedElement(result);
#end
        ${indent}try
        ${indent}{
        ${indent}    $memberName = ($memberTypeName)shieldedResult;
        ${indent}}
        ${indent}catch (ClassCastException ex)
        ${indent}{
        ${indent}    // Bad things happen if the metafacade type mapping in metafacades.xml is wrong - Warn
        ${indent}    ${metafacade.logicName}.logger.warn("incorrect metafacade cast for ${metafacade.logicName}.${methodName} $memberTypeName " + result + ": " + shieldedResult);
        ${indent}}
#if (!$allPostConstraints.empty)
        ${indent}$handleMethodPostCondition;
#else
        ${indent}// $associationEnd.name has no post constraints
#end
#if ($otherEnd.readOnly)
            this.__$memberName = $memberName;
            if (isMetafacadePropertyCachingEnabled())
            {
                this.__${memberName}Set = true;
            }
        }
#end
        return $memberName;
    }

#if ($otherEnd.many)
    /**
     * UML Specific type is returned in Collection, transformed by shieldedElements to AndroMDA Metafacade type
     * @return #if($otherEnd.ordered) java.util.List#else java.util.Collection#end

     */
    protected abstract#if($otherEnd.ordered) java.util.List#else Collection#end ${otherEnd.implementationOperationName}($typedArgumentList);
#else
    /**
     * UML Specific type is transformed by shieldedElements to AndroMDA Metafacade type
     * @return Object
     */
    protected abstract Object ${otherEnd.implementationOperationName}($typedArgumentList);
#end

#end
#end
#end
##
#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($parent in $metafacade.allParents)
    /**
     * @return true
     * @see $parent.fullyQualifiedName
     */
    public boolean is${parent.name}MetaType()
    {
        return true;
    }

#end
#foreach ($link in $metafacade.generalizationLinks)
#set ($generalizationCount = $velocityCount)
    // ----------- delegates to $link.parent.fullyQualifiedName ------------
#foreach ($method in $metafacade.getMethodDataForPSM($link.parent))
    /**
$method.documentation
     * @see ${method.metafacadeName}${esc.hash}${method.name}(${method.typedArgumentList})
     */
    $method.buildMethodDeclaration(true)
    {
#if ($method.returnTypePresent)
        return this.${link.getterName}().${method.buildMethodCall()};
#else
        this.${link.getterName}().${method.buildMethodCall()};
#end
    }

#end
#end
#end
#if ($metafacade.requiresInheritanceDelegatation)
    /**
     * @see org.andromda.core.metafacade.MetafacadeBase${esc.hash}initialize()
     */
    @Override
    public void initialize()
    {
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.getterName}().initialize();
#end
    }

    /**
     * @return Object ${metafacade.generalizationLinks.get(0).getterName}().getValidationOwner()
     * @see org.andromda.core.metafacade.MetafacadeBase${esc.hash}getValidationOwner()
     */
    @Override
    public Object getValidationOwner()
    {
#foreach ($link in $metafacade.generalizationLinks)
#if ($velocityCount == 1)
        Object owner = this.${link.getterName}().getValidationOwner();
#else
        if (owner == null)
        {
            owner = this.${link.getterName}().getValidationOwner();
        }
#end
#if ($velocityCount == $metafacade.generalizationCount)
        return owner;
#end
#end
    }

    /**
     * @return String ${metafacade.generalizationLinks.get(0).getterName}().getValidationName()
     * @see org.andromda.core.metafacade.MetafacadeBase${esc.hash}getValidationName()
     */
    @Override
    public String getValidationName()
    {
#foreach ($link in $metafacade.generalizationLinks)
#if ($velocityCount == 1)
        String name = this.${link.getterName}().getValidationName();
#else
        if (name == null)
        {
            name = this.${link.getterName}().getValidationName();
        }
#end
#if ($velocityCount == $metafacade.generalizationCount)
        return name;
#end
#end
    }

#end
    /**
#foreach ($constraint in $metafacade.getConstraints("inv"))
     * <p><b>Constraint:</b> $metaUtils.getFullyQualifiedConstraintName($constraint)</p>
     * <p><b>Error:</b> $constraint.getDocumentation("",-1,false)</p>
     * <p><b>OCL:</b> #if($constraint.precondition)precondition #end#if($constraint.postcondition)postcondition #end${constraint.body}</p>
#end
     * @param validationMessages Collection<ModelValidationMessage>
#if ($superMetafacade && !$metafacade.requiresInheritanceDelegatation)
     * @see ${superMetafacade.fullyQualifiedLogicImplName.replace($pkg, "")}${esc.hash}validateInvariants(Collection validationMessages)
#else
     * @see org.andromda.core.metafacade.MetafacadeBase${esc.hash}validateInvariants(Collection validationMessages)
#end
     */
    @Override
    public void validateInvariants(Collection<ModelValidationMessage> validationMessages)
    {
#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.getterName}().validateInvariants(validationMessages);
#end
#elseif ($superMetafacade)
        super.validateInvariants(validationMessages);
#end
#renderTranslation ($metafacade.getConstraints("inv"))
    }
## Only render toString() on top level ancestor Facade objects or delegates.
#if (!$superMetafacade || $metafacade.requiresInheritanceDelegatation)

    /**
     * The property that stores the name of the metafacade.
     */
    private static final String NAME_PROPERTY = "name";
    private static final String FQNAME_PROPERTY = "fullyQualifiedName";

    /**
     * @see Object${esc.hash}toString()
     */
    @Override
    public String toString()
    {
        final StringBuilder toString = new StringBuilder(this.getClass().getName());
        toString.append("[");
        try
        {
            toString.append(Introspector.instance().getProperty(this, FQNAME_PROPERTY));
        }
        catch (final Throwable tryAgain)
        {
            try
            {
                toString.append(Introspector.instance().getProperty(this, NAME_PROPERTY));
            }
            catch (final Throwable ignore)
            {
                // - just ignore when the metafacade doesn't have a name or fullyQualifiedName property
            }
        }
        toString.append("]");
        return toString.toString();
    }
#end
}
