

    A n d r o M D A  -  4.0-SNAPSHOT


    AndroMDA is an open-source MDA framework distributed under the BSD license.
    Go to http://www.andromda.org/ for more information.

    The project located in this directory has been generated by AndroMDA Team
    using the andromdapp:generate Maven plugin.

    You should at least be running Maven 2.0.10 if you want to build your
    project without any Maven-related problems, below is a summary of what has
    been generated and a list of example goals to call from the command line.
    Version 2.0.10 has the fewest known significant bugs.
    More info on maven is available at http://maven.apache.org.
    An excellent guide (Better Builds with Maven) pdf download is available at
    http://www.devzuz.com/web/guest/products/resources#BBWM.

    The standard lifecycle goals (each goal depends on all previous goals) are:
    generate-sources, process-sources, compile, generate-test-*, test-compile,
    test, package, install, deploy. install is the default goal.

    If you want to import each subdirectory into Eclipse as an individual project,
    follow the instructions in mda/eclipse.bat. The pom.xml files are set up for this
    option to work by default.

    The generated project structure is well-tailored for use in the development
    of J2EE projects. The build process itself makes use of Maven, dependencies
    and often-used goals have been added for your convenience.

    Custom configuration can be done by updating the root pom.xml file.
    pom.xml files in directories under the root inherit the root configuration.

    /online-store J2EE project
         |
         |    The root of the project contains a few files that control the overall
         |    build process and common properties (in the pom.xml).
         |
         |-- pom.xml
         |        contains information about this project, you may add more information
         |        as long as you do not violate the Maven POM schema, see
         |        http://maven.apache.org/ref/current/maven-model/maven.html
         |
         |      Generated sources are in target/src/main/java in each subdirectory
         |      Implementation sources are under /src in each subdirectory
         |
         +-- /mda
         |     |
         |     |    The MDA module is the heart of this project, this is where
         |     |    AndroMDA is configured to generate the files needed to
         |     |    assemble the application
         |     |
         |     +-- pom.xml
         |     |        contains the AndroMDA dependencies and configuration (cartridges, translation-libraries, etc)
         |     +-- /src/main/uml
         |     |        contains the UML model from which AndroMDA will generate code
         |     +-- /src/main/config/mappings
         |     |        additional sources such as merge-mappings can be
         |     |        placed here
         |     +-- /src/main/config/andromda.xml
         |              configures AndroMDA and its components, most
         |              importantly the cartridges which are listed in
         |              their own namespace; global settings are done in the
         |              'default' namespace
         |
         +-- /common
         |     |
         |     |    The COMMON module collects those resources and classes
         |     |    that are shared between the other modules.
         |     |
         |     +-- pom.xml
         |     |        lists common dependencies
         |     +-- /target
         |              shared resources and java classes are generated here,
         |              such as value objects and exceptions
         |
         +-- /web
         |     |
         |     |    The WEB module collects all resources and classes
         |     |    that make up the presentation layer, as well as
         |     |    bundling all other modules to create a deployable war.
         |     |
         |     +-- pom.xml
         |     |        lists WebApp dependencies
         |     +-- /src/main/java
         |     |        controller implementations and editable resource bundles
         |     |        will be generated here,
         |     |        you might consider putting your own JSPs here to
         |     |        be copied over the generated ones when bundling the
         |     |        .war file
         |     +-- /target
         |              a deployable war is bundled here
         |



    In order to succesfully build your project you will need to know
    how to invoke the build process for the existing modules, here's a
    list of examples:

    Please note that you may use the '-o' flag at any time to avoid
    having Maven downloading any SNAPSHOT dependencies.

        %> mvn install

            simply builds all modules

        %> mvn -o install

            builds all modules in offline mode - does not check remote repositories for updates or downloads

        %> mvn install -Dmaven.test.skip=true

            builds all modules and skips all automatic tests (i.e. surefire expected/actual)

        %> mvn install -Dmaven.test.failure.ignore=true

            builds all modules and run all automatic tests but does not stop if a test failure

        %> mvn install -fae

            builds all modules and run all automatic tests, reports all failures at the end

        %> mvn -f web/pom.xml -Ddeploy

            collects all artifacts and builds a deployable .war which is then
            deployed

        %> mvn clean

            cleans (recursively removes) all files from each target directory

        %> mvn -f mda/pom.xml install

            Generates the source files, without compilation or deployment. Or run 'mvn install' from the mda subdirectory.

        %> mvn install -Ddeploy

            rebuilds the entire application and deploys

        %> mvn install -Denv=prod

            builds the entire application for the production environment, possible 'env' property values
            are 'prod' for production, 'val' for validation and 'dev' for development; not specifying
            any value for this property will build the application for the local configuration
            (more info at http://maven.apache.org/guides/introduction/introduction-to-profiles.html)

        %> mvn -f web/pom.xml andromdapp:undeploy -o

            undeploys the war from your app server

        %> mvn -N andromdapp:build -Dmodules=core (or mvn -f core/pom.xml)

            only build the core module

        %> mvn -N andromdapp:build -Dmodules=web (or mvn -f web/pom.xml)

            only build the web module

        %>  mvn -f core/pom.xml org.andromda.maven.plugins:andromdapp-maven-plugin:schema -Dtasks=create

            generates the DDL create code and subsequently tells the database
            to create the schema for the entities under app/target/schema*.sql

        %> mvn -f core/pom.xml org.andromda.maven.plugins:andromdapp-maven-plugin:schema -Dtasks=drop

            generates the DDL drop code and subsequently tells the database
            to drop the schema for the entities

        %> mvn -f core/pom.xml org.andromda.maven.plugins:andromdapp-maven-plugin:schema -Dtasks=drop,create

            generates the drop and create DDL code and subsequently tells the database
            to drop and then create the schema for the entities

        %> mvn -f core/pom.xml org.andromda.maven.plugins:andromdapp-maven-plugin:schema -Dtasks=update

            attempts to update the database schema with incremental changes, might not work with all JDBC drivers
            see http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#toolsetguide-s1-6

        %> mvn -f core/pom.xml org.andromda.maven.plugins:andromdapp-maven-plugin:schema -Dtasks=validate

            validates the current Hibernate mappings against the database, you can also use this to simply
            check whether or not the mappings have been properly generated (in case of customizations)

        %> mvn -N andromdapp:build -Dmodules=mda:[andromda:start-server] (or mvn -f mda/pom.xml andromda:start-server)

            starts the AndroMDA server, with this server running you will be able
            to significantly speedup the generation process although it will require
            you to use another console while it is running

        %> mvn -N andromdapp:build -Dmodules=mda:[andromda:stop-server] (or mvn -f mda/pom.xml andromda:stop-server)

            stops the AndroMDA server

        %> mvn -N andromdapp:build -Dmodules=mda (or mvn -f mda/pom.xml)

            runs AndroMDA on your model and thereby generating files in
            the subdirectories of the existing modules

        %> mvn -N andromdapp:build -Dmodules=mda -Dfilter=java,hibernate (or mvn -f mda/pom.xml -Dfilter=java,hibernate)

            runs AndroMDA, but this time only using the Java and Hibernate
            cartridges (in that order)

        %> mvn -N andromdapp:build -Dmodules=mda -Dfilter=~java,hibernate (or mvn -f mda/pom.xml -Dfilter=~java,hibernate)

            runs AndroMDA, but this time using all cartridges *except*
            the Java and Hibernate cartridges

        %> mvn -N andromdapp:build -Dmodules=mda,core,web -Dfilter=java -Ddeploy

            runs AndroMDA using only the Java cartridge, rebuilds the core
            module and web module and deploys afterwards

        %> mvn -N andromdapp:build -Dconsole

            runs the AndroMDApp build goal in 'console' mode, once running, this allows you to execute any goal or subproject
            goal in the manner described above without having to specify the andromdapp:build goal or
            restarting maven (i.e. you can run the mda goal by typing 'mda', build the core module by type 'core', etc).

        %> mvn compile:compile

            compile all sources

        %> mvn process-sources

            generates and compiles all sources from the model(s) without installing/deploying

    Each module will install its artifact into the local Maven repository,
    this might be a directory looking like this:

        (Windows)
        C:\Documents and Settings${author}\.m2\repository${applicationId}\

        (*nix)
        /home/AndroMDA Team/.m2/repository/online-store/

    For questions or feature requests please use our forum:
    http://forum.andromda.org/


    Good luck!


        -- The AndroMDA Team


