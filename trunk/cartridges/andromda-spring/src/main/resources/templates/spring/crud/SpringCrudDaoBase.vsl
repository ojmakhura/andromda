#set ($generatedFile = "${manageable.manageableDaoBaseFullPath}.java")
// license-header java merge-point
// Generated by crud/SpringCrudDaoBase.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
#if ($hibernateVersion.startsWith("4"))
#set ($hibernate4=true)
#else
#set ($hibernate4=false)
#end
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
##
package $manageable.manageablePackageName;

#if ($manageable.read || $manageable.delete)
import ${hibernateUtils.basePackage}.Session;
import ${hibernateUtils.basePackage}.Criteria;
import ${hibernateUtils.criterionPackage}.MatchMode;
import ${hibernateUtils.criterionPackage}.Restrictions;

#end
/**
$manageable.getDocumentation(" * ")
 */
public final class $manageable.manageableDaoBaseName
    extends $manageable.fullyQualifiedDaoImplementationName
    implements $manageable.manageableDaoName
{

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($entity = $member.type)
    private $entity.fullyQualifiedDaoName $member.daoName = null;

    /**
     * @param ${member.daoName}In
     */
    public void ${member.daoSetterName}($entity.fullyQualifiedDaoName ${member.daoName}In)
    {
        this.$member.daoName = ${member.daoName}In;
    }

    /**
     * @return dao $entity.fullyQualifiedDaoName
     */
    public $entity.fullyQualifiedDaoName ${member.daoGetterName}()
    {
        return this.$member.daoName;
    }

#end
#if ($enableAnnotations)
    @Override
#end
    public Object transformEntity(final int transform, final ${manageable.fullyQualifiedEntityName} entity)
    {
        if(transform == ${manageable.manageableDaoName}.TRANSFORM_VALUEOBJECT)
        {
            return toValueObject(entity);
        }
        return super.transformEntity(transform, entity);
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${manageable.fullyQualifiedManageableValueObjectName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer VALUEOBJECT_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations)
            @Override
#end
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof ${manageable.fullyQualifiedEntityName})
                {
                    result = toValueObject((${manageable.fullyQualifiedEntityName})input);
                }
                else if (input instanceof Object[])
                {
                    result = toValueObject((Object[])input);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void transformEntities(final int transform, final java.util.Collection<?> entities)
    {
        if(transform == ${manageable.manageableDaoName}.TRANSFORM_VALUEOBJECT)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, this.VALUEOBJECT_TRANSFORMER);
        }
        else
        {
            super.transformEntities(transform, entities);
        }
    }

    /**
     * {@inheritDoc}
     * @param row
     * @return ${manageable.fullyQualifiedManageableValueObjectName}
     */
    protected ${manageable.fullyQualifiedManageableValueObjectName} toValueObject(Object[] row)
    {
        return this.toValueObject(this.toEntity(row));
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if($enableTemplating)
    @SuppressWarnings("unchecked")
#end
    public java.util.Collection<${manageable.fullyQualifiedManageableValueObjectName}> toValueObjectCollection(java.util.Collection<${manageable.fullyQualifiedEntityName}> entities)
    {
        if (entities == null)
        {
            return null;
        }
#if($enableTemplating)
        @SuppressWarnings("rawtypes")
#end
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections.CollectionUtils.transform(result, this.VALUEOBJECT_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public final void valueObjectToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof ${manageable.fullyQualifiedManageableValueObjectName}))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, this.ValueObjectToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer ValueObjectToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations)
            @Override
#end
            public Object transform(Object input)
            {
                return valueObjectToEntity((${manageable.fullyQualifiedManageableValueObjectName})input);
            }
        };


    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void toValueObject(
        ${manageable.fullyQualifiedEntityName} source,
        ${manageable.fullyQualifiedManageableValueObjectName} target)
    {
#foreach ($member in $manageable.manageableAttributes)
        target.${member.setterName}(source.${member.getterName}());
#end

#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
        final java.util.Collection<$member.type.fullyQualifiedName> ${member.name} = source.${member.getterName}();
        if (${member.name} == null || ${member.name}.isEmpty())
        {
            target.${member.setterName}(null);
        }
        else
        {
            final ${member.type.fullyQualifiedIdentifierTypeName}[] values = new ${member.type.fullyQualifiedIdentifierTypeName}[${member.name}.size()];
            int counter = 0;
            for (final ${member.type.fullyQualifiedName} element: ${member.name})
            {
                values[counter++] = element.${member.type.identifierGetterName}();
            }
            target.${member.setterName}(values);
        }
#else
#if ($member.type.compositeIdentifier)
        target.${member.setterName}(source.${member.getterName}() == null? null: source.${member.getterName}().${member.type.identifierGetterName}());
#else
        final $member.type.fullyQualifiedName $member.name = source.${member.getterName}();
#if (!$member.type.primitive)
        if ($member.name != null)
#end
        {
            target.${member.setterName}(${member.name}.${member.type.identifierGetterName}());
        }
#end
#end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public ${manageable.fullyQualifiedManageableValueObjectName} toValueObject(final ${manageable.fullyQualifiedEntityName} entity)
    {
        ${manageable.fullyQualifiedManageableValueObjectName} target = null;
        if (entity != null)
        {
            target = new ${manageable.fullyQualifiedManageableValueObjectName}();
            this.toValueObject(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void valueObjectToEntity(
        ${manageable.fullyQualifiedManageableValueObjectName} source,
        ${manageable.fullyQualifiedEntityName} target)
    {
#foreach ($member in $manageable.manageableAttributes)
        target.${member.setterName}(source.${member.getterName}());
#end

#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
        final ${member.type.fullyQualifiedIdentifierTypeName}[] ${member.name} = source.${member.getterName}();
        if (${member.name} == null || ${member.name}.length == 0)
        {
            target.${member.setterName}(null);
        }
        else
        {
            final java.util.Collection<$member.type.fullyQualifiedName> values = new java.util.ArrayList<$member.type.fullyQualifiedName>();
            for (final ${member.type.fullyQualifiedIdentifierTypeName} element: ${member.name})
            {
                values.add((${member.type.fullyQualifiedName})#if($hibernate4) this.getSessionFactory().getCurrentSession()#else this.getHibernateTemplate()#end.load(${member.type.fullyQualifiedEntityImplementationName}.class, element));
            }
            target.${member.setterName}(values);
        }
#else
        target.${member.setterName}(source.${member.getterName}() == null? null:
            ($member.type.fullyQualifiedName)#if($hibernate4) this.getSessionFactory().getCurrentSession()#else this.getHibernateTemplate()#end.load(${member.type.fullyQualifiedEntityImplementationName}.class, source.${member.getterName}()));
#end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public ${manageable.fullyQualifiedEntityName} valueObjectToEntity(${manageable.fullyQualifiedManageableValueObjectName} source)
    {
        final ${manageable.fullyQualifiedEntityName} entity;
        if(source.${manageable.identifierGetterName}() == null)
        {
#if($manageable.abstract)
            throw new RuntimeException("${manageable.fullyQualifiedEntityName} is abstract.");
#else
            entity = ${manageable.fullyQualifiedEntityName}.Factory.newInstance();
#end
        }
        else
        {
            entity = this.load(source.${manageable.identifierGetterName}());
        }
        valueObjectToEntity(source, entity);
        return entity;
    }

#if($manageableSearchMatchMode == 'anywhere')
#set($matchMode = 'MatchMode.ANYWHERE')
#else
#set($matchMode = 'MatchMode.START')
#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection<${manageable.fullyQualifiedEntityName}> searchByExample($manageable.fullyQualifiedManageableSearchExampleName example)
    {
        final Session session =#if($hibernate4) this.getSessionFactory().getCurrentSession();#else this.getSession(false);#end

        final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);

        if(example != null)
        {
#foreach ($member in $manageable.manageableAttributes)
#if (!$member.inputFile && !$member.needsFileUpload)
            if (#if($member.type.stringType) org.apache.commons.lang.StringUtils.isNotEmpty(example.${member.getterName}())#else example.${member.getterName}() != null#end)
#if ($member.type.stringType)
            {
                criteria.add(Restrictions.ilike("$member.name", example.${member.getterName}(), $matchMode));
            }
#elseif ($member.type.dateType && $member.type.timeType)
            {
                // we check whether or not the user supplied time information within this particular date argument
                // if he/she didn't we assume he/she wishes to search in the scope of the entire day
                final java.util.Calendar calendar = new java.util.GregorianCalendar();
                calendar.setTime(example.${member.getterName}());
                if ( calendar.get(java.util.Calendar.HOUR) != 0
                     || calendar.get(java.util.Calendar.MINUTE) != 0
                    || calendar.get(java.util.Calendar.SECOND) != 0
                    || calendar.get(java.util.Calendar.MILLISECOND) != 0 )
                {
                    criteria.add(Restrictions.eq("$member.name", example.${member.getterName}()));
                }
                else
                {
                    calendar.add(java.util.Calendar.DATE, 1);
                    calendar.add(java.util.Calendar.MILLISECOND, -1);
                    criteria.add(Restrictions.between("$member.name", example.${member.getterName}(), calendar.getTime()));
                }
            }
#elseif ($member.type.booleanType)
            {
                criteria.add(Restrictions.eq("$member.name", example.${member.getterName}().booleanValue()));
            }
#else
            {
                criteria.add(Restrictions.eq("$member.name", example.${member.getterName}()));
            }
#end
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
            if (example.${member.getterName}() != null && example.${member.getterName}().length > 0)
            {
                criteria.createCriteria("$member.name").add(Restrictions.in("$member.type.identifierName", example.${member.getterName}()));
            }
#else
            if (example.${member.getterName}() != null)
            {
                criteria.createCriteria("$member.name").add(Restrictions.eq("$member.type.identifierName", example.${member.getterName}()));
            }
#end
#end
        }
        criteria.setResultTransformer(org.hibernate.criterion.CriteriaSpecification.DISTINCT_ROOT_ENTITY);
#if ($manageable.maximumListSize > 0)
        criteria.setMaxResults($manageable.maximumListSize);

#end
        criteria.addOrder(org.hibernate.criterion.Order.asc("${manageable.displayAttribute.name}"));
        criteria.setCacheable(true);
        return criteria.list();
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection<?> searchByExample(int transform, $manageable.fullyQualifiedManageableSearchExampleName example)
    {
        final java.util.Collection<?> result=this.searchByExample(example);
        transformEntities(transform, result);
        return result;
    }

    // spring-crud-dao-base merge-point
}