#if ($recordType.equalsIgnoreCase("dao"))
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateSearch.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#set ($generatedFile = "${criteriaSearchBaseName}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Implements a generic search mechanism based on the Hibernate Criteria API. The
 * <code>${criteriaSearchBaseName}</code> allows adding parameters which function as where clause. The
 * parameters are analyzed whether they should be considered or not. This depends both on the actual
 * value of the parameter and on the configuration.<br>
 * The <code>${criteriaSearchBaseName}</code> is expected to be a general solution for a basic search with
 * parameters connected by logical <b>and</b>. This search does <b>not</b> provide grouping.
 *
 * @author Stefan Reichert
 * @author Peter Friese
 * @author Chad Brandon
 * @see ${hibernateUtils.basePackage}.Criteria
 * @see ${hibernateUtils.restrictionClass}
 */
#if (!$enableTemplating)
@SuppressWarnings({"unchecked"})
#end
public class $criteriaSearchBaseName
{
    private ${criteriaSearchBaseName}Configuration configuration;
    private ${hibernateUtils.basePackage}.Criteria rootCriteria;
    private Map#if ($enableTemplating)<String, ${hibernateUtils.basePackage}.Criteria>#end childCriteriaMap;
    private List#if ($enableTemplating)<CriteriaSearchParameter>#end orderList;
#if ($enableTemplating)
    @SuppressWarnings("rawtypes")
#end
    private Class resultType;

    private static final class ParameterComparator
        implements Comparator#if($enableTemplating)<Object>#end

    {
#if ($enableAnnotations)
        @Override
#end
        public int compare(final Object object1, final Object object2)
        {
            final CriteriaSearchParameter parameter1 = (CriteriaSearchParameter)object1;
            final CriteriaSearchParameter parameter2 = (CriteriaSearchParameter)object2;

            final int relevance1 = parameter1.getOrderRelevance();
            final int relevance2 = parameter2.getOrderRelevance();
            int result = 0;
            if (relevance1 > relevance2)
            {
                result = 1;
            }
            else if (relevance1 < relevance2)
            {
                result = -1;
            }
            return result;
        }
    }

    /**
     * Exposes the root criteria to subclasses.
     * @return rootCriteria
     */
    protected ${hibernateUtils.basePackage}.Criteria getRootCriteria()
    {
        return this.rootCriteria;
    }

    /**
     * Constructor for ${criteriaSearchBaseName}. Creates a <code>${criteriaSearchBaseName}</code> with a default
     * <code>${criteriaSearchBaseName}Configuration</code>.
     *
     * @param session The Hibernate session.
     * @param resultTypeIn The <code>Class</code> of the result.
     */
    public ${criteriaSearchBaseName}(${hibernateUtils.basePackage}.Session session,#if ($enableTemplating)@SuppressWarnings("rawtypes")#end Class resultTypeIn)
    {
        this.configuration = new ${criteriaSearchBaseName}Configuration();
        this.resultType = resultTypeIn;
        this.rootCriteria = session.createCriteria(this.resultType);
        this.rootCriteria.setCacheable(true);
        this.childCriteriaMap = new HashMap<String, ${hibernateUtils.basePackage}.Criteria>();
        this.orderList = new ArrayList<CriteriaSearchParameter>();
    }

    /**
     * Executes a <code>HibernateQuery</code> using the currently defined
     * <code>CriteriaSearchParameter</code>s, and returns a java.util.Set
     * containing the query results.
     *
     * @return result The result of the query.
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public Set#if($enableTemplating)<?>#end executeAsSet()
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        return new LinkedHashSet(this.executeAsList());
    }

    /**
     * Executes a <code>HibernateQuery</code> using the currently defined
     * <code>CriteriaSearchParameter</code>s, and returns a java.util.List
     * containing the query results.
     *
     * @return result The result of the query as a List
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    @SuppressWarnings({ "rawtypes", "synthetic-access" })
    public List executeAsList()
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        // add ordering
        if (this.orderList.size() > 0)
        {
            Collections.sort(this.orderList, new ParameterComparator());
            for (final CriteriaSearchParameter parameter : #if (!$enableTemplating)(Collection<CriteriaSearchParameter>)#end this.orderList)
            {
                int direction = parameter.getOrderDirection();
                if (direction == SearchParameter.ORDER_ASC)
                {
                    this.getParameterCriteria(parameter).addOrder(${hibernateUtils.criterionPackage}.Order.asc(this.getParameterName(parameter)));
                }
                else
                {
                    this.getParameterCriteria(parameter).addOrder(${hibernateUtils.criterionPackage}.Order.desc(this.getParameterName(parameter)));
                }
            }
        }

        // set the first result if configured
        if (this.configuration.getFirstResult() != null)
        {
            this.rootCriteria.setFirstResult(this.configuration.getFirstResult().intValue());
        }

        // set the fetch size if configured
        if (this.configuration.getFetchSize() != null)
        {
            this.rootCriteria.setFetchSize(this.configuration.getFetchSize().intValue());
        }

        // limit the maximum result if configured
        if (this.configuration.getMaximumResultSize() != null)
        {
            this.rootCriteria.setMaxResults(this.configuration.getMaximumResultSize().intValue());
        }
#if ($enableCaching)
        this.rootCriteria.setCacheable(true);
#end
        return this.rootCriteria.list();
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>. It is not considered if the value is <code>null</code>.
     * If the value is not <code>null</code> it is compared using the
     * <code>${criteriaSearchBaseName}Parameter.EQUALS_COMPARATOR</code>.
     *
     * @param parameterValue The value of the parameter.
     * @param parameterPattern The pattern of the parameter (dot-separated path e.g. person.address.street).
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    public void addParameter(Object parameterValue, String parameterPattern)
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        addParameter(new ${criteriaSearchBaseName}Parameter(parameterValue, parameterPattern));
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>. It is not considered if the value is <code>null</code> or
     * if the <code>String</code> empty. If the value is not <code>null</code> it is compared
     * using the <code>${criteriaSearchBaseName}Parameter.LIKE_COMPARATOR</code>.
     *
     * @param parameterValue The value of the parameter.
     * @param parameterPattern The pattern of the parameter (dot-separated path e.g. person.address.street).
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    public void addParameter(String parameterValue, String parameterPattern)
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        addParameter(new ${criteriaSearchBaseName}Parameter(parameterValue, parameterPattern));
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>.
     *
     * @param parameter The <code>${criteriaSearchBaseName}Parameter</code> to add.
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    public void addParameter(${criteriaSearchBaseName}Parameter parameter)
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        if (considerParameter(parameter))
        {
            final ${hibernateUtils.basePackage}.Criteria parameterCriteria = this.getParameterCriteria(parameter);
            final String parameterName = this.getParameterName(parameter);

            // check the type parameter value to add
            if(parameter.getParameterValue() instanceof Object[])
            {
                addExpression(
                    parameterCriteria,
                    parameterName,
                    (Object[])parameter.getParameterValue(),
                    parameter.getComparator(),
                    parameter.getMatchMode());
            }
            else
            {
                addExpression(
                    parameterCriteria,
                    parameterName,
                    parameter.getParameterValue(),
                    parameter.getComparator(),
                    parameter.getMatchMode());
            }
        }
        // if the parameter is to be ordered, add it to the order list
        if (parameter.getOrderDirection() != SearchParameter.ORDER_UNSET)
        {
            this.orderList.add(parameter);
        }
    }

    /**
     * Retrieves the appropriate criteria object for the given <code>parameter</code>.
     *
     * @param parameter the parameter for which to retrieve the criteria.
     * @return the retrieved criteria.
     */
    private ${hibernateUtils.basePackage}.Criteria getParameterCriteria(final ${criteriaSearchBaseName}Parameter parameter)
        throws ${hibernateUtils.basePackage}.HibernateException
    {
        String[] path = ${criteriaSearchBaseName}Parameter.PATTERN.split(parameter.getParameterPattern());
        ${hibernateUtils.basePackage}.Criteria parameterCriteria = this.rootCriteria;

        ${hibernateUtils.basePackage}.Criteria childEntityCriteria;
        if (path.length > 1)
        {
            // We have a parameter affecting an attribute of an inner childEntity object so we need
            // to traverse to get the right criteria object
            childEntityCriteria = this.rootCriteria;
            // Evaluating the proper criteria object for the defined parameter
#if ($enableTemplating)
            @SuppressWarnings("rawtypes")
#end
            Class type = this.resultType;
            for (int index = 0; index < (path.length - 1); index++)
            {
                final String childEntityName = path[index];
                final Collection<String> embeddedValues = CriteriaSearchProperties.getEmbeddedValues(type);
                if (embeddedValues != null && embeddedValues.contains(childEntityName))
                {
                    // - use the rest of the path as the parameter name
                    final int number = path.length - index;
                    final String[] restOfPath = new String[path.length - index];
                    System.arraycopy(path, index, restOfPath, 0, number);
                    break;
                }
                type = CriteriaSearchProperties.getNavigableAssociationEndType(type, childEntityName);
                childEntityCriteria = locateCriteria(childEntityName, childEntityCriteria);
            }
            if (childEntityCriteria != null)
            {
                // We now have the right criteria object
                parameterCriteria = childEntityCriteria;
            }
        }
        return parameterCriteria;
    }

    /**
     * Retrieves the appropriate nested parameter name for the given <code>parameter</code>.
     *
     * @param parameter the parameter for which to retrieve the parameter name.
     * @return the parameter name.
     */
    private String getParameterName(final ${criteriaSearchBaseName}Parameter parameter)
    {
        // parsing the pattern of the parameter
        String[] path = ${criteriaSearchBaseName}Parameter.PATTERN.split(parameter.getParameterPattern());
        String parameterName = path[path.length - 1];
        if (path.length > 1)
        {
            // We have a parameter affecting an attribute of an inner childEntity object so we need
            // to traverse to get the correct parameter name
            // Evaluating the proper criteria object for the defined parameter
#if ($enableTemplating)
            @SuppressWarnings("rawtypes")
#end
            Class type = this.resultType;
            for (int index = 0; index < (path.length - 1); index++)
            {
                final String childEntityName = path[index];
                final Collection<String> embeddedValues = CriteriaSearchProperties.getEmbeddedValues(type);
                if (embeddedValues != null && embeddedValues.contains(childEntityName))
                {
                    // - use the rest of the path as the parameter name
                    final int number = path.length - index;
                    final String[] restOfPath = new String[path.length - index];
                    System.arraycopy(path, index, restOfPath, 0, number);
                    parameterName = org.apache.commons.lang.StringUtils.join(restOfPath, ".");
                    break;
                }
                type = CriteriaSearchProperties.getNavigableAssociationEndType(type, childEntityName);
            }
        }
        return parameterName;
    }

    /**
     * Decides whether a paramter is considered as a criteria for a search depending on the type and
     * value of the <code>parameterValue</code> and <code>searchIfIsNull</code>. A
     * <code>parameterValue</code> of the type <code>String</code> is considered
     * <code>null</code> if being a <code>NullPointer</code> or empty.
     *
     * @param parameter The parameter to check.
     */
    private boolean considerParameter(${criteriaSearchBaseName}Parameter parameter)
    {
        if (parameter.getParameterValue() instanceof String)
        {
            String stringParameterValue = (String) parameter.getParameterValue();
            return (parameter.isSearchIfNull()
                    || (stringParameterValue != null && stringParameterValue.length() > 0));
        }
        if (parameter.getParameterValue() instanceof Object[])
        {
            Object[] parameterValues = (Object[]) parameter.getParameterValue();
            return (parameter.isSearchIfNull()
                    || (parameterValues != null && parameterValues.length > 0));
        }
        final int comparator = parameter.getComparator();
        return (parameter.isSearchIfNull() ||
            SearchParameter.NOT_NULL_COMPARATOR == comparator ||
            SearchParameter.NULL_COMPARATOR == comparator ||
            SearchParameter.EMPTY_COMPARATOR == comparator ||
            SearchParameter.NOT_EMPTY_COMPARATOR == comparator) ||
            (parameter.getParameterValue() != null);
    }

    /**
     * Adds an <code>${hibernateUtils.restrictionClass}</code> to a <code>Criteria</code>.
     *
     * @param criteria
     * @param parameterName
     * @param parameterValue
     * @param comparator
     * @param matchMode
     */
    private void addExpression(
        ${hibernateUtils.basePackage}.Criteria criteria,
        String parameterName,
        Object parameterValue,
        int comparator,
        ${hibernateUtils.criterionPackage}.MatchMode matchMode)
    {
        switch (comparator)
        {
            case SearchParameter.NOT_NULL_COMPARATOR:
            {
                criteria.add(${hibernateUtils.restrictionClass}.isNotNull(parameterName));
                break;
            }
            case SearchParameter.NULL_COMPARATOR:
            {
                criteria.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                break;
            }
#if ($hibernateUtils.version3 || $hibernateUtils.version4)
            case SearchParameter.EMPTY_COMPARATOR:
            {
                criteria.add(${hibernateUtils.restrictionClass}.isEmpty(parameterName));
                break;
            }
            case SearchParameter.NOT_EMPTY_COMPARATOR:
            {
                criteria.add(${hibernateUtils.restrictionClass}.isNotEmpty(parameterName));
                break;
            }
#end
            default:
            {
                if (parameterValue != null)
                {
                    switch (comparator)
                    {
                        case SearchParameter.LIKE_COMPARATOR:
                        {
                            if ((matchMode != null) && (parameterValue instanceof String))
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.like(
                                    parameterName,
                                    (String)parameterValue,
                                    matchMode));
                            }
                            else
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.like(parameterName, parameterValue));
                            }
                            break;
                        }
                        case SearchParameter.NOT_LIKE_COMPARATOR:
                        {
                            ${hibernateUtils.criterionPackage}.SimpleExpression expression;
                            if ((matchMode != null) && (parameterValue instanceof String))
                            {
                                expression = ${hibernateUtils.restrictionClass}.like(
                                    parameterName,
                                    (String)parameterValue,
                                    matchMode);
                            }
                            else
                            {
                                expression = ${hibernateUtils.restrictionClass}.like(parameterName, parameterValue);
                            }
                            criteria.add(${hibernateUtils.restrictionClass}.not(expression));
                            break;
                        }
                        case SearchParameter.INSENSITIVE_LIKE_COMPARATOR:
                        {
                            if ((matchMode != null) && (parameterValue instanceof String))
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.ilike(
                                    parameterName,
                                    (String)parameterValue,
                                    matchMode));
                            }
                            else
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.ilike(parameterName, parameterValue));
                            }
                            break;
                        }
                        case SearchParameter.NOT_INSENSITIVE_LIKE_COMPARATOR:
                        {
                            ${hibernateUtils.criterionPackage}.Criterion criterion;
                            if ((matchMode != null) && (parameterValue instanceof String))
                            {
                                criterion = ${hibernateUtils.restrictionClass}.ilike(
                                    parameterName,
                                    (String)parameterValue,
                                    matchMode);
                            }
                            else
                            {
                                criterion = ${hibernateUtils.restrictionClass}.ilike(parameterName, parameterValue);
                            }
                            criteria.add(${hibernateUtils.restrictionClass}.not(criterion));
                            break;
                        }
                        case SearchParameter.EQUAL_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.eq(parameterName, parameterValue));
                            break;
                        }
                        case SearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.ge(parameterName, parameterValue));
                            break;
                        }
                        case SearchParameter.GREATER_THAN_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.gt(parameterName, parameterValue));
                            break;
                        }
                        case SearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.le(parameterName, parameterValue));
                            break;
                        }
                        case SearchParameter.LESS_THAN_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.lt(parameterName, parameterValue));
                            break;
                        }
                        case SearchParameter.IN_COMPARATOR:
                        {
                            if (parameterValue instanceof Collection)
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.in(parameterName, (Collection<Object>)parameterValue));
                            }
                            break;
                        }
                        case SearchParameter.NOT_IN_COMPARATOR:
                        {
                            if (parameterValue instanceof Collection)
                            {
                                criteria.add(${hibernateUtils.restrictionClass}.not(${hibernateUtils.restrictionClass}.in(parameterName, (Collection<Object>)parameterValue)));
                            }
                            break;
                        }
#if ($hibernateUtils.version3 || $hibernateUtils.version4)
                        case SearchParameter.NOT_EQUAL_COMPARATOR:
                        {
                            criteria.add(${hibernateUtils.restrictionClass}.ne(parameterName, parameterValue));
                            break;
                        }
#end
                        default:
                            break;
                    }
                }
                else
                {
                    criteria.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                }
            }
        }
    }

    /**
     * Adds an <code>${hibernateUtils.restrictionClass}</code> to a <code>Criteria</code>. The given <code>parameterValues</code>
     * represents either an array of <code>String</code> or another object. The different values in the
     * array are added to a disjunction or conjunction which is connected with logical and to the other criteria of the
     * search.
     *
     * @param criteria
     * @param parameterName
     * @param parameterValues
     * @param searchIfNull
     * @param comparator
     * @param matchMode
     */
    private void addExpression(
        ${hibernateUtils.basePackage}.Criteria criteria,
        String parameterName,
        Object[] parameterValues,
        int comparator,
        ${hibernateUtils.criterionPackage}.MatchMode matchMode)
    {
        if (parameterValues != null)
        {
            ${hibernateUtils.criterionPackage}.Disjunction disjunction = null;
            ${hibernateUtils.criterionPackage}.Conjunction conjunction = null;
            switch (comparator)
            {
                case SearchParameter.LIKE_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    if ((matchMode != null) && (parameterValues instanceof String[]))
                    {
                        String[] stringParameterValues = (String[]) parameterValues;
                        for (int index = 0; index < parameterValues.length; index++)
                        {
                            if (stringParameterValues[index] != null)
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}.like(
                                    parameterName, stringParameterValues[index], matchMode));
                            }
                            else
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}
                                    .isNull(parameterName));
                            }
                        }
                    }
                    else
                    {
                        for (int index = 0; index < parameterValues.length; index++)
                        {
                            if (parameterValues[index] != null)
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}.like(
                                    parameterName, parameterValues[index]));
                            }
                            else
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}
                                        .isNull(parameterName));
                            }
                        }
                    }
                    break;
                }
                case SearchParameter.INSENSITIVE_LIKE_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    if ((matchMode != null) && (parameterValues instanceof String[]))
                    {
                        String[] stringParameterValues = (String[]) parameterValues;
                        for (int index = 0; index < parameterValues.length; index++)
                        {
                            if (stringParameterValues[index] != null) {
                                disjunction.add(${hibernateUtils.restrictionClass}.ilike(
                                    parameterName, stringParameterValues[index], matchMode));
                            }
                            else {
                                disjunction.add(${hibernateUtils.restrictionClass}
                                    .isNull(parameterName));
                            }
                        }
                    }
                    else
                    {
                        for (int index = 0; index < parameterValues.length; index++)
                        {
                            if (parameterValues[index] != null)
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}.ilike(
                                    parameterName, parameterValues[index]));
                            }
                            else
                            {
                                disjunction.add(${hibernateUtils.restrictionClass}
                                        .isNull(parameterName));
                            }
                        }
                    }
                    break;
                }
                case SearchParameter.EQUAL_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.eq(parameterName,
                                    parameterValues[index]));
                        }
                        else {
                            disjunction.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                        }
                    }
                    break;
                }
                case SearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.ge(parameterName,
                                    parameterValues[index]));
                        }
                        else
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                        }
                    }
                    break;
                }
                case SearchParameter.GREATER_THAN_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.gt(parameterName,
                                    parameterValues[index]));
                        }
                        else
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                        }
                    }
                    break;
                }
                case SearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.le(parameterName,
                                    parameterValues[index]));
                        }
                        else
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                        }
                    }
                    break;
                }
                case SearchParameter.LESS_THAN_COMPARATOR:
                {
                    disjunction = ${hibernateUtils.disjunctionClassName}.disjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.lt(parameterName,
                                    parameterValues[index]));
                        }
                        else
                        {
                            disjunction.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                        }
                    }
                    break;
                }
                case SearchParameter.IN_COMPARATOR:
                {
                    criteria.add(${hibernateUtils.restrictionClass}.in(parameterName, parameterValues));
                    break;
                }
                case SearchParameter.NOT_IN_COMPARATOR:
                {
                    criteria.add(${hibernateUtils.restrictionClass}.not(${hibernateUtils.restrictionClass}.in(parameterName, parameterValues)));
                    break;
                }
#if ($hibernateUtils.version3 || $hibernateUtils.version4)
                case SearchParameter.NOT_EQUAL_COMPARATOR:
                {
                    conjunction = ${hibernateUtils.disjunctionClassName}.conjunction();
                    for (int index = 0; index < parameterValues.length; index++)
                    {
                        if (parameterValues[index] != null)
                        {
                            conjunction.add(${hibernateUtils.restrictionClass}.ne(parameterName,
                                    parameterValues[index]));
                        }
                        else
                        {
                            conjunction.add(${hibernateUtils.restrictionClass}.isNotNull(parameterName));
                        }
                    }
                    break;
                }
#end
                default:
                    break;
            }

            if (disjunction != null)
            {
                criteria.add(disjunction);
            }
            if (conjunction != null)
            {
                criteria.add(conjunction);
            }
        }
        else
        {
            switch (comparator)
            {
#if ($hibernateUtils.version3 || $hibernateUtils.version4)
                case SearchParameter.EMPTY_COMPARATOR:
                {
                    criteria.add(${hibernateUtils.restrictionClass}.isEmpty(parameterName));
                    break;
                }
                case SearchParameter.NOT_EMPTY_COMPARATOR:
                {
                    criteria.add(${hibernateUtils.restrictionClass}.isNotEmpty(parameterName));
                    break;
                }
#end
                default:
                {
                    criteria.add(${hibernateUtils.restrictionClass}.isNull(parameterName));
                }
            }
        }
    }

    /**
     * Locates a <code>Criteria</code> for a <code>childEntityName</code>. If a
     * <code>Criteria</code> exists for the <code>childEntityName</code>, it is returned. If
     * not, one is created and referenced in the <code>childCriteriaMap</code> under the
     * <code>childEntityName</code>.
     *
     * @param childEntityName
     * @param parentCriteria
     * @return criteria The Criteria for the childEntityName.
     * @throws ${hibernateUtils.basePackage}.HibernateException
     */
    private ${hibernateUtils.basePackage}.Criteria locateCriteria(String childEntityName, ${hibernateUtils.basePackage}.Criteria parentCriteria) throws ${hibernateUtils.basePackage}.HibernateException
    {
        if (this.childCriteriaMap.containsKey(childEntityName))
        {
            return this.childCriteriaMap.get(childEntityName);
        }
        ${hibernateUtils.basePackage}.Criteria childCriteria = parentCriteria.createCriteria(childEntityName);
        if (this.configuration.isForceEagerLoading())
        {
            parentCriteria.setFetchMode(childEntityName, ${hibernateUtils.basePackage}.FetchMode.${hibernateUtils.eagerFetchMode});
        }

        // Hibernate does not support a 'unique' identifier. As a search may contain outer joins,
        // duplicates in the resultList are possible. We eliminate any duplicates here, creating a
        // distinctified resultSet (Suggestion from Hibernate itself; see www.hibernate.org's FAQ's).
        parentCriteria.setResultTransformer(${hibernateUtils.basePackage}.criterion.CriteriaSpecification.DISTINCT_ROOT_ENTITY);
        this.childCriteriaMap.put(childEntityName, childCriteria);
        return childCriteria;
    }

    /**
     * Returns the configuration of this search.
     *
     * @return configuration
     */
    public ${criteriaSearchBaseName}Configuration getConfiguration()
    {
        return this.configuration;
    }
}
#end