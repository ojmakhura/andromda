##==== Local Macros
#macro(renderEvictCollection $theEntity)
#if($theEntity.generalization)
#renderEvictCollection($theEntity.generalization)
#end
#foreach ($sourceEnd in $theEntity.associationEnds)
#if ($sourceEnd.navigable && $sourceEnd.many)
            cache.evictCollectionRegion("${sourceEnd.otherEnd.type.fullyQualifiedEntityImplementationName}.${sourceEnd.name}");
#end
#end
#end
##=========================
#if ($recordType.equalsIgnoreCase("dao"))
#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
#if ($hibernateVersion.startsWith("4"))
#set ($hibernate4=true)
#set ($h3tab="    ")
#else
#set ($hibernate4=false)
#set ($h3tab="")
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4=$hibernate4 hibernateVersion=$hibernateVersion
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.root.fullyQualifiedDaoName)
#else
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.fullyQualifiedDaoName)
#end
##get entity collection type
#if ($enableTemplating)
#if ($daoInheritance)
#set ($entityCollectionType = "java.util.Collection<? extends ${rootEntityType}>")
#else
#set ($entityCollectionType = "java.util.Collection<${rootEntityType}>")
#end
#else
#set ($entityCollectionType = "java.util.Collection")
#end
##check for spring version regarding the execute method to use
#if($springVersion.compareTo("2.5") >= 0 || $springVersion.compareTo("3.0") >= 0 || $springVersion.compareTo("3.1") >= 0)
#set ($executeWithNativeSessionMethodname = "executeWithNativeSession")
#set ($executeWithNativeSessionParameter = "")
#else
#set ($executeWithNativeSessionMethodname = "execute")
#set ($executeWithNativeSessionParameter = ", true")
#end
##
##
#set($identifierTypeName="${entity.fullyQualifiedIdentifierTypeName}")
#set($identifierName="${entity.identifierName}")
#if (!$entity.identifiers.empty)
#set($identifierTypePrimitive = $entity.identifiers.iterator().next().type.primitive)
#if($identifierTypePrimitive)
#set($identifierTypeWrapperName = $entity.identifiers.iterator().next().type.wrapperName)
#end
#end

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
#if($hibernate4)
@org.springframework.stereotype.Repository
#end
public abstract class $entity.daoBaseName
#if ($daoInheritance)
    extends $entity.generalization.fullyQualifiedDaoImplementationName
#elseif($hibernateVersion.startsWith("3"))
    extends ${hibernateUtils.springHibernatePackage}.support.HibernateDaoSupport
#end
    implements $entity.fullyQualifiedDaoName
{
#if($hibernate4)
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use LogFactory.getLog on each subclass, for the correct class name
     * Apache commons logging logger used by all subclasses
     */
    @Deprecated
    protected org.apache.commons.logging.Log logger = org.apache.commons.logging.LogFactory.getLog(${entity.daoBaseName}.class);

    @javax.annotation.Resource
    private org.hibernate.SessionFactory sessionFactory;
    /**
     * @param sessionFactoryIn
     */
    public void setSessionFactory(org.hibernate.SessionFactory sessionFactoryIn) {
        this.sessionFactory = sessionFactoryIn;
    }
    /**
     * @return SessionFactory
     */
    protected org.hibernate.SessionFactory getSessionFactory() {
        return this.sessionFactory;
    }
    /**
     * @return currentSession
     */
    protected org.hibernate.Session getSession() {
        return this.sessionFactory.getCurrentSession();
    }
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use this.sessionFactory.getCurrentSession() instead
     * @param ignore boolean - always create new session if needed
     * @return currentSession
     */
    @Deprecated
    protected org.hibernate.Session getSession(boolean ignore) {
        return this.getSession();
    }

#end
#foreach($entityRef in $entity.entityReferences)
    private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

    /**
     * Sets the reference to <code>$entityRef.daoName</code>.
     * @param ${entityRef.daoName}In
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoName}In)
    {
        this.$entityRef.daoName = ${entityRef.daoName}In;
    }

    /**
     * Gets the reference to <code>$entityRef.daoName</code>.
     * @return ${entityRef.daoName}
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object get(final int transform, final ${identifierTypeName} ${identifierName})
    {
#set ($argument = ${identifierName})
#if($identifierTypePrimitive && !$entity.compositeIdentifier)
#set ($argument = "new ${identifierTypeWrapperName}(${identifierName})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.get - '$argument' can not be null");
        }
#end
#if ($hibernateUtils.xmlPersistenceActive)
#set ($xmlIndent = "    ")
        if (transform == TRANSFORM_XML)
        {
            final Object entity =#if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.${executeWithNativeSessionMethodname}(
                    new org.springframework.orm.hibernate3.HibernateCallback<Object>()
                    {
                        public Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                            throws ${hibernateUtils.basePackage}.HibernateException
                        {
                            ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                            return xmlSession.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
                        }
                    }${executeWithNativeSessionParameter});
            return entity;
        }
        else
        {
#else
#set ($xmlIndent = "")
#end
$xmlIndent        final Object entity =#if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
$xmlIndent        return transformEntity(transform, ($entity.fullyQualifiedName)entity);
#if ($hibernateUtils.xmlPersistenceActive)
        }
#end
    }
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType get(${identifierTypeName} ${identifierName})
    {
        return ($entity.fullyQualifiedEntityName)this.get($entity.daoNoTransformationConstantName, ${identifierName});
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object load(final int transform, final ${identifierTypeName} ${identifierName})
    {
#set ($argument = ${identifierName})
#if($identifierTypePrimitive && !$entity.compositeIdentifier)
#set ($argument = "new ${identifierTypeWrapperName}(${identifierName})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$argument' can not be null");
        }
#end
#if ($hibernateUtils.xmlPersistenceActive)
#set ($xmlIndent = "    ")
        if (transform == TRANSFORM_XML)
        {
            final Object entity = this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                    new org.springframework.orm.hibernate3.HibernateCallback<Object>()
                    {
                        public Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                            throws ${hibernateUtils.basePackage}.HibernateException
                        {
                            ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                            return xmlSession.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
                        }
                    }${executeWithNativeSessionParameter});
            return entity;
        }
        else
        {
#else
#set ($xmlIndent = "")
#end
#if($enableCaching)
#set ($oldXmlIndent = $xmlIndent)
$oldXmlIndent        try{
#set ($xmlIndent = "    $xmlIndent")
#end
$xmlIndent        final Object entity =#if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
$xmlIndent        return transformEntity(transform, ($entity.fullyQualifiedName)entity);
#if($enableCaching)
$oldXmlIndent        }catch(org.hibernate.WrongClassException exc){
$oldXmlIndent            //No display error message caused by the cache L2 hibernate as stated in https://hibernate.atlassian.net/browse/HHH-4953 and https://hibernate.atlassian.net/browse/HHH-9028
$oldXmlIndent            return null;
$oldXmlIndent        }
#end
#if ($hibernateUtils.xmlPersistenceActive)
        }
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType load(${identifierTypeName} ${identifierName})
    {
        return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName, ${identifierName});
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll()
    {
        return#if($enableTemplating) ($entityCollectionType)#end this.loadAll(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(${entity.fullyQualifiedDaoName}.${entity.daoNoTransformationConstantName}, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform, final int pageNumber, final int pageSize)
    {
#if($hibernate4)
        final ${hibernateUtils.basePackage}.Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(${entity.fullyQualifiedEntityImplementationName}.class);
        if (pageNumber > 0 && pageSize > 0)
        {
            criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            criteria.setMaxResults(pageSize);
        }
        criteria.setCacheable(true);
        final java.util.Collection#if($enableTemplating)<?>#end results = criteria.list();
        this.transformEntities(transform, results);
        return results;
#else
        try
        {
            final ${hibernateUtils.basePackage}.Criteria criteria = this.getSession(false).createCriteria(${entity.fullyQualifiedEntityImplementationName}.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            criteria.setCacheable(true);
            final java.util.Collection#if($enableTemplating)<?>#end results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

#if($enableCaching)
    /**
     * evict all the dependent collections to avoid 'id not found' refers to https://hibernate.atlassian.net/browse/HHH-4910
     * should not be generated when using hibernate annotations
     */
    protected void evictAllReferencingCollections() 
    {
        final org.hibernate.Cache cache=this.sessionFactory.getCache();
        if(cache != null){
#renderEvictCollection($entity)
        }
    }
        
#end
    /**
     * prePersist event - This method is called before creating the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _prePersist(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._prePersist($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.prePersist)
        ${operation.name}($argumentName);
#end
#end
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _postPersist(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._postPersist($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.postPersist)
        ${operation.name}($argumentName);
#end
#end
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _preUpdate(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._preUpdate($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.preUpdate)
        ${operation.name}($argumentName);
#end
#end
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _postUpdate(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._postUpdate($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.postUpdate)
        ${operation.name}($argumentName);
#end
#end
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _preRemove(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._preRemove($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.preRemove)
        ${operation.name}($argumentName);
#end
#end
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param $argumentName $entity.fullyQualifiedName
     */
    protected void _postRemove(final $entity.fullyQualifiedName $argumentName)
    {
#if ($daoInheritance)
        super._postRemove($argumentName)
#elseif($entity.daoBusinessOperations.empty)
        // Abstract method - your implementation goes in the descendant
#end
#foreach ($operation in $entity.daoBusinessOperations)
#if($operation.postRemove)
        ${operation.name}($argumentName);
#end
#end
    }

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
    {
        return ($entity.fullyQualifiedEntityName)this.create(${entity.fullyQualifiedDaoName}.${entity.daoNoTransformationConstantName}, $argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType create(org.dom4j.Element $argumentName)
    {
       return ($entity.fullyQualifiedEntityName)this.create(${entity.fullyQualifiedDaoName}.${entity.daoNoTransformationConstantName}, $argumentName);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public Object create(int transform, final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
#if($hibernate4)
        return create(transform, entity);
#else
        Object newID = this.getHibernateTemplate().${executeWithNativeSessionMethodname}((
                new org.springframework.orm.hibernate3.HibernateCallback<Object>()
                {
                    public Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        return xmlSession.save("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                    }
                }${executeWithNativeSessionParameter});

        return this.load(transform, (${identifierTypeName})newID);
#end
    }

#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object create(final int transform, final $entity.fullyQualifiedName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }

        //prePersist event
        _prePersist($argumentName);

#if($enableCaching)
        //evict all the dependent collections to avoid 'id not found' refers to https://hibernate.atlassian.net/browse/HHH-4910
        //should not be generated when using hibernate annotations
        evictAllReferencingCollections();
        
#end
#if ($hibernateUtils.xmlPersistenceActive)
#set ($identifierProperty = "identifier")
#if($identifierTypePrimitive)
#set ($identifierProperty = "(($identifierTypeWrapperName)$identifierProperty).${identifierTypeName}Value()")
#else
#set ($identifierProperty = "($identifierTypeName)$identifierProperty")
#end
        Object identifier =#if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.save($argumentName);

        //postPersist event
        _postPersist($argumentName);

        if (transform == TRANSFORM_XML)
          return this.load(TRANSFORM_XML, (($identifierProperty)));
        else
          return this.transformEntity(transform, $argumentName);
#else
       #if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.save($argumentName);

        //postPersist event
        _postPersist($argumentName);

        return this.transformEntity(transform, $argumentName);
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType create(final $entityCollectionType entities)
    {
        return#if($enableTemplating) ($entityCollectionType)#end create(${entity.fullyQualifiedDaoName}.${entity.daoNoTransformationConstantName}, entities);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection#if($enableTemplating)<?>#end create(final int transform, final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - 'entities' can not be null");
        }
#if($hibernate4)
        java.util.Collection<Object> transformed = new java.util.ArrayList<Object>();
        for ($entity.fullyQualifiedEntityName entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
#else
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback<Object>()
            {
                public Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
#if($enableTemplating)
                    for ($entity.fullyQualifiedEntityName entity : entities)
                    {
                        create(transform, entity);
                    }
#else
                    for (Object entity : entities)
                    {
                        create(transform, ($entity.fullyQualifiedEntityName)entity);
                    }
#end
                    return null;
                }
            }${executeWithNativeSessionParameter});
        return entities;
#end
    }

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#if (!$attributes.empty)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType create(
#foreach($attribute in $attributes)
        $attribute.getterSetterTypeName $attribute.name#if($velocityHasNext),#else)#end

#end
    {
        return ($rootEntityType)this.create(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, ${entity.getAttributeNameList(true, $entity.usingAssignedIdentifier)});
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object create(
        final int transform,
#foreach($attribute in $attributes)
        $attribute.getterSetterTypeName $attribute.name#if($velocityHasNext),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#if ($entity.usingForeignIdentifier)
#set ($entityIdentifiers=$entity.identifierAssociatinEnds)
#if (!$entityIdentifiers.empty)
#set ($entityIdentifier=$entityIdentifiers.get(0))
#end
## Is it possible to have >1 identifier association? Assume one.
#end
#foreach ($attribute in $attributes)
##        // $entity.identifierAssociationEnds.size() $entity.usingForeignIdentifier $attribute.identifier $entityIdentifier
#if ($entity.usingForeignIdentifier && $attribute.identifier)
        entity.$entityIdentifier.getterName().${attribute.setterName}($attribute.name);
#else
        entity.${attribute.setterName}($attribute.name);
#end
#end
        return this.create(transform, entity);
    }

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $rootEntityType create(
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityHasNext),#else)#end

#end
    {
        return ($rootEntityType)this.create(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, ${entity.getRequiredPropertyNameList(true,false)});
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object create(
        final int transform,
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityHasNext),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($property in $requiredProperties)
        entity.${property.setterName}($property.name);
#end
        return this.create(transform, entity);
    }

#end
#end
#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }

        //preUpdate event
        _preUpdate($argumentName);

#if($enableCaching)
        //evict all the dependent collections to avoid 'id not found' refers to https://hibernate.atlassian.net/browse/HHH-4910
        //should not be generated when using hibernate annotations
        evictAllReferencingCollections();
        
#end
       #if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.update($argumentName);

        //postUpdate event
        _postUpdate($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void update(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
#if($hibernate4)
##        for ($entity.fullyQualifiedName entity : entities)
##        {
##            update(entity);
##        }
#else
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                new org.springframework.orm.hibernate3.HibernateCallback<Object>()
                {
                    public Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        xmlSession.update("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                        return null;
                    }
                }${executeWithNativeSessionParameter});
#end
    }

#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void update(final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - 'entities' can not be null");
        }
#if($hibernate4)
        for ($entity.fullyQualifiedName entity : entities)
        {
            update(entity);
        }
#else
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback<Object>()
            {
                public Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
#if($enableTemplating)
                    for ($entity.fullyQualifiedEntityName entity : entities)
                    {
                        update(entity);
                    }
#else
                    for (Object entity : entities)
                    {
                        update(($entity.fullyQualifiedEntityName)entity);
                    }
#end
                    return null;
                }
            }${executeWithNativeSessionParameter});
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        //preRemove event
        _preRemove($argumentName);

#if($enableCaching)
        //evict all the dependent collections to avoid 'id not found' refers to https://hibernate.atlassian.net/browse/HHH-4910
        //should not be generated when using hibernate annotations
        evictAllReferencingCollections();
        
#end
        #if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.delete($argumentName);

        //postRemove event
        _postRemove($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void remove(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
#if($hibernate4)
#else
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                new org.springframework.orm.hibernate3.HibernateCallback<Object>()
                {
                    public Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        xmlSession.delete($argumentName);
                        return null;
                    }
                }${executeWithNativeSessionParameter});
#end
    }

#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void remove($identifierTypeName $identifierName)
    {
#set ($argument = $identifierName)
#if($identifierTypePrimitive)
#set ($argument = "new ${identifierTypeWrapperName}($identifierName)")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '${identifierName}' can not be null");
        }
#end
#set ($loadCall = "this.get($identifierName)")
#if ($entity.generalization && $daoInheritance)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        $entity.fullyQualifiedEntityName entity = $loadCall;
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void remove($entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        for ($rootEntityType entity : entities)
        {
            //preRemove event
            _preRemove(entity);

#if($enableCaching)
            //evict all the dependent collections to avoid 'id not found' refers to https://hibernate.atlassian.net/browse/HHH-4910
            //should not be generated when using hibernate annotations
            evictAllReferencingCollections();
        
#end
           #if($hibernate4) this.sessionFactory.getCurrentSession()#else this.getHibernateTemplate()#end.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
##
## With daoInheritance disabled, only generate the finder methods defined on this entity; do NOT
## include those defined on any of the super-entities.
##
#if ($daoInheritance)
#set ($queryOperations = $entity.getQueryOperations(true))
#else
#set ($queryOperations = $entity.queryOperations)
#end
##
#foreach ($finder in $queryOperations)
#set ($returnType = "${finder.getterSetterReturnTypeName}#if($enableTemplating && $finder.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
##    // ${finder.getterSetterReturnTypeName} $finder.returnTypePresent $returnType
    /**
#if (!$finder.returnTypePresent)
     * **** MODEL ERROR: Entity finder method must return a type other than 'void' *****
#end
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if ((!$finder.returnType.collectionType || ($enableTemplating && $finder.returnType.collectionType)) && $finder.returnTypePresent)
#set ($finderCall = "($returnType)$finderCall")
#end
        #if ($finder.returnTypePresent)return#end $finderCall
    }

#if ($finder.returnType.collectionType|| $finder.many || !$finder.criteriaFinder)
    /**
#if (!$finder.returnTypePresent)
     * **** MODEL ERROR: Entity finder method must return a type other than 'void' *****
#end
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($finder.returnType.collectionType)
#if($enableTemplating)
#set ($returnType = "${finder.getterSetterReturnTypeName}<?>")
#end
#elseif ($finder.many)
#set ($returnType = "$finder.getterSetterReturnTypeName.substring(0,$finder.getterSetterReturnTypeName.indexOf('<'))<?>")
#elseif ($finder.returnTypePresent)
#set ($returnType = "Object")
#else
#set ($returnType = "void")
#end
    $finder.visibility $returnType ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#if ($finder.returnType.collectionType|| $finder.many)
        #if ($finder.returnTypePresent)return#end this.${finder.name}(transform, -1, -1#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#else
        #if ($finder.returnTypePresent)return#end this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#end
    }
#end

#set ($returnType = "${finder.getterSetterReturnTypeName}#if($enableTemplating && $finder.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
#if(!$finder.criteriaFinder)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if ((!$finder.returnType.collectionType || ($enableTemplating && $finder.returnType.collectionType)))
#set ($finderCall = "($returnType)$finderCall")
#end
        #if ($finder.returnTypePresent)return#end $finderCall
    }

#if ($finder.returnType.collectionType || $finder.many)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        #if ($finder.returnTypePresent)return#end#if($enableTemplating) ($returnType)#end this.${finder.name}(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final String queryString, final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        #if ($finder.returnTypePresent)return#end#if($enableTemplating) ($returnType)#end this.${finder.name}(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, queryString, pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

#if ($finder.returnType.collectionType)
#if($enableTemplating)
#set ($returnType = "${finder.getterSetterReturnTypeName}<?>")
#end
#elseif ($finder.many)
#set ($returnType = "$finder.getterSetterReturnTypeName.substring(0,$finder.getterSetterReturnTypeName.indexOf('<'))<?>")
#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    $finder.visibility $returnType ${finder.name}(final int transform, final String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        #if ($finder.returnTypePresent)return#end this.${finder.name}(transform, queryString, -1, -1#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    $finder.visibility $returnType ${finder.name}(final int transform, final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        #if ($finder.returnTypePresent)return#end this.${finder.name}(transform, "$finder.getQuery($entity)", pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

#elseif ($finder.returnTypePresent)
#set ($returnType = "Object")
#else
#set ($returnType = "void")
#end
    /**
#if (!$finder.returnTypePresent)
     * **** MODEL ERROR: Entity finder method must return a type other than 'void' *****
#end
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings("unchecked")
#end
    $finder.visibility $returnType ${finder.name}(final int transform, final String queryString#if ($finder.returnType.collectionType || $finder.many), int pageNumber, int pageSize#end#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
## TODO: Exception is not actually thrown by this method
        throws $finder.exceptionList
#end
    {
#if (!$hibernate4)
        try
        {
            ${hibernateUtils.basePackage}.Query queryObject = super.getSession(false).createQuery(queryString);
#else
        ${hibernateUtils.basePackage}.Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
#end
#foreach($argument in $finder.arguments)
#set ($count = $velocityCount - 1)
#set ($setParameterOperation = "setParameter")
#if ($argument.type.collectionType || $argument.type.arrayType)
#set ($setParameterOperation = "${setParameterOperation}List")
#end
#if ($useNamedParametersInQueries || $finder.useNamedParameters || $argument.type.collectionType || $argument.type.arrayType)
#if (!$argument.type.embeddedValue)
$h3tab        queryObject.${setParameterOperation}("$argument.name", $springUtils.formatHibernateQueryParameterValue($argument.type, $argument.name));
#else
#foreach ($attribute in $argument.type.getAttributes(true))
#set ($parameterValue = "${argument.name}.${attribute.getterName}()")
$h3tab        queryObject.${setParameterOperation}("$springUtils.concatNamesCamelCase([$argument.name, $attribute.name])", $springUtils.formatHibernateQueryParameterValue($attribute.type, $parameterValue));
#end
#end
#else
#if (!$argument.type.embeddedValue)
$h3tab        queryObject.${setParameterOperation}($count, $springUtils.formatHibernateQueryParameterValue($argument.type, $argument.name));
#else
#foreach ($attribute in $argument.type.getAttributes(true))
#set ($parameterValue = "${argument.name}.${attribute.getterName}()")
#set ($count = $count + $velocityCount - 1)
$h3tab        queryObject.${setParameterOperation}($count, $springUtils.formatHibernateQueryParameterValue($attribute, $parameterValue));
#end
#end
#end
#end
#if ($finder.returnType.collectionType || $finder.many)
$h3tab        if (pageNumber > 0 && pageSize > 0)
$h3tab        {
$h3tab            queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
$h3tab            queryObject.setMaxResults(pageSize);
$h3tab        }
#end
#if ($finder.returnType.setType || !($finder.returnType.collectionType || $finder.many))
#if ($enableTemplating)
$h3tab        @SuppressWarnings({ "unchecked", "rawtypes" })
#end
$h3tab        java.util.Set results = new java.util.LinkedHashSet(queryObject.setCacheable(true).list());
#else
$h3tab        java.util.List results = queryObject.setCacheable(true).list();
#end
#if (!($finder.returnType.collectionType || $finder.many))
$h3tab        Object result = null;
$h3tab        if (results.size() > 1)
$h3tab        {
$h3tab            throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
$h3tab                "More than one instance of '${finder.getterSetterReturnTypeName}"
$h3tab                    + "' was found when executing query --> '" + queryString + "'");
$h3tab        }
$h3tab        else if (results.size() == 1)
$h3tab        {
$h3tab            result = results.iterator().next();
$h3tab        }
##with this test we can use queries returning other types than collections or the entity
$h3tab        if(transform != $entity.daoNoTransformationConstantName){
$h3tab            result = transformEntity(transform, ($entity.fullyQualifiedName)result);
$h3tab        }
$h3tab        return result;
#else
$h3tab        transformEntities(transform, results);
#if ($finder.returnTypePresent)
$h3tab        return results;
#end
#end
#if (!$hibernate4)
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }
#else
#if ($finder.returnType.collectionType)
#set ($returnType = "${finder.getterSetterReturnTypeName}#if($enableTemplating)<?>#end")
#elseif ($finder.many)
#set ($returnType = "$finder.getterSetterReturnTypeName.substring(0,$finder.getterSetterReturnTypeName.indexOf('<'))<?>")
#else
#set ($returnType = "Object")
#end
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating && ($finder.returnType.collectionType || $finder.many))
    @SuppressWarnings("unchecked")
#end
    $finder.visibility $returnType ${finder.name}(final int transform#if ($finder.returnType.collectionType || $finder.many), final int pageNumber, final int pageSize#end#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set($criteriaArgument = $finder.criteriaArgument)
#set($criteriaArgumentName = $criteriaArgument.name)
#if (!$hibernate4)
        try
        {
#end
$h3tab        ${springTypesPackage}.${criteriaSearchBaseName} criteriaSearch = new ${springTypesPackage}.${criteriaSearchBaseName}(super.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class);
$h3tab        criteriaSearch.getConfiguration().setFirstResult(${criteriaArgumentName}.getFirstResult());
$h3tab        criteriaSearch.getConfiguration().setFetchSize(${criteriaArgumentName}.getFetchSize());
$h3tab        criteriaSearch.getConfiguration().setMaximumResultSize(${criteriaArgumentName}.getMaximumResultSize());
#if ($finder.returnType.collectionType || $finder.many)
$h3tab        if (pageNumber > 0 && pageSize > 0)
$h3tab        {
$h3tab            criteriaSearch.getConfiguration().setFirstResult(new Integer(calculateFirstResult(pageNumber, pageSize)));
$h3tab            criteriaSearch.getConfiguration().setMaximumResultSize(new Integer(pageSize));
$h3tab        }
#end
#set($criteriaClass = $criteriaArgument.type)
#foreach($criteriaAttribute in $criteriaClass.getAttributes(true))
#if($criteriaAttribute.matchModePresent)
#set($matchModeArgument = ", ${hibernateUtils.criterionPackage}.MatchMode.${criteriaAttribute.matchModeConstant}")
#else
#set($matchModeArgument = "")
#end
#if($criteriaAttribute.nullable)
#set($nullableArgument = ", true")
#else
#set($nullableArgument = "")
#end
#if($criteriaAttribute.comparatorPresent)
#set($comparatorArgument = ", ${springTypesPackage}.${criteriaSearchBaseName}Parameter.${criteriaAttribute.comparatorConstant}")
#else
#set($comparatorArgument = "")
#end
#set ($parameterName = "parameter${velocityCount}")
##            // entity=$entity
##            // finder=$finder
##            // arg=$criteriaArgument finder.criteriaArgument
##            // class=$criteriaClass criteriaArgument.type
##            // attr=$criteriaAttribute criteriaClass.getAttributes(true)
$h3tab        ${springTypesPackage}.${criteriaSearchBaseName}Parameter $parameterName =
$h3tab            new ${springTypesPackage}.${criteriaSearchBaseName}Parameter(
$h3tab                ${criteriaArgumentName}.${criteriaAttribute.getterName}(),
$h3tab                "${criteriaAttribute.attributeName}"${nullableArgument}${comparatorArgument}${matchModeArgument});
#if($criteriaAttribute.orderable)
$h3tab        ${parameterName}.setOrderDirection(${springTypesPackage}.${criteriaSearchBaseName}Parameter.$criteriaAttribute.orderDirection);
$h3tab        ${parameterName}.setOrderRelevance($criteriaAttribute.orderRelevance);
#end
$h3tab        criteriaSearch.addParameter($parameterName);
#end
#if ($finder.returnType.setType)
$h3tab        java.util.Set results = criteriaSearch.executeAsSet();
#else
$h3tab        java.util.List results = criteriaSearch.executeAsList();
#end
#if($finder.returnType.collectionType || $finder.many)
$h3tab        transformEntities(transform, results);
$h3tab        #if ($finder.returnTypePresent)return#end results;
#else
$h3tab        switch(results.size()){
$h3tab            case 0: return null;
$h3tab            case 1: return transformEntity(transform, ($entity.fullyQualifiedName)results.iterator().next());
$h3tab            default: throw new org.hibernate.NonUniqueResultException(results.size());
$h3tab        }
#end
#if (!$hibernate4)
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    $operation.visibility $operation.getterSetterReturnTypeName ${operation.name}(${operation.getTypedArgumentList('final')})
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
        }
#end
#end
#end
        try
        {
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing '${entity.fullyQualifiedDaoName}.${operation.signature}' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link ${esc.hash}${operation.getSignature(false)}}
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
     * @return $operation.getterSetterReturnTypeName#if($enableTemplating && $operation.returnType.collectionType)<?>#end

     * @throws Exception
     */
    protected abstract $operation.getterSetterReturnTypeName#if($enableTemplating && $operation.returnType.collectionType)<?>#end $operation.implementationSignature
        throws Exception;

#end
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
     * that the {@link ${esc.hash}$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$entity.valueObjectReferences.empty)
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link $entity.fullyQualifiedName} - {@link ${esc.hash}$entity.daoNoTransformationConstantName}</li>
#foreach ($valueObjectRef in $entity.valueObjectReferences)
#set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${esc.hash}${valueObjectRef.transformationConstantName}}</li>
#end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link ${esc.hash}${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}transformEntity(int, $entity.fullyQualifiedName)
     */
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
    @Override
#end
    public Object transformEntity(final int transform, final $entity.fullyQualifiedName entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
## With daoInheritance disabled, only refer to transformation methods defined on this entity
#if($daoInheritance)
#set($transformReferences = $entity.allValueObjectReferences)
#else
#set($transformReferences = $entity.valueObjectReferences)
#end
#foreach ($valueObjectRef in $transformReferences)
                case ${valueObjectRef.transformationConstantName} :
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case ${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void transformEntities(final int transform, final java.util.Collection#if($enableTemplating)<?>#end entities)
    {
        switch (transform)
        {
#foreach ($valueObjectRef in $transformReferences)
            case ${valueObjectRef.transformationConstantName} :
                org.apache.commons.collections.CollectionUtils.transform(entities, this.${valueObjectRef.transformationAnonymousName});
                break;
#end
            case ${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}toEntities(java.util.Collection)
     */
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
    @Override
#end
    public void toEntities(final java.util.Collection#if($enableTemplating)<?>#end results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link ${entity.fullyQualifiedEntityName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
            @Override
#end
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return $entity.fullyQualifiedEntityName
     */
    protected $entity.fullyQualifiedEntityName toEntity(Object[] row)
    {
        $entity.fullyQualifiedEntityName target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof $entity.fullyQualifiedEntityName)
                {
                    target = ($entity.fullyQualifiedEntityName)object;
                    break;
                }
            }
        }
        return target;
    }

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public final Collection#if($enableTemplating)<${valueObjectRef.targetElement.fullyQualifiedName}>#end ${valueObjectRef.transformationToCollectionMethodName}($entityCollectionType entities)
    {
        if (entities == null)
        {
            return null;
        }
#if($enableTemplating)
        @SuppressWarnings("rawtypes")
#end
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections.CollectionUtils.transform(result, this.${valueObjectRef.transformationAnonymousName});
        return result;
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings({ "unchecked" })
#end
    public final ${valueObjectRef.targetElement.fullyQualifiedName}[] ${valueObjectRef.transformationToArrayMethodName}(java.util.Collection#if($enableTemplating)<?>#end entities)
    {
        ${valueObjectRef.targetElement.fullyQualifiedName}[] result = null;
        if (entities != null)
        {
#if($enableTemplating)
        @SuppressWarnings("rawtypes")
#end
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.${valueObjectRef.transformationToCollectionMethodName}(collection);
            result = (${valueObjectRef.targetElement.fullyQualifiedName}[]) collection.toArray(new ${valueObjectRef.targetElement.fullyQualifiedName}[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link $entity.daoImplementationName} class if you intend to use reporting queries.
     * @param row
     * @return ${valueObjectRef.transformationMethodName}(this.toEntity(row))
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(Object[] row)
    {
        return this.${valueObjectRef.transformationMethodName}(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer $valueObjectRef.transformationAnonymousName =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
            @Override
#end
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    final $entity.fullyQualifiedEntityName entity = ($entity.fullyQualifiedEntityName)input;
                    result = ${valueObjectRef.transformationMethodName}(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = ${valueObjectRef.transformationMethodName}(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public final void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection#if($enableTemplating)<?>#end instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator#if($enableTemplating)<?>#end iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof $valueObjectRef.targetElement.fullyQualifiedName))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, this.$valueObjectRef.valueObjectToEntityTransformerName);
        }
    }

    private final org.apache.commons.collections.Transformer $valueObjectRef.valueObjectToEntityTransformerName =
        new org.apache.commons.collections.Transformer()
        {
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>=0)
            @Override
#end
            public Object transform(Object input)
            {
                return ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)input);
            }
        };


    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
#set ($entityProperties = $entity.allProperties)
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#* *##foreach ($entityProperty in $entityProperties)
#*    *##if ($property.name.equals($entityProperty.name) && (!$entity.compositeIdentifier || !$entityProperty.identifier))
#*      *##set ($entityPropertyGetterValue = false)
#*      *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*      *##if ($entityPropertyGetterValue)
#*        *##if(${entityProperty.many} && !${property.type.arrayType})
        target.${property.getterName}().clear();
        if(null!=source.${entityProperty.getterName}()) {
            target.${property.getterName}().addAll(source.${entityProperty.getterName}());
        }
#*        *##else
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##end
#*      *##else
        // No conversion for target.${property.name} (can't convert source.${entityProperty.getterName}():${entityProperty.type.fullyQualifiedName} to $property.type.fullyQualifiedName)
#*      *##end
#*    *##end
#* *##end
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($valueObjectRef.targetElement.abstract)
    public abstract $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity);
#else
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        $valueObjectRef.targetElement.fullyQualifiedName target = null;
        if (entity != null)
        {
#if($valueObjectRef.targetElement.isEnumeration())
            // Object reference is an Enumeration, must be instantiated with a value in the Impl transformation
#end
            target = #if($valueObjectRef.targetElement.isEnumeration())null#else new ${valueObjectRef.targetElement.fullyQualifiedName}()#end;
            this.${valueObjectRef.transformationMethodName}(entity, target);
        }
        return target;
    }
#end

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
#set ($entityAttributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#if ($entityAttributes.empty)
        // Entity has no attributes to copy
#end
#foreach ($entityProperty in $entityAttributes)
#* *##if (!$entityProperty.readOnly)
#*    *##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*        *##if ($property.name.equals($entityProperty.name) && (!$entity.compositeIdentifier || !$entityProperty.identifier))
#*           *##set ($propertyGetterValue = false)
#*            *##set ($propertyGetterValue = $converter.typeConvert($property.getterSetterTypeName, "source.${property.getterName}()", $entityProperty.getterSetterTypeName))
#*            *##if ($propertyGetterValue)
#*              *##if(${entityProperty.many} && !${property.type.arrayType})
        if (copyIfNull || source.${property.getterName}() != null)
        {
            target.${entityProperty.getterName}().clear();
            if(null != source.${property.getterName}()) {
                target.${entityProperty.getterName}().addAll(source.${property.getterName}());
            }
        }
#*              *##else
        if (copyIfNull || source.${property.getterName}() != $property.type.javaNullString)
        {
            target.${entityProperty.setterName}($propertyGetterValue);
        }
#*            *##end
#*          *##else
        // No conversion for target.${entityProperty.name} (can't convert source.${property.getterName}():${property.getterSetterTypeName} to $entityProperty.getterSetterTypeName)
#*          *##end
#*        *##end
#*    *##end
#**##end
#end
    }

#end
    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
#if ($externalPrincipalStoreClass)
#* *##set ($principalStoreCall = "#if(!$enableTemplating)(${externalPrincipalStoreGetterType})#end${externalPrincipalStoreClass}.${externalPrincipalStoreGetter};")
#* *##set ($principalStoreType = ${externalPrincipalStoreGetterType})
#else
#* *##set ($principalStoreCall = "${principalStoreName}.get();")
#* *##if($stringUtils.isNotBlank($springTypesPackage))
#*     *##set ($principalStoreCall = "${springTypesPackage}.${principalStoreCall}")
#* *##end
#* *##set ($principalStoreType = "java.security.Principal")
#end
    protected $principalStoreType getPrincipal()
    {
        return $principalStoreCall
    }

#set ($fullyQualifiedPagingResultName = $springUtils.getFullyQualifiedClassName($springCommonTypesPackage, "PaginationResult"))
#set ($fullyQualifiedSearchClassName = $springUtils.getFullyQualifiedClassName($springTypesPackage, "Search"))
#set ($fullyQualifiedPropertySearchClassName = $springUtils.getFullyQualifiedClassName($springTypesPackage, "PropertySearch"))
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $fullyQualifiedPagingResultName search(final int transform, final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search)
    {
#if ($hibernate4)
        search.setPageNumber(pageNumber);
        search.setPageSize(pageSize);
        final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
            this.sessionFactory.getCurrentSession(), ${entity.fullyQualifiedEntityImplementationName}.class, search);
        final java.util.List#if($enableTemplating)<?>#end results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return new $fullyQualifiedPagingResultName(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
#else
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
                this.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class, search);
            final java.util.List#if($enableTemplating)<?>#end results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new $fullyQualifiedPagingResultName(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public $fullyQualifiedPagingResultName search(final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search)
    {
        return this.search(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public java.util.Collection#if($enableTemplating)<?>#end search(final int transform, final $fullyQualifiedSearchClassName search)
    {
#if ($hibernate4)
        final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
            this.sessionFactory.getCurrentSession(), ${entity.fullyQualifiedEntityImplementationName}.class, search);
        final#if($enableTemplating) java.util.Collection<?>#else java.util.Collection#end results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return results;
#else
        try
        {
            final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
                this.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class, search);
            final#if($enableTemplating) java.util.Collection<?>#else java.util.Collection#end results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return results;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
#if ($enableTemplating)
    @SuppressWarnings("unchecked")
#end
    public java.util.Collection#if($enableTemplating)<#if($daoInheritance)? extends #end${rootEntityType}>#end search(final $fullyQualifiedSearchClassName search)
    {
        return#if($enableTemplating) (java.util.Collection<#if($daoInheritance)? extends #end${rootEntityType}>)#end this.search(${entity.fullyQualifiedDaoName}.$entity.daoNoTransformationConstantName, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link $fullyQualifiedPagingResultName} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return $fullyQualifiedPagingResultName
     */
#if ($enableTemplating)
    @SuppressWarnings({ "unchecked" })
#end
    protected $fullyQualifiedPagingResultName getPaginationResult(
        final ${hibernateUtils.basePackage}.Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
#if ($hibernate4)
        final ${hibernateUtils.basePackage}.ScrollableResults scrollableResults = queryObject.setCacheable(true).scroll();
        scrollableResults.last();
        int totalCount = scrollableResults.getRowNumber();
        totalCount = totalCount >= 0 ? totalCount + 1 : 0;
        if (pageNumber > 0 && pageSize > 0)
        {
            queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            queryObject.setMaxResults(pageSize);
        }
        // Unchecked transformation because Set object is reused, cannot be strongly typed.
#if ($enableTemplating)
        @SuppressWarnings("rawtypes")
#end
        java.util.Collection results = new java.util.ArrayList(queryObject.setCacheable(true).list());
        transformEntities(transform, results);
        return new ${fullyQualifiedPagingResultName}(results.toArray(new Object[results.size()]), totalCount);
#else
        try
        {
            final ${hibernateUtils.basePackage}.ScrollableResults scrollableResults = queryObject.scroll();
            scrollableResults.last();
            int totalCount = scrollableResults.getRowNumber();
            totalCount = totalCount >= 0 ? totalCount + 1 : 0;
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            // Unchecked transformation because Set object is reused, cannot be strongly typed.
            java.util.Collection results = new java.util.ArrayList(queryObject.setCacheable(true).list());
            transformEntities(transform, results);
            return new ${fullyQualifiedPagingResultName}(results.toArray(new Object[results.size()]), totalCount);
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
#end
    }

#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#foreach ($attribute in $attributes)
#if ($attribute.unique)
#set ($searchUniqueMethod = "searchUnique${stringUtils.capitalise($attribute.name)}")
    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public ${entity.fullyQualifiedEntityName} $searchUniqueMethod(final ${attribute.type.fullyQualifiedName} ${attribute.name})
    {
        final $fullyQualifiedSearchClassName search=new $fullyQualifiedSearchClassName(
            new ${springTypesPackage}.SearchParameter[]{
                new ${springTypesPackage}.SearchParameter("${attribute.name}",${attribute.name},${springTypesPackage}.SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final java.util.Collection#if($enableTemplating)<#if($daoInheritance)? extends #end${rootEntityType}>#end searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return#if(!$enableTemplating) ($entity.fullyQualifiedName)#end searchResult.iterator().next();
            default: throw new org.hibernate.NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
#if ($enableAnnotations)
    @Override
#end
    public Object $searchUniqueMethod(final int transform, final ${attribute.type.fullyQualifiedName} ${attribute.name})
    {
        final ${entity.fullyQualifiedEntityName} entity=this.$searchUniqueMethod(${attribute.name});
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

#end
#end

    /**
     * Create or Update the <code>$argumentName</code> instance in the persistent store.
     * @param $argumentName
     */
#if ($enableAnnotations)
    @Override
#end
    public $entity.fullyQualifiedEntityName createOrUpdate($entity.fullyQualifiedEntityName $argumentName)
    {
        if(${argumentName}.${entity.identifiers.get(0).getterName}() == null)
        {
#if ($entity.abstract)
            throw new RuntimeException("Abstract entity $entity.fullyQualifiedEntityName cannot be created.");
#else
            return ($entity.fullyQualifiedEntityName)this.create(${entity.daoNoTransformationConstantName},$argumentName);
#end
        }
        this.update($argumentName);
        return $argumentName;
    }

    // spring-hibernate-dao-base merge-point
}
#end