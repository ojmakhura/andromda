package ${applicationPackage};

import java.util.Collection;

import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Join;

public class ${stringUtils.capitalize($applicationId)} {

    public static <E, T>Specification<E> findByAttributeNull(String attribute) {
        return (root, cq, cb) -> {
            
            return cb.isNull(root.<T>get(attribute));
        };
    }

    public static <E, T>Specification<E> findByAttributeNotNull(String attribute) {
        return (root, cq, cb) -> {
            
            return cb.isNotNull(root.<T>get(attribute));
        };
    }

    public static <E, T>Specification<E> findByAttribute(String attribute, T attributeValue) {
        return (root, cq, cb) -> {
            
            return cb.equal(root.<T>get(attribute), attributeValue);
        };
    }

    public static <E, T>Specification<E> findByAttributeNotEqual(String attribute, T attributeValue) {
        return (root, cq, cb) -> {
            
            return cb.notEqual(root.<T>get(attribute), attributeValue);
        };
    }

    public static <E, T>Specification<E> findByAttributeFalse(String attribute){
        return (root, cq, cb) -> {
            
            return cb.isFalse(root.<Boolean>get(attribute));
        };
    }

    public static <E, T>Specification<E> findByAttributeTrue(String attribute){
        return (root, cq, cb) -> {
            
            return cb.isTrue(root.<Boolean>get(attribute));
        };
    }

    public static <E, T>Specification<E> findByAttributeStartingWithIgnoreCase(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.like(cb.upper(root.<String>get(attribute)), attributeValue.toUpperCase() + "%");
        };
    }
    
    public static <E, T>Specification<E> findByAttributeEndingWithIgnoreCase(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.like(cb.upper(root.<String>get(attribute)), "%" + attributeValue.toUpperCase());
        };
    }
    
    public static <E, T>Specification<E> findByAttributeContainingIgnoreCase(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.like(cb.upper(root.<String>get(attribute)), "%" + attributeValue.toUpperCase() + "%");
        };
    }
    
    public static <E, T>Specification<E> findByAttributeLikeIgnoreCase(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.like(cb.upper(root.<String>get(attribute)), "%" + attributeValue.toUpperCase() + "%");
        };
    }
    
    public static <E, T>Specification<E> findByAttributeNotLikeIgnoreCase(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.notLike(cb.upper(root.<String>get(attribute)), "%" + attributeValue.toUpperCase() + "%");
        };
    }
    
    public static <E, T>Specification<E> findByAttributeContaining(String attribute, String attributeValue){
        return (root, cq, cb) -> {
            
            return cb.like(root.<String>get(attribute), "%" + attributeValue.toUpperCase() + "%");
        };
    }

    public static <E, T extends Comparable<T>>Specification<E> findByAttributeLessThan(String attribute, T attributeValue){
        return (root, cq, cb) -> {
            
            return cb.lessThan(root.<T>get(attribute), attributeValue);
        };
    }
    
    public static <E, T extends Comparable<T>>Specification<E> findByAttributeLessThanEqual(String attribute, T attributeValue){
        return (root, cq, cb) -> {
            
            return cb.lessThanOrEqualTo(root.<T>get(attribute), attributeValue);
        };
    }
    
    public static <E, T extends Comparable<T>>Specification<E> findByAttributeGreaterThan(String attribute, T attributeValue){
        return (root, cq, cb) -> {
            
            return cb.greaterThan(root.<T>get(attribute), attributeValue);
        };
    }
    
    public static <E, T extends Comparable<T>>Specification<E> findByAttributeGreaterThanEqual(String attribute, T attributeValue){
        return (root, cq, cb) -> {
            
            return cb.greaterThanOrEqualTo(root.<T>get(attribute), attributeValue);
        };
    }
    
    public static <E, T extends Comparable<T>>Specification<E> findByAttributeBetween(String attribute, T attributeStart, T attributeEnd){
        return (root, cq, cb) -> {
            
            return cb.between(root.<T>get(attribute), attributeStart, attributeEnd);
        };
    }

    public static <E, T extends Comparable<T>>Specification<E> findByAttributeIn(String attribute, Collection<T> proprertyIn){

        return (root, cq, cb) -> {
            
            return root.join(attribute).in(proprertyIn);
        };
    }

    public static <E, J, T>Specification<E> findByJoinAttribute(String joinAttribute, String attribute, T attributeValue) {

        return (root, cq, cb) -> {
            Join<E, J> join = root.join(joinAttribute);
            return cb.equal(join.get(attribute), attributeValue);
        };
    }

    public static <E, J, T>Specification<E> findByJoinAttributeIn(String joinAttribute, String attribute, Collection<T> attributeValues) {
        return (root, cq, cb) -> {
            
            // One to Many
            Join<E, J> join = root.join(joinAttribute);
            return cb.in(join.<E>get(attribute)).value(attributeValues);
        };
    }

    public static <E, J, T>Specification<E> findByJoinAttributeIdNull(String joinAttribute, String attribute) {
        return (root, cq, cb) -> {
            
            Join<E, J> join = root.join(joinAttribute);
            return cb.isNull(join.<E>get(attribute));
        };
    }

    public static <E, J, T>Specification<E> findByJoinAttributeNotNull(String joinAttribute, String attribute) {
        return (root, cq, cb) -> {
            Join<E, J> join = root.join(joinAttribute);
            return cb.isNotNull(join.<E>get(attribute));
        };
    }

    public static <E, J1, J2, T>Specification<E> findByJoinAttribute(String joinAttribute1, String joinAttribute2, String attribute, T attributeValue) {

        return (root, cq, cb) -> {
            Join<E, J1> join1 = root.join(joinAttribute1);
            Join<E, J2> join2 = join1.join(joinAttribute2);
            return cb.equal(join2.<E>get(attribute), attributeValue);
        };
    }
}