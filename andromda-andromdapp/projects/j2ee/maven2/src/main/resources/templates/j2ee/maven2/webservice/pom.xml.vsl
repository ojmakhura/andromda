<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>$applicationPackage</groupId>
        <artifactId>$applicationId</artifactId>
        <version>$applicationVersion</version>
    </parent>
    <artifactId>${applicationId}-webservice</artifactId>
#if(!$springws)
    <packaging>war</packaging>
#end
    <name>${applicationName} Web Services</name>
    <dependencies>
#if (!$transactionPersistenceType.equals("none") || $cxf)
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>${applicationId}-core</artifactId>
            <version>${project.version}</version>
        </dependency>
#end
#if ($jaxws)
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-rt</artifactId>
            <version>2.3-b24</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-tools</artifactId>
            <version>2.3-b24</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
#elseif ($cxf)
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <!-- Includes spring core, beans, and context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!-- Includes org.springframework.web.context.ContextLoaderListener -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Depending on your requirements you may need to exclude some dependencies from cxf, spring -->
        <!-- Uncomment if using JMS transport. Includes spring-tx >
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jms</artifactId>
            <version>${spring.version}</version>
        </dependency-->
#if ($webservice.equals("soap") || $webservice.equals("both"))
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxws</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf.xjc-utils</groupId>
            <artifactId>cxf-xjc-runtime</artifactId>
        </dependency>
#end
#if($webservice.equals("rest") || $webservice.equals("both"))
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
        </dependency>
#end
        <!-- Jetty is needed for building/testing the CXFServlet (creates geronimo dependencies) -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-continuation</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-http</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-io</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-security</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Tomcat contains this dependency, but not Jetty -->
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>el-api</artifactId>
            <version>2.2.1-b04</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- If using Websphere or IBM JVM, uncomment JAXP dependencies >
        <dependency>
            <groupId>com.sun.xml</groupId>
            <artifactId>jaxp-ri</artifactId>
            <version>1.4.2</version>
        </dependency>
        <dependency>
            <groupId>javax.xml</groupId>
            <artifactId>jaxp-api</artifactId>
            <version>1.4.2</version>
        </dependency> -->
#elseif($springws)
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
#if($secure)
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-common</artifactId>
        </dependency>
#end
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
#end
#if($useLombok)
    <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.34</version>
            <optional>true</optional>
        </dependency>
#end
    </dependencies>
    <build>
        <finalName>${application.id}-webservice</finalName>
        <!-- Change from default src/main/java and src/test/java>
        <sourceDirectory>src</sourceDirectory>
        <testSourceDirectory>src-test</testSourceDirectory -->
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
#if($springws)
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/src/main/java</source>
                            </sources>
                            <sources>
                                <source>src/main/resources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
#end
            </plugin>
#if($springws)
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
					<fork>true</fork>
					<skip>false</skip>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
            </plugin>
#end
#if(!$springws)
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <!-- Default for maven is src/main/webapp. WebContent is Eclipse convention. -->
                    <warSourceDirectory>src/main/webapp</warSourceDirectory>
                    <warName>${project.artifactId}</warName>
                    <excludes>**/*.java</excludes>
                    <!-- Even though these dependencies are 'provided', they are still bundled with the war file. Modify as necessary.
                         Exclude everything not already included in the EAR. -->
                    <packagingExcludes>**/*.java,**/*.ref,**/andromda-*.jar,**/active*.jar,**/antlr*.jar,**/backport*.jar,**/bsh*.jar,**/*-pool.jar,**/cxf-rt*.jar,**/cxf-api*.jar,**/cxf-common*.jar,**/cxf-tools*.jar,**/dom4j*.jar,**/ehcache*.jar,**/geronimo-*.jar,**/groovy*.jar,**/jaxb-xjc*.jar,**/jetty*.jar,**/jaxen*.jar,**/jdom*.jar,**/oro-*.jar,**/qdox*.jar,**/saaj*.jar,**/spring-2.0.8.jar,**/stax*.jar,**/woodstox*.jar,**/xerces*.jar,**/xml-api*.jar,**/xmlbean*.jar</packagingExcludes>
                    <archive>
                        <manifest>
                          <addClasspath>true</addClasspath>
                          <useUniqueVersions>false</useUniqueVersions>
                          <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                          <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                          <Implementation-Build>${maven.build.timestamp}</Implementation-Build>
                          <url>${project.url}</url>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
#end
#if ($jetty)
            <!-- See http://wiki.eclipse.org/Jetty/Reference and http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html -->
            <!-- If you see ClassNotFoundException: org.springframework.web.context.ContextLoaderListener
                and are running maven2, switch jetty.version to 7.x. v8 requires maven3 -->
            <!-- Jetty v9: Not possible to configure jetty port through maven, doesn't run jetty.xml properly -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <connectors>
                       <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                          <port>${service.port}</port>
                          <maxIdleTime>60000</maxIdleTime>
                       </connector>
                    </connectors>
                    <webAppSourceDirectory>${project.basedir}/src/main/webapp</webAppSourceDirectory>
                    <webApp>
                        <contextPath>/${project.artifactId}</contextPath>
                    </webApp>
                    <useTestClasspath>true</useTestClasspath>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <stopKey>foo</stopKey>
                    <stopPort>9999</stopPort>
                    <stopWait>5</stopWait>
                </configuration>
                <executions>
                    <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                           <scanIntervalSeconds>0</scanIntervalSeconds>
                           <daemon>true</daemon>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
#end
#if ($tomcat)
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <configuration>
                    <contextFile>src/main/resources/META-INF/context.xml</contextFile>
                    <path>/${project.build.finalName}</path>
                    <port>${service.port}</port>
                    <warDirectory>target/${project.build.finalName}</warDirectory>
                    <ignorePackaging>true</ignorePackaging>
                </configuration>
            </plugin>
#end
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
        </plugins>
#if ($springws)
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>target/src/main/java</directory>
            </resource>
        </resources>
#end
    </build>
#if ($cxf)
    <properties>
        <!-- maven.test.skip>true</maven.test.skip -->
    </properties>
#end
</project>
