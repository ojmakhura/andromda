<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>$applicationPackage</groupId>
        <artifactId>$applicationId</artifactId>
        <version>$applicationVersion</version>
    </parent>
    <artifactId>${applicationId}-CXF</artifactId>
    <packaging>war</packaging>
    <name>${applicationName} CXF Web Services</name>
    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
#if ($jaxws)
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-rt</artifactId>
            <version>2.3-b24</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-tools</artifactId>
            <version>2.3-b24</version>
            <scope>runtime</scope>
        </dependency>
#elseif ($cxf)
        <!--
             Spring is directly included to override the version 2.0.5 cxf
             brings in its own dependencies.  This is not strictly necessary but
             just being shown to let you know how this is done.
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>

        <!-- Depending on your requirements you may need more or less modules from cxf -->
#if ($webservice.equals("soap") || $webservice.equals("both"))
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxws</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.apache.cxf.xjc-utils</groupId>
            <artifactId>cxf-xjc-runtime</artifactId>
        </dependency>
        <!-- Tools not included within a single dependency - annoying -->
        <dependency>
           <groupId>org.apache.cxf</groupId>
           <artifactId>cxf-tools-validator</artifactId>
           <version>${cxf.version}</version>
           <scope>provided</scope>
        </dependency>
        <dependency>
           <groupId>org.apache.cxf</groupId>
           <artifactId>cxf-tools-java2ws</artifactId>
           <version>${cxf.version}</version>
           <scope>provided</scope>
        </dependency>
#end
#if($webservice.equals("rest") || $webservice.equals("both"))
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
        </dependency>
#end
        <!-- Jetty is needed for building/testing the CXFServlet (creates geronimo dependencies) -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-continuation</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-http</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-io</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-security</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Tomcat contains this dependency, but not Jetty -->
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>el-api</artifactId>
            <version>2.2.1-b04</version>
            <scope>test</scope>
        </dependency>
        <!-- Otherwise when we launch jetty we get 'Could not load extension class org.apache.cxf.javascript.JavascriptServerListener.' -->
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-javascript</artifactId>
            <version>${cxf.version}</version>
            <scope>test</scope>
        </dependency>
#end
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <warSourceDirectory>src/main/webapp</warSourceDirectory>
                    <excludes>**/*.java</excludes>
                    <warName>${project.artifactId}</warName>
                    <packagingExcludes>**/*.java,**/*.ref,**/andromda-*.jar,**/active*.jar,**/antlr*.jar,**/backport*.jar,**/bsh*.jar,**/*-pool.jar,**/cxf-rt*.jar,**/cxf-api*.jar,**/cxf-common*.jar,**/cxf-tools*.jar,**/dom4j*.jar,**/ehcache*.jar,**/geronimo-servlet*.jar,**/geronimo-jms*.jar,**/groovy*.jar,**/jaxb-xjc*.jar,**/jetty*.jar,**/jaxen*.jar,**/jdom*.jar,**/qdox*.jar,**/spring-2.0.8.jar,**/xalan*.jar,**/xerces*.jar, **/xml-api*.jar,**/xmlbean*.jar,**/xmlsec*.jar</packagingExcludes>
                </configuration>
            </plugin>
#if ($webservice.equals("soap") || $webservice.equals("both"))
            <!-- Run the generated buildWS ant script which runs CXF wsdl2java and java2ws -->
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <version>${maven-antrun-plugin.version}</version>
              <executions>
                <!-- Generated ant script runs java2ws for each service -->
                <execution>
                  <id>buildWS</id>
                  <phase>generate-sources</phase>
                  <configuration>
                    <target>
                        <property name="build.compiler" value="extJavac"/>
                        <property name="andromda.project" value="${andromda.project}"/>
                        <property name="project" value="${project.basedir}/.."/>
                        <property name="compile_classpath" refid="maven.compile.classpath"/>
                        <property name="runtime_classpath" refid="maven.runtime.classpath"/>
                        <property name="test_classpath" refid="maven.test.classpath"/>
                        <ant antfile="${project.basedir}/../webservice/buildWS.xml">
                            <target name="wsdlgenall"/>
                        </ant>
                    </target>
                  </configuration>
                  <goals>
                    <goal>run</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
#end
#if ($jetty || $tomcat)
#if ($jetty)
            <!-- See http://wiki.eclipse.org/Jetty/Reference and http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin -->
            <!-- Must start webservice server project from CXF client project in order to execute all phases properly in a single project -->
            <!-- All phases before test-compile executed twice, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=342643 -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <connectors>
                       <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                          <port>${service.port}</port>
                          <maxIdleTime>60000</maxIdleTime>
                       </connector>
                    </connectors>
                    <webAppSourceDirectory>${project.parent.basedir}/webservice/src/main/webapp</webAppSourceDirectory>
                    <webApp>
                        <contextPath>/${project.parent.artifactId}-webservice</contextPath>
                    </webApp>
                    <useTestClasspath>true</useTestClasspath>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <stopKey>foo</stopKey>
                    <stopPort>9999</stopPort>
                    <stopWait>5</stopWait>
                </configuration>
                <executions>
                    <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <scanIntervalSeconds>0</scanIntervalSeconds>
                            <daemon>true</daemon>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Run integration tests *ITCase.java against running Jetty server in the webservice project -->
            <!-- See http://docs.codehaus.org/display/MAVENUSER/Maven+and+Integration+Testing -->
#end
#if ($tomcat)
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <configuration>
                    <!-- Address $server.port in use when running after webservice build -->
                    <port>9090</port>
                    <contextFile>${project.parent.basedir}/webservice/src/main/resources/META-INF/context.xml</contextFile>
                    <!--configurationDir>${project.build.directory}/tomcat</configurationDir-->
                    <warSourceDirectory>${project.parent.basedir}/webservice/src/main/webapp</warSourceDirectory>
                    <warDirectory>${project.parent.basedir}/webservice/target/${project.build.finalName}</warDirectory>
                    <ignorePackaging>true</ignorePackaging>
                    <path>/${project.parent.artifactId}-webservice</path>
                    <!-- optional if you want to add some extra directories into the classloader -->
                    <additionalClasspathDirs>
                      <additionalClasspathDir></additionalClasspathDir>
                    </additionalClasspathDirs>
                </configuration>
                <!-- Needed to run webservice project with webservice dependencies -->
                <dependencies>
                    <dependency>
                        <groupId>${project.parent.groupId}</groupId>
                        <artifactId>${project.parent.artifactId}-core</artifactId>
                        <version>${project.parent.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
#end
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>5</threadCount>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
#end
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
#if ($cxf)
            <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
            <plugin>
                <groupId>org.eclipse.m2e</groupId>
                <artifactId>lifecycle-mapping</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <lifecycleMappingMetadata>
                        <pluginExecutions>
                            <pluginExecution>
                                <pluginExecutionFilter>
                                    <groupId>org.apache.maven.plugins</groupId>
                                    <artifactId>maven-antrun-plugin</artifactId>
                                    <versionRange>[1.6,)</versionRange>
                                    <goals>
                                        <goal>run</goal>
                                    </goals>
                                </pluginExecutionFilter>
                                <action>
                                    <ignore></ignore>
                                </action>
                            </pluginExecution>
                        </pluginExecutions>
                    </lifecycleMappingMetadata>
                </configuration>
            </plugin>
#end
        </plugins>
    </build>
    <properties>
        <andromda.project>${project.basedir}/..</andromda.project>
    </properties>
</project>