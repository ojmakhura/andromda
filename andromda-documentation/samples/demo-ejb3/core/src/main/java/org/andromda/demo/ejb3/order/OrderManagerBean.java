// license-header java merge-point
//
// Generated by SessionBeanImpl.vsl in andromda-ejb3-cartridge on 08/06/2014 10:56:22.
// Modify as necessary. If deleted it will be regenerated.
//
package org.andromda.demo.ejb3.order;

import java.util.Collection;

/**
 * @see OrderManagerBase
 *
 * Remember to manually configure the local business interface this bean implements if originally you only
 * defined the remote business interface.  However, this change is automatically reflected in the ejb-jar.xml.
 *
 * Do not specify the jakarta.ejb.Stateless annotation
 * Instead, the session bean is defined in the ejb-jar.xml descriptor.
 */
// Uncomment to enable webservices for OrderManagerBean
// @javax.jws.WebService(endpointInterface = "org.andromda.demo.ejb3.order.OrderManagerWSInterface", serviceName = "OrderManager")
public class OrderManagerBean
    extends OrderManagerBase
    implements OrderManagerRemote
{
    // --------------- Constructors ---------------

    /**
     * Default constructor extending base class default constructor
     */
    public OrderManagerBean()
    {
        super();
    }

    // -------- Business Methods Impl --------------

    /**
     * @see OrderManagerBase#addOrder(OrderInfo)
     */
    @Override
    protected long handleAddOrder(OrderInfo order)
        throws Exception
    {
        return getOrderInfoDao().create(order).getId();
    }

    /**
     * @see OrderManagerBase#getOrders(int)
     */
    @Override
    protected Collection handleGetOrders(int index)
        throws Exception
    {
        return getOrderInfoDao().findAllByIndex(index);
    }

    /**
     * @see OrderManagerBase#getOrders(int, int)
     */
    @Override
    protected Collection handleGetOrders(int index, int max)
        throws Exception
    {
        return getOrderInfoDao().findAllWithLimits(index, max);
    }

    /**
     * @see OrderManagerBase#getAllOrders()
     */
    @Override
    protected Collection handleGetAllOrders()
        throws Exception
    {
        return getOrderInfoDao().loadAll();
    }

    // -------- Lifecycle Callback Implementation --------------
}
