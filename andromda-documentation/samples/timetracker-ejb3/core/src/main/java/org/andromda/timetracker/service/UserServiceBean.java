// license-header java merge-point
//
// Generated by SessionBeanImpl.vsl in andromda-ejb3-cartridge on 08/05/2014 14:24:56.
// Modify as necessary. If deleted it will be regenerated.
//
package org.andromda.timetracker.service;

import java.util.Collection;
import org.andromda.timetracker.domain.User;
import org.andromda.timetracker.domain.UserDao;
import org.andromda.timetracker.domain.UserDaoException;
import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserVO;

/**
 * @see UserServiceBase
 *
 * Remember to manually configure the local business interface this bean implements if originally you only
 * defined the remote business interface.  However, this change is automatically reflected in the ejb-jar.xml.
 *
 * Do not specify the jakarta.ejb.Stateless annotation
 * Instead, the session bean is defined in the ejb-jar.xml descriptor.
 */
// Uncomment to enable webservices for UserServiceBean
// @javax.jws.WebService(endpointInterface = "org.andromda.timetracker.service.UserServiceWSInterface", serviceName = "UserService")
public class UserServiceBean
    extends UserServiceBase
    implements UserServiceRemote
{
    // --------------- Constructors ---------------

    /**
     * Default constructor extending base class default constructor
     */
    public UserServiceBean()
    {
        super();
    }

    // -------- Business Methods Impl --------------

    /**
     * @see UserServiceBase#getAllUsers()
     */
    @Override
    protected UserVO[] handleGetAllUsers()
        throws Exception
    {
        Collection userVOs = this.getUserDao().loadAll(UserDao.TRANSFORM_USERVO);
        return (UserVO[])userVOs.toArray(new UserVO[0]);
    }

    /**
     * @see UserServiceBase#registerUser(UserDetailsVO)
     */
    @Override
    protected UserDetailsVO handleRegisterUser(UserDetailsVO userDetailVO)
        throws Exception
    {
        User user = this.getUserDao().userDetailsVOToEntity(userDetailVO);
        user = this.getUserDao().create(user);
        return this.getUserDao().toUserDetailsVO(user);
    }

    /**
     * @see UserServiceBase#getAllUsers()
     */
    @Override
    protected UserVO handleGetUser(String username) throws Exception
    {
        try
        {
            User user = this.getUserDao().findByUsername(username);
            return getUserDao().toUserVO(user);
        }
        catch (UserDaoException ex)
        {
            throw new UserDoesNotExistException("User does not exist " + username);
        }
    }

    /**
     * @see UserServiceBase#removeUser(UserVO)
     */
    @Override
    protected void handleRemoveUser(UserVO userVO)
        throws Exception
    {
        getUserDao().remove(userVO.getId());
    }


    // -------- Lifecycle Callback Implementation --------------

}
