// license-header java merge-point
//
/**
 * Generated by test/EntityTest.java.vsl in andromda-ejb3-cartridge on 10/16/2012 18:00:26.
 * This file can be safely modified. If deleted it will be regenerated.
 */
package org.andromda.timetracker.domain;
/**
 * TestNG Unit Test to Create and Validate and Update and Delete the Timecard Entity
 */

import java.util.List;
import jakarta.persistence.TypedQuery;
import org.andromda.dbtest.JPAJUnitAncestor;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Create TIMECARD row from Timecard Entity
 */
public class TimecardEntityTest extends JPAJUnitAncestor
{
    private static Logger LOGGER = LogManager.getLogger(TimecardEntityTest.class);
    /** Persisted Entity to retrieve and update and delete from */
    protected static Timecard entity = null;

    /**
     * Creates TIMECARD record. TestNG creates test group is run before retrieves and deletes.
     */
    @Test(groups = { "deleteAll" }, priority=1000+0)
    public void testDeleteAllTimecards()
    {
        LOGGER.info("TEST DELETE ALL Timecard, priority " + (1000+0));
        // Delete all rows from table  - avoid duplicate PK error or created record not found
        this.deleteAll();
        int results = this.logEntities();
        // Will also fail if all rows are not deleted during setUp
        Assert.assertTrue(results == 0, "Timecards deleted but records found: " + results);
        LOGGER.info("SUCCESS: DELETE ALL Timecard " + results);
    }

    /**
     * Creates TIMECARD record. TestNG creates test group is run before retrieves and deletes.
     */
    @Test(groups = { "creates" }, priority=2000+30)
    public void testCreateTimecard()
    {
        LOGGER.info("TEST CREATE Timecard, priority " + (2000+30));
        Timecard timecard = TimecardCreate.createEntity(this.getEm());
        LOGGER.debug("persisting " + timecard);
        this.getEm().persist(timecard);
        int results = this.logEntities();
        // Will also fail if all rows are not deleted during setUp
        Assert.assertTrue(results > 0, "Timecard inserted but record not found: " + results);
        // Save PK for later retrieve/delete
        TimecardEntityTest.entity = timecard;
        LOGGER.info("SUCCESS: CREATED Timecard " + timecard);
    }

    /**
     * Retrieving TIMECARD record. Run after TestNG creates test group and before deletes group.
     */
    @Test(groups = { "retrieves" }, ignoreMissingDependencies=true, priority=3000+30)
    public void testRetrieveTimecard()
    {
        LOGGER.info("TEST RETRIEVE Timecard, priority " + (3000+30));
        Long pk = Long.valueOf(1);
        Timecard timecard = this.getEm().find(Timecard.class, pk);
        if (timecard==null)
        {
            LOGGER.info("Timecard not found for Primary Key value: " + pk + ", findingFirst Entity");
            timecard = TimecardCreate.findFirst(this.getEm());
        }
        else
        {
            LOGGER.info("SUCCESS: RETRIEVED Timecard: " + timecard);
        }
    }

    /**
     * Deleting TIMECARD record. Run after TestNG creates and retrieves test group.
     */
    @Test(groups = { "deletes" }, ignoreMissingDependencies=true, priority=5000+0)
    public void testDeleteTimecard()
    {
        LOGGER.info("TEST DELETE Timecard, priority " + (5000+0));
        Timecard timecard = TimecardCreate.findFirst(this.getEm());
        if (!this.getEm().contains(timecard))
        {
            LOGGER.info("merging Timecard: " + timecard);
            timecard = this.getEm().merge(timecard);
        }
        LOGGER.info("deleting Timecard: " + timecard);
        this.getEm().remove(timecard);
        LOGGER.info("SUCCESS: DELETED Timecard");
    }

    /**
     * Find All Entities Timecard - run only against test DB
     * @return Timecard
     */
    public List<Timecard> findAll()
    {
        TypedQuery<Timecard> query = this.getEm().createNamedQuery("Timecard.findAll", Timecard.class);
        List<Timecard> results = query.getResultList();
        return results;
    }

    /*
     * Return a persisted Entity Timecard with all attributes and associations set
     * Used to set persistent association relationships in related entities.
     * Called by test delete method - this method should not be a test method
     * @return Timecard
    public Timecard findFirst()
    {
        Timecard timecard = null;
        List<Timecard> results = findAll();
        if (results.size() > 0)
        {
            timecard = results.get(0);
        }
        else
        {
            timecard = TimecardCreate.createEntity(this.getEm());
            this.getEm().persist(timecard);
        }
        return timecard;
    }
     */

    /**
     * Add any custom code to be executed once before any tests are executed
     */
    @Override
    @BeforeClass(alwaysRun=true)
    public void setUpBeforeClass()
    {
        super.setUpBeforeClass();
        // Insert code here to be executed before any tests are run
    }

    /**
     * Add any custom code to be executed once after all tests are executed
     */
    @Override
    @AfterClass(alwaysRun=true)
    public void tearDownAfterClass()
    {
        super.tearDownAfterClass();
        // Insert code here to be executed after tests are complete
        //super.closeAll();
    }

    /**
     * Add any custom code to be executed before each tests are executed
     */
    @Override
    @BeforeMethod(alwaysRun=true)
    public void setUp()
    {
        super.setUp();
    }

    /**
     * Add any custom code to be executed after each tests are executed
     */
    @Override
    @AfterMethod(alwaysRun=true)
    public void tearDown()
    {
        super.tearDown();
    }

    /**
     * Unit test Constructor with no arguments
     */
    public TimecardEntityTest()
    {
        super();
        // Public no arg constructor
        this.entityName = "Timecard";
        this.table = "TIMECARD";
    }

    /**
     * Unit test Constructor with test case name
     * @param name test case name
     */
    public TimecardEntityTest(final String name)
    {
        super(name);
        this.entityName = "Timecard";
        this.table = "TIMECARD";
    }
}