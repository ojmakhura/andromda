// license-header java merge-point
//
/**
 * Generated by test/EntityTest.java.vsl in andromda-ejb3-cartridge on 10/16/2012 18:00:26.
 * This file can be safely modified. If deleted it will be regenerated.
 */
package org.andromda.timetracker.domain;
/**
 * TestNG Unit Test to Create and Validate and Update and Delete the UserRole Entity
 */

import java.util.List;
import jakarta.persistence.TypedQuery;
import org.andromda.dbtest.JPAJUnitAncestor;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Create USER_ROLE row from UserRole Entity
 */
public class UserRoleEntityTest extends JPAJUnitAncestor
{
    private static Logger LOGGER = LogManager.getLogger(UserRoleEntityTest.class);
    /** Persisted Entity to retrieve and update and delete from */
    protected static UserRole entity = null;

    /**
     * Creates USER_ROLE record. TestNG creates test group is run before retrieves and deletes.
     */
    @Test(groups = { "deleteAll" }, priority=1000+30)
    public void testDeleteAllUserRoles()
    {
        LOGGER.info("TEST DELETE ALL UserRole, priority " + (1000+30));
        // Delete all rows from table  - avoid duplicate PK error or created record not found
        this.deleteAll();
        int results = this.logEntities();
        // Fail if all rows are not deleted during setUp
        Assert.assertTrue(results == 0, "UserRoles not deleted: " + results);
        LOGGER.info("SUCCESS: DELETED UserRole " + results);
    }

    /**
     * Creates USER_ROLE record. TestNG creates test group is run before retrieves and deletes.
     */
    @Test(groups = { "creates" }, priority=2000+0)
    public void testCreateUserRole()
    {
        LOGGER.info("TEST CREATE UserRole, priority " + (2000+0));
        UserRole userRole = UserRoleCreate.createEntity(this.getEm());
        LOGGER.debug("persisting " + userRole);
        this.getEm().persist(userRole);
        int results = this.logEntities();
        // Will also fail if all rows are not deleted during setUp
        Assert.assertTrue(results > 0, "UserRole inserted but record not found: " + results);
        // Save PK for later retrieve/delete
        UserRoleEntityTest.entity = userRole;
        LOGGER.info("SUCCESS: CREATED UserRole " + userRole);
    }

    /**
     * Retrieving USER_ROLE record. Run after TestNG creates test group and before deletes group.
     */
    @Test(groups = { "retrieves" }, ignoreMissingDependencies=true, priority=3000+0)
    public void testRetrieveUserRole()
    {
        LOGGER.info("TEST RETRIEVE UserRole, priority " + (3000+0));
        Long pk = Long.valueOf(1);
        UserRole userRole = this.getEm().find(UserRole.class, pk);
        if (userRole==null)
        {
            LOGGER.info("UserRole not found for Primary Key value: " + pk + ", findingFirst Entity");
            userRole = UserRoleCreate.findFirst(this.getEm());
        }
        else
        {
            LOGGER.info("SUCCESS: RETRIEVED UserRole: " + userRole);
        }
    }

    /**
     * Deleting USER_ROLE record. Run after TestNG creates and retrieves test group.
     */
    @Test(groups = { "deletes" }, ignoreMissingDependencies=true, priority=5000+30)
    public void testDeleteUserRole()
    {
        LOGGER.info("TEST DELETE UserRole, priority " + (5000+30));
        UserRole userRole = UserRoleCreate.findFirst(this.getEm());
        if (!this.getEm().contains(userRole))
        {
            LOGGER.info("merging UserRole: " + userRole);
            userRole = this.getEm().merge(userRole);
        }
        LOGGER.info("deleting UserRole: " + userRole);
        this.getEm().remove(userRole);
        LOGGER.info("SUCCESS: DELETED UserRole");
    }

    /**
     * Find All Entities UserRole - run only against test DB
     * @return UserRole
     */
    public List<UserRole> findAll()
    {
        TypedQuery<UserRole> query = this.getEm().createNamedQuery("UserRole.findAll", UserRole.class);
        List<UserRole> results = query.getResultList();
        return results;
    }

    /*
     * Return a persisted Entity UserRole with all attributes and associations set
     * Used to set persistent association relationships in related entities.
     * Called by test delete method - this method should not be a test method
     * @return UserRole
    public UserRole findFirst()
    {
        UserRole userRole = null;
        List<UserRole> results = findAll();
        if (results.size() > 0)
        {
            userRole = results.get(0);
        }
        else
        {
            userRole = UserRoleCreate.createEntity(this.getEm());
            this.getEm().persist(userRole);
        }
        return userRole;
    }
     */

    /**
     * Add any custom code to be executed once before any tests are executed
     */
    @Override
    @BeforeClass(alwaysRun=true)
    public void setUpBeforeClass()
    {
        super.setUpBeforeClass();
        // Insert code here to be executed before any tests are run
    }

    /**
     * Add any custom code to be executed once after all tests are executed
     */
    @Override
    @AfterClass(alwaysRun=true)
    public void tearDownAfterClass()
    {
        super.tearDownAfterClass();
        // Insert code here to be executed after tests are complete
        //super.closeAll();
    }

    /**
     * Add any custom code to be executed before each tests are executed
     */
    @Override
    @BeforeMethod(alwaysRun=true)
    public void setUp()
    {
        super.setUp();
    }

    /**
     * Add any custom code to be executed after each tests are executed
     */
    @Override
    @AfterMethod(alwaysRun=true)
    public void tearDown()
    {
        super.tearDown();
    }

    /**
     * Unit test Constructor with no arguments
     */
    public UserRoleEntityTest()
    {
        super();
        // Public no arg constructor
        this.entityName = "UserRole";
        this.table = "USER_ROLE";
    }

    /**
     * Unit test Constructor with test case name
     * @param name test case name
     */
    public UserRoleEntityTest(final String name)
    {
        super(name);
        this.entityName = "UserRole";
        this.table = "USER_ROLE";
    }
}