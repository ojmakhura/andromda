<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.andromda</groupId>
        <artifactId>andromda-etc</artifactId>
        <version>4.0-SNAPSHOT</version>
    </parent>
    <groupId>org.andromda.jdbcmetadata</groupId>
    <artifactId>jdbcmetadata</artifactId>
    <packaging>pom</packaging>
    <name>JDBCMetadata</name>
    <description>Creates metadata objects from JDBC connection. Used by maven and ant plugins.</description>
    <developers>
        <developer>
            <id></id>
            <name>Bob Fields</name>
            <email>Bob.Fields@disney.com</email>
            <organization>Walt Disney World</organization>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone></timezone>
        </developer>
    </developers>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.andromda.translationlibraries</groupId>
                <artifactId>andromda-ocl-query-library</artifactId>
                <version>${andromda.version}</version>
                <scope>provided</scope>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- This dependency provides the ability to implement your
                 business logic in an interpreted manner during development on
                 your local machine -->
            <dependency>
                <groupId>org.andromda</groupId>
                <artifactId>andromda-script-wrappers</artifactId>
                <version>${andromda.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>1.9.2</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.9</version>
            </dependency>
            <dependency>
                <groupId>commons-collections</groupId>
                <artifactId>commons-collections</artifactId>
                <version>3.2.2</version>
            </dependency>
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>1.3.1</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.7</version>
            </dependency>
	        <dependency>
	            <groupId>org.apache.commons</groupId>
	            <artifactId>commons-lang3</artifactId>
                <version>3.7</version>
	        </dependency>
            <!-- <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>${commons-lang.version}</version>
            </dependency> -->
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.1.3</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.spec</groupId>
                <artifactId>jboss-javaee-all-7.0</artifactId>
                <version>1.0.1.Final</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-entitymanager</artifactId>
                <version>${hibernate.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>javax.transaction</groupId>
                        <artifactId>jta</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>xml-apis</groupId>
                        <artifactId>xml-apis</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>5.3.5.Final</version>
            </dependency>
            <dependency>
                <groupId>net.sf.ehcache.internal</groupId>
                <artifactId>ehcache-core</artifactId>
                <version>2.8.2</version>
            </dependency>
            <dependency>
                <groupId>org.javassist</groupId>
                <artifactId>javassist</artifactId>
                <version>3.18.1-GA</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.7</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.7.7</version>
            </dependency>
            <dependency>
                <groupId>antlr</groupId>
                <artifactId>antlr</artifactId>
                <version>2.7.7</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.disney.shared</groupId>
                <artifactId>SharedCore</artifactId>
                <version>${shared.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>jxl</groupId>
                        <artifactId>jxl</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${testdb.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>6.8.8</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <defaultGoal>install</defaultGoal>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>add-target-src</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>add-source</goal>
                            </goals>
                            <configuration>
                                <sources>
                                    <source>target/src/main/java</source>
                                </sources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>add-target-test</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>add-test-source</goal>
                            </goals>
                            <configuration>
                                <sources>
                                    <source>target/src/test/java</source>
                                </sources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.andromda.maven.plugins</groupId>
                    <artifactId>andromda-maven-plugin</artifactId>
                    <version>${andromda.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.andromda.maven.plugins</groupId>
                    <artifactId>andromdapp-maven-plugin</artifactId>
                    <version>${andromda.version}</version>
                </plugin>
                <!--plugin>
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                </plugin-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>tomcat-maven-plugin</artifactId>
                    <version>1.1</version>
                    <configuration>
                      <contextFile>${project.basedir}/src/test/resources/context.xml</contextFile>
                      <additionalConfigFilesDir>${project.basedir}/src/test/resources</additionalConfigFilesDir>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
        </plugins>
    </build>
    <modules>
        <!-- Save the values used to generate this project from andromdapp
        applicationType=war
        war=true
        ear=$ear
        appServer=$appServer
        databaseType=h2
        testDatabase=$testDatabase
        ejb3Persistence=$ejb3Persistence
        transactionPersistenceType=hibernate
        jsr181Webservice=$jsr181Webservice
        ejb=$ejb
        ejb3=$ejb3
        hibernate=true
        spring=$spring
        web=false
        webservice=false
        struts=$struts
        jsf=$jsf
        cxf=$cxf
        rest=$rest
        jbossSeam=$jbossSeam
        webserviceStack=$webserviceStack
        embeddedJetty=$embeddedJetty
        -->
        <module>mda</module>
        <module>common</module>
    </modules>
    <properties>
        <commons-lang.version>2.6</commons-lang.version>
        <junit.version>4.13.1</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <andromda.version>4.0-SNAPSHOT</andromda.version>
        <downloadSources>true</downloadSources>
        <createChecksum>true</createChecksum>
        <uniqueVersion>false</uniqueVersion>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <stagingDirectory>C:/Workspaces/A34/jdbcmetadata/target/site</stagingDirectory>
        <testdb.groupId>com.h2database</testdb.groupId>
        <testdb.artifactId>h2</testdb.artifactId>
        <testdb.version>1.4.181</testdb.version>
        <testdb.driver>org.h2.Driver</testdb.driver>
        <testdb.dialect>org.hibernate.dialect.H2Dialect</testdb.dialect>
        <!-- See http://www.h2database.com/html/features.html#database_url (mixed mode) -->
        <testdb.url>jdbc:h2:~/${application.id};AUTO_SERVER=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1</testdb.url>
        <testdb.username>sa</testdb.username>
        <testdb.password>sa</testdb.password>
        <!--
            Change this to generate to the correct MDA database mappings,
            For MySql use: MySQL
            For Hypersonic use: HypersonicSql
            For H2 use: H2
            For Oracle9i use: Oracle9i
            For DB2 use: DB2
            For Informix use: InformixDB
            For MSSQL use: MSSQL
            For Pointbase use: PointBase
            For Postgres use: PostgreSQL
            For Sybase use: Sybase
            For SapDB use: SapDB
            For Derby use: Derby
        -->
        <sql.mappings>
            H2
        </sql.mappings>
        <!--
        Change this for the appropriate database
        For DB2 use: org.hibernate.dialect.DB2Dialect or org.hibernate.dialect.DB2390Dialect org.hibernate.dialect.DB2400Dialect
        For Derby use: org.hibernate.dialect.DerbyDialect
        For H2 use: org.hibernate.dialect.H2Dialect
        For Hypersonic use: org.hibernate.dialect.HSQLDialect
        For Informix use: org.hibernate.dialect.InformixDialect
        For MySql4 use: org.hibernate.dialect.MySQLDialect
        For MySql5+ use: org.hibernate.dialect.MySQL5Dialect
        For MySql InnoDB use: org.hibernate.dialect.MySQL5InnoDBDialect
        For MySql MyISAM use: org.hibernate.dialect.MySQLMyISAMDialect
        For MSSQL use: org.hibernate.dialect.SQLServerDialect
        For Oracle any version use: org.hibernate.dialect.OracleDialect
        For Oracle8i use: org.hibernate.dialect.Oracle8iDialect
        For Oracle9i use: org.hibernate.dialect.Oracle9iDialect
        For Oracle10g or later use: org.hibernate.dialect.Oracle10gDialect
        For Pointbase use: org.hibernate.dialect.PointbaseDialect
        For Postgres use: org.hibernate.dialect.PostgreSQLDialect
        For Progress use: org.hibernate.dialect.ProgressDialect
        For SapDB use: org.hibernate.dialect.SAPDBDialect
        For Sybase use: org.hibernate.dialect.SybaseDialect or org.hibernate.dialect.Sybase11Dialect
        For Sybase Anywhere use: org.hibernate.dialect.SybaseAnywhereDialect
        -->
        <hibernate.dialect>
            org.hibernate.dialect.H2Dialect
        </hibernate.dialect>
        <tomcat.home>${env.CATALINA_HOME}</tomcat.home>
        <application.id>jdbcmetadata</application.id>
        <application.package>org.andromda.jdbcmetadata</application.package>
        <application.name>JDBCMetadata</application.name>
        <application.version>1.0-SNAPSHOT</application.version>
        <dataSource.name>jdbc/${application.id}</dataSource.name>
        <dataSource>java:comp/env/${dataSource.name}</dataSource>
        <hibernate.version>4.3.6.Final</hibernate.version>
    </properties>
    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--
                Change driver path and jar for appropriate database
                For MySQL use: mysql-connector-java-X-bin.jar
                For Hypersonic use: hsqldb.jar
                -->
                <jdbc.driver.jar>
                    /path/to/h2/lib/h2.jar
                </jdbc.driver.jar>
                <!--
                    Change driver for appropriate database
                    For MySQL use: com.mysql.jdbc.Driver
                    For H2 use: org.h2.Driver
                    For Hypersonic use: org.hsqldb.jdbcDriver
                    For Oracle9i use: oracle.jdbc.driver.OracleDriver
                    For DB2 use: COM.ibm.db2.jdbc.app.DB2Driver
                    For Informix use: com.informix.jdbc.IfxDriver
                    For MSSQL use: com.microsoft.jdbc.sqlserver.SQLServerDriver
                    For Pointbase use: com.pointbase.jdbc.jdbcUniversalDriver
                    For Postgres use: org.postgresql.Driver
                    For Sybase use: com.sybase.jdbc2.jdbc.SybDataSource
                    For SapDB use: com.sap.dbtech.jdbc.DriverSapDB
                    For Progress use: com.progress.sql.jdbc.JdbcProgressDriver
                    For Derby use: org.apache.derby.jdbc.EmbeddedDriver
                -->
                <jdbc.driver>
                    org.h2.Driver
                </jdbc.driver>
                <!--
                    Change connection url for appropriate database
                    For MySQL use: jdbc:mysql://localhost:3306/jdbcmetadata
                    For Hypersonic use: jdbc:hsqldb:hsql://127.0.0.1:1701
                    For Oracle9i use: jdbc:oracle:thin:@localhost:1521:yoursid
                    For DB2 use: jdbc:db2:jdbcmetadata
                    For Informix use: jdbc:informix-sqli://localhost:1557/jdbcmetadata:INFORMIXSERVER=myserver
                    For MSSQL use: jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=jdbcmetadata
                    For Pointbase use: jdbc:pointbase:server://@pointbase.server@:@pointbase.port/pointbase.jdbcmetadata@,new
                    For Postgres use: jdbc:postgresql://localhost/jdbcmetadata
                    For Sybase use: jdbc:sybase:Tds:localhost:5000/jdbcmetadata?JCONNECT_VERSION=6
                    For SapDB use: jdbc:sapdb://127.0.0.1/jdbcmetadata
                    For Progress use: jdbc:JdbcProgress:T:localhost:3305:jdbcmetadata
                -->
                <jdbc.url>
                    jdbc:h2:~/jdbcmetadata
                </jdbc.url>
                <!-- Enter id/password for the database connection -->
                <jdbc.username>
                    sa
                </jdbc.username>
                <jdbc.password>
                        jdbcmetadata
                </jdbc.password>
                <!--
                    Change exception sorter class name for appropriate database
                    For MySQL use: org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter
                    For Hypersonic use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Oracle9i use: org.jboss.resource.adapter.jdbc.vendor.OracleExceptionSorter
                    For DB2 use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Informix use: org.jboss.resource.adapter.jdbc.vendor.InformixExceptionSorter
                    For MSSQL use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Pointbase use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Postgres use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Sybase use: org.jboss.resource.adapter.jdbc.vendor.SybaseExceptionSorter
                    For SapDB use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                    For Progress use: org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter
                -->
                <jdbc.exception.sorter>
                    org.jboss.resource.adapter.jdbc.NullExceptionSorter
                </jdbc.exception.sorter>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.andromda.maven.plugins</groupId>
                            <artifactId>andromdapp-maven-plugin</artifactId>
                            <version>${andromda.version}</version>
                            <!-- provides the injection of the script wrapper support into the class files (this should only
                                 be done when developing locally), uncomment this executions element to enable
                            <executions>
                                <execution>
                                    <id>instrument-scripts</id>
                                    <goals>
                                        <goal>instrument-scripts</goal>
                                    </goals>
                                </execution>
                            </executions>
                            -->
                            <configuration>
                                <scriptWrapper>org.andromda.scriptwrappers.GroovyScriptWrapper</scriptWrapper>
                                <locations>
                                    <location>
                                        <rootPath>${project.basedir}/src/main/java</rootPath>
                                        <!-- adjust these to include or exclude specific files, by default
                                             all files found in the rootPath are considered
                                        <includes>
                                            <include>relative/path/to/file/to/include/SomeClass.java</include>
                                        </includes>
                                        <excludes>
                                            <exclude>relative/path/to/file/to/include/SomeClass.java</exclude>
                                        </excludes>
                                        -->
                                    </location>
                                </locations>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>
    <repositories>
        <!-- This repository should already be in maven %M2_HOME%/config/settings.xml>
        <repository>
            <id>wdw</id>
            <name>WDW Nexus Repository for AndroMDA</name>
            <url>http://javacoe.wdw.disney.com/nexus/content/groups/public</url>
        </repository-->
        <!-- uncomment if outside firewall or if you need external updates>
        <repository>
            <id>sonatype</id>
            <name>Sonatype AndroMDA Repository</name>
            <url>http://oss.sonatype.org/content/groups/public</url>
        </repository>
        <repository>
            <id>jboss-public</id>
            <name>JBoss Repository</name>
            <url>http://repository.jboss.org/nexus/content/groups/public-jboss</url>
        </repository>
        <repository>
            <id>download</id>
            <name>Java.Net Download</name>
            <url>http://download.java.net/maven/2</url>
        </repository>
        <repository>
            <id>Codehaus Snapshots</id>
            <url>http://snapshots.repository.codehaus.org</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository-->
    </repositories>
    <pluginRepositories>
        <!-- If you want the latest andromda 4.0-SNAPSHOT builds. Or use -Pinitial-build to use settings.xml profile >
        <pluginRepository>
            <id>initial-build</id>
            <name>WDW Nexus Repository for AndroMDA builds</name>
            <url>http://javacoe.wdw.disney.com/nexus/content/repositories/initial-build</url>
            <releases>
              <enabled>false</enabled>
            </releases>
            <snapshots>
              <enabled>true</enabled>
            </snapshots>
        </pluginRepository-->
        <!-- This repository should already be in maven %M2_HOME%/config/settings.xml>
        <pluginRepository>
            <id>wdw</id>
            <name>WDW Nexus Repository</name>
            <url>http://javacoe.wdw.disney.com/nexus/content/groups/public</url>
            <releases>
              <enabled>true</enabled>
            </releases>
            <snapshots>
              <enabled>true</enabled>
            </snapshots>
        </pluginRepository-->
        <!-- External andromda updates from SourceForge/Codehaus -->
        <!--pluginRepository>
            <id>Codehaus Snapshots</id>
            <url>http://snapshots.repository.codehaus.org</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository-->
    </pluginRepositories>
    <prerequisites>
        <maven>3.0.1</maven>
    </prerequisites>
    <!-- Uncomment to add additional project reporting, must include references to parent reporting plugins -->
    <!--reporting>
        <plugins-->
            <!-- Uncomment after configuring SCM connection>
            <plugin>
                <artifactId>maven-changelog-plugin</artifactId>
                <version>${maven-changelog-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <id>All Reports</id>
                        <configuration>
                            <type>range</type>
                            <range>90</range>
                            <basedir>C:/Workspaces/A34/jdbcmetadata</basedir>
                            ClearCase:
                            <dateFormat>yyyyMMdd.HHmmss</dateFormat>
                        </configuration>
                        <reports>
                            <report>changelog</report>
                            <report>file-activity</report>
                            <report>dev-activity</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin-->
            <!-- Compare APIs to a previous version, uncomment when a release version exists -->
            <!--plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>clirr-maven-plugin</artifactId>
                <version>${clirr-maven-plugin.version}</version>
                <inherited>true</inherited>
                <configuration>
                    <minSeverity>info</minSeverity>
                </configuration>
            </plugin-->
        <!--/plugins>
    </reporting-->
</project>
